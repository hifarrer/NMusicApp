{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# NuMusic\n\n## Overview\n\nNuMusic is a full-stack web application that enables users to generate AI-powered music using ElevenLabs AI music generation service. Users can input musical tags, lyrics, and specify duration to create custom audio tracks. The application features a modern React frontend with shadcn/ui components and an Express.js backend with PostgreSQL database integration.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Project Configuration\n\n**Production Domain**: numusic.app  \n**Development Environment**: Replit workspace  \n**Webhook Endpoints**: Configured for numusic.app domain\n\n## Subscription Plans\n\nThe platform offers three subscription tiers:\n\n- **Free Plan**: Up to 5 songs per month, standard quality, public sharing only\n- **Basic Plan**: Up to 30 songs per month, high quality, private/public sharing ($9/month or $90/year)\n- **Premium Plan**: Up to 200 songs per month, ultra-high quality, priority generation, commercial license ($19/month or $190/year)\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Authentication**: Replit Auth with OpenID Connect integration\n- **Session Management**: Express sessions with PostgreSQL storage\n- **API Design**: RESTful endpoints with structured error handling\n- **Request Logging**: Custom middleware for API request/response logging\n\n### Data Layer\n- **Database**: PostgreSQL with Neon serverless driver\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema changes\n- **Connection**: Connection pooling with @neondatabase/serverless\n\n### Authentication & Authorization\n- **Provider**: Custom database-driven authentication system\n- **Password Security**: bcrypt hashing with salt rounds for secure password storage\n- **Session Management**: Express sessions with PostgreSQL storage\n- **User Management**: Complete user registration and login with email/password\n- **Route Protection**: Middleware-based authentication checks with requireAuth\n- **Auth Endpoints**: `/api/auth/login`, `/api/auth/register`, `/api/auth/logout`, `/api/auth/user`\n\n### External Dependencies\n\n- **AI Service**: FAL.ai for music generation using the ace-step model\n- **Database**: Neon PostgreSQL for data persistence\n- **Authentication**: Custom database-driven auth system with bcrypt password hashing\n- **Email Service**: Resend for transactional email delivery (verification and welcome emails)\n- **Font Services**: Google Fonts for typography (Inter, Architects Daughter, DM Sans, Fira Code, Geist Mono)\n- **Development**: Replit-specific tooling for development environment integration\n\n### Key Design Decisions\n\n**Monorepo Structure**: Single repository with separate client, server, and shared directories for code organization and type sharing.\n\n**Type Safety**: Full TypeScript implementation with shared types between frontend and backend, validated using Zod schemas.\n\n**Component Architecture**: Modular UI components using shadcn/ui for consistency and maintainability.\n\n**Database Design**: Normalized schema with separate tables for users, sessions, music generations, admin users, subscription plans, and site settings to support scalability.\n\n**Authentication System**: Custom-built authentication with secure password hashing, session management, email verification requirements, and comprehensive form validation.\n\n**Email Verification**: Mandatory email verification system using Resend service with professional branded email templates, token-based verification, and automated welcome emails.\n\n**Error Handling**: Centralized error handling with structured responses and proper HTTP status codes.\n\n**Development Experience**: Hot reloading, runtime error overlays, and Replit-specific development tools for improved productivity.","size_bytes":4355},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Music theme colors\n        \"music-dark\": \"var(--music-dark)\",\n        \"music-secondary\": \"var(--music-secondary)\", \n        \"music-purple\": \"var(--music-purple)\",\n        \"music-blue\": \"var(--music-blue)\",\n        \"music-green\": \"var(--music-green)\",\n        \"music-accent\": \"var(--music-accent)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"pulse-slow\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse-slow\": \"pulse-slow 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"bounce-gentle\": \"bounce 2s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3357},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/reset-admin-password.js":{"content":"import bcrypt from 'bcryptjs';\nimport { pool } from '../server/db.js';\n\nasync function resetAdminPassword() {\n  try {\n    const email = 'admin@numusic.app';\n    const newPassword = 'admin123';\n    \n    // Hash the new password\n    const saltRounds = 12;\n    const hashedPassword = await bcrypt.hash(newPassword, saltRounds);\n    \n    // Update the admin user password\n    const result = await pool.query(\n      'UPDATE admin_users SET password_hash = $1 WHERE email = $2 RETURNING id, email',\n      [hashedPassword, email]\n    );\n    \n    if (result.rows.length > 0) {\n      console.log('✅ Admin password reset successfully!');\n      console.log(`📧 Email: ${email}`);\n      console.log(`🔐 New Password: ${newPassword}`);\n      console.log('');\n      console.log('You can now login to the admin dashboard at /admin/login');\n    } else {\n      console.log('❌ Admin user not found. Creating new admin user...');\n      \n      // Create new admin user if doesn't exist\n      const createResult = await pool.query(\n        'INSERT INTO admin_users (email, password_hash, role, created_at, updated_at) VALUES ($1, $2, $3, NOW(), NOW()) RETURNING id, email',\n        [email, hashedPassword, 'super_admin']\n      );\n      \n      if (createResult.rows.length > 0) {\n        console.log('✅ New admin user created successfully!');\n        console.log(`📧 Email: ${email}`);\n        console.log(`🔐 Password: ${newPassword}`);\n        console.log('');\n        console.log('You can now login to the admin dashboard at /admin/login');\n      }\n    }\n    \n  } catch (error) {\n    console.error('❌ Error resetting admin password:', error);\n  } finally {\n    await pool.end();\n  }\n}\n\nresetAdminPassword();","size_bytes":1704},"server/adminAuth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport bcrypt from 'bcryptjs';\nimport session from 'express-session';\nimport { adminUsers, type AdminUser } from '@shared/schema';\nimport { storage } from './storage';\n\n// Extend Express Request to include admin user\ndeclare global {\n  namespace Express {\n    interface Request {\n      adminUser?: AdminUser;\n    }\n  }\n}\n\n// Admin authentication middleware\nexport const isAdminAuthenticated = async (req: Request, res: Response, next: NextFunction) => {\n  const adminUserId = req.session?.adminUserId;\n  \n  if (!adminUserId) {\n    return res.status(401).json({ message: 'Admin authentication required' });\n  }\n\n  try {\n    const adminUser = await storage.getAdminUser(adminUserId);\n    if (!adminUser || !adminUser.isActive) {\n      return res.status(401).json({ message: 'Admin account not found or inactive' });\n    }\n\n    req.adminUser = adminUser;\n    next();\n  } catch (error) {\n    console.error('Admin auth error:', error);\n    return res.status(500).json({ message: 'Authentication error' });\n  }\n};\n\n// Hash password utility\nexport const hashPassword = async (password: string): Promise<string> => {\n  const salt = await bcrypt.genSalt(12);\n  return bcrypt.hash(password, salt);\n};\n\n// Verify password utility\nexport const verifyPassword = async (password: string, hash: string): Promise<boolean> => {\n  return bcrypt.compare(password, hash);\n};\n\n// Initialize default admin user\nexport const initializeDefaultAdmin = async () => {\n  try {\n    const existingAdmin = await storage.getAdminUserByUsername('admin');\n    if (!existingAdmin) {\n      const hashedPassword = await hashPassword('password123');\n      await storage.createAdminUser({\n        username: 'admin',\n        passwordHash: hashedPassword,\n        email: 'admin@aimusicstudio.com',\n        role: 'super_admin',\n        isActive: true,\n      });\n      console.log('Default admin user created: admin/password123');\n    }\n  } catch (error) {\n    console.error('Error initializing default admin:', error);\n  }\n};\n\n// Admin session configuration\nexport const adminSessionConfig = {\n  ...session({\n    secret: process.env.SESSION_SECRET + '_admin',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  }),\n};\n\ndeclare module 'express-session' {\n  interface SessionData {\n    adminUserId?: string;\n  }\n}","size_bytes":2471},"server/customAuth.ts":{"content":"import { Request, Response, NextFunction, Express } from 'express';\nimport session from 'express-session';\nimport { z } from 'zod';\nimport bcrypt from 'bcryptjs';\nimport { storage } from './storage';\nimport type { User } from '@shared/schema';\nimport { EmailService } from './emailService';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: string;\n  }\n}\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: User;\n    }\n  }\n}\n\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport const registerSchema = z.object({\n  firstName: z.string().min(1),\n  lastName: z.string().min(1),\n  email: z.string().email(),\n  password: z.string().min(8),\n});\n\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type RegisterData = z.infer<typeof registerSchema>;\n\n// Hash password\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return bcrypt.hash(password, saltRounds);\n}\n\n// Verify password\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\n// Middleware to check if user is authenticated\nexport function requireAuth(req: Request, res: Response, next: NextFunction) {\n  if (!req.session?.userId) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n  next();\n}\n\n// Middleware to load user from session\nexport async function loadUser(req: Request, res: Response, next: NextFunction) {\n  if (req.session?.userId) {\n    try {\n      const user = await storage.getUserById(req.session.userId);\n      if (user) {\n        req.user = user;\n      }\n    } catch (error) {\n      console.error('Error loading user from session:', error);\n    }\n  }\n  next();\n}\n\n// Setup custom authentication routes\nexport function setupCustomAuth(app: Express) {\n  // Setup session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'dev-secret-key-change-in-production',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // set to true if using HTTPS\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n  // Load user middleware for all routes\n  app.use(loadUser);\n\n  // Register route\n  app.post('/api/auth/register', async (req: Request, res: Response) => {\n    try {\n      const { firstName, lastName, email, password } = registerSchema.parse(req.body);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'Email already registered' });\n      }\n\n      // Hash password and create user (NOT verified by default)\n      const passwordHash = await hashPassword(password);\n      const user = await storage.createUser({\n        firstName,\n        lastName,\n        email,\n        passwordHash,\n        emailVerified: false,\n      });\n\n      // Generate and set verification token\n      const verificationToken = EmailService.generateVerificationToken();\n      const tokenExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n      await storage.setEmailVerificationToken(user.id, verificationToken, tokenExpiry);\n\n      // Send verification email\n      try {\n        await EmailService.sendVerificationEmail(email, firstName, verificationToken);\n      } catch (emailError) {\n        console.error('Failed to send verification email:', emailError);\n        // Still return success - user can request resend\n      }\n\n      // DO NOT create session - user must verify email first\n      res.status(201).json({ \n        message: 'Registration successful. Please check your email to verify your account.',\n        email,\n        firstName\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid input data' });\n      }\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Login route\n  app.post('/api/auth/login', async (req: Request, res: Response) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n\n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      // Verify password\n      const isValidPassword = await verifyPassword(password, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      // Check if email is verified\n      if (!user.emailVerified) {\n        return res.status(403).json({ \n          message: 'Please verify your email address before logging in. Check your inbox for the verification link.',\n          emailVerificationRequired: true\n        });\n      }\n\n      // Create session\n      req.session.userId = user.id;\n\n      // Return user without password hash\n      const { passwordHash: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error('Login error:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid input data' });\n      }\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Logout route\n  app.post('/api/auth/logout', (req: Request, res: Response) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error('Logout error:', err);\n        return res.status(500).json({ message: 'Failed to logout' });\n      }\n      res.clearCookie('connect.sid');\n      res.redirect('/');\n    });\n  });\n\n  // Alternative logout route for compatibility\n  app.get('/api/logout', (req: Request, res: Response) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error('Logout error:', err);\n        return res.status(500).json({ message: 'Failed to logout' });\n      }\n      res.clearCookie('connect.sid');\n      res.redirect('/');\n    });\n  });\n\n  // Email verification route\n  app.get('/api/auth/verify-email/:token', async (req: Request, res: Response) => {\n    try {\n      const { token } = req.params;\n      \n      if (!token) {\n        return res.status(400).json({ message: 'Verification token is required' });\n      }\n\n      const verifiedUser = await storage.verifyUserEmail(token);\n      if (!verifiedUser) {\n        return res.status(400).json({ \n          message: 'Invalid or expired verification token. Please request a new verification email.',\n          expired: true\n        });\n      }\n\n      // Send welcome email\n      try {\n        await EmailService.sendWelcomeEmail(verifiedUser.email, verifiedUser.firstName);\n      } catch (emailError) {\n        console.error('Failed to send welcome email:', emailError);\n        // Continue - verification was successful\n      }\n\n      // Return success with user info\n      const { passwordHash: _, ...userWithoutPassword } = verifiedUser;\n      res.json({ \n        message: 'Email verified successfully! You can now log in to your account.',\n        user: userWithoutPassword,\n        verified: true\n      });\n    } catch (error) {\n      console.error('Email verification error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Resend verification email route\n  app.post('/api/auth/resend-verification', async (req: Request, res: Response) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ message: 'Email is required' });\n      }\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      if (user.emailVerified) {\n        return res.status(400).json({ message: 'Email is already verified' });\n      }\n\n      // Generate new verification token\n      const verificationToken = EmailService.generateVerificationToken();\n      const tokenExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n      await storage.setEmailVerificationToken(user.id, verificationToken, tokenExpiry);\n\n      // Send verification email\n      await EmailService.sendVerificationEmail(user.email, user.firstName, verificationToken);\n\n      res.json({ \n        message: 'Verification email sent. Please check your inbox.',\n        email: user.email\n      });\n    } catch (error) {\n      console.error('Resend verification error:', error);\n      res.status(500).json({ message: 'Failed to send verification email' });\n    }\n  });\n\n  // Request password reset\n  app.post('/api/auth/request-password-reset', async (req: Request, res: Response) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ message: 'Email is required' });\n      }\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if user exists or not for security\n        return res.json({ \n          message: 'If an account with that email exists, we\\'ve sent password reset instructions.' \n        });\n      }\n\n      if (!user.emailVerified) {\n        return res.status(400).json({ \n          message: 'Please verify your email address first before resetting your password.' \n        });\n      }\n\n      // Generate password reset token\n      const resetToken = EmailService.generatePasswordResetToken();\n      const tokenExpiry = new Date(Date.now() + 60 * 60 * 1000); // 1 hour\n      await storage.setPasswordResetToken(user.id, resetToken, tokenExpiry);\n\n      // Send password reset email\n      await EmailService.sendPasswordResetEmail(user.email, user.firstName, resetToken);\n\n      res.json({ \n        message: 'If an account with that email exists, we\\'ve sent password reset instructions.'\n      });\n    } catch (error) {\n      console.error('Password reset request error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Reset password with token\n  app.post('/api/auth/reset-password', async (req: Request, res: Response) => {\n    try {\n      const { token, newPassword } = req.body;\n      \n      if (!token || !newPassword) {\n        return res.status(400).json({ message: 'Token and new password are required' });\n      }\n\n      if (newPassword.length < 8) {\n        return res.status(400).json({ message: 'Password must be at least 8 characters long' });\n      }\n\n      // Hash new password\n      const passwordHash = await hashPassword(newPassword);\n\n      // Reset password using token\n      const updatedUser = await storage.resetUserPassword(token, passwordHash);\n      if (!updatedUser) {\n        return res.status(400).json({ \n          message: 'Invalid or expired reset token. Please request a new password reset.' \n        });\n      }\n\n      res.json({ \n        message: 'Password reset successfully. You can now log in with your new password.',\n        email: updatedUser.email\n      });\n    } catch (error) {\n      console.error('Password reset error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Update user email route\n  app.put('/api/user/email', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { newEmail } = req.body;\n      if (!newEmail || typeof newEmail !== 'string') {\n        return res.status(400).json({ message: 'New email is required' });\n      }\n\n      const userId = req.session.userId!;\n      \n      // Check if email already exists\n      const existingUser = await storage.getUserByEmail(newEmail);\n      if (existingUser && existingUser.id !== userId) {\n        return res.status(400).json({ message: 'Email already in use' });\n      }\n\n      // Update user email\n      const updatedUser = await storage.updateUserEmail(userId, newEmail);\n      if (!updatedUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      const { passwordHash: _, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error('Update email error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Update user password route\n  app.put('/api/user/password', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { currentPassword, newPassword } = req.body;\n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ message: 'Current password and new password are required' });\n      }\n\n      const userId = req.session.userId!;\n      const user = await storage.getUserById(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      // Verify current password\n      const isValidPassword = await verifyPassword(currentPassword, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(400).json({ message: 'Current password is incorrect' });\n      }\n\n      // Hash new password\n      const newPasswordHash = await hashPassword(newPassword);\n      \n      // Update password\n      const updatedUser = await storage.updateUserPassword(userId, newPasswordHash);\n      if (!updatedUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      const { passwordHash: _, ...userWithoutPassword } = updatedUser;\n      res.json({ message: 'Password updated successfully' });\n    } catch (error) {\n      console.error('Update password error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Get current user route\n  app.get('/api/auth/user', (req: Request, res: Response) => {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n    \n    // Return user without password hash\n    const { passwordHash: _, ...userWithoutPassword } = req.user;\n    res.json(userWithoutPassword);\n  });\n}","size_bytes":13925},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Gets a publicly accessible signed URL for the object entity\n  async getObjectEntityPublicUrl(objectPath: string, ttlSec: number = 3600): Promise<string> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"GET\",\n      ttlSec,\n    });\n  }\n\n  // Upload audio buffer to object storage\n  async uploadAudioBuffer(audioBuffer: Uint8Array, filename: string): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectPath = `${privateObjectDir}/generated/${filename}`;\n    const { bucketName, objectName } = parseObjectPath(objectPath);\n    \n    const bucket = objectStorageClient.bucket(bucketName);\n    const file = bucket.file(objectName);\n    \n    // Upload the buffer\n    await file.save(audioBuffer, {\n      metadata: {\n        contentType: 'audio/mpeg',\n      },\n    });\n    \n    return `/objects/generated/${filename}`;\n  }\n\n  // Download object and stream to response\n  async downloadObject(file: File, res: any, cacheTtlSec: number = 3600): Promise<void> {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `public, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err: any) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":7559},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcryptjs\";\nimport { storage } from \"./storage\";\nimport { setupCustomAuth, requireAuth } from \"./customAuth\";\nimport { \n  insertTextToMusicSchema, \n  insertAudioToMusicSchema, \n  updateMusicGenerationVisibilitySchema,\n  adminLoginSchema,\n  insertAdminUserSchema,\n  updateAdminUserSchema,\n  insertSubscriptionPlanSchema,\n  updateSubscriptionPlanSchema,\n  insertSiteSettingSchema,\n  updateSiteSettingSchema,\n  updateUserSchema,\n} from \"@shared/schema\";\nimport { ObjectStorageService } from \"./objectStorage\";\nimport { z } from \"zod\";\nimport { \n  isAdminAuthenticated, \n  hashPassword, \n  verifyPassword, \n  initializeDefaultAdmin \n} from \"./adminAuth\";\nimport { generateLyrics } from \"./openaiService\";\nimport { generateMusic } from \"./elevenLabsService\";\nimport { ObjectNotFoundError } from \"./objectStorage\";\n\nconst FAL_KEY = process.env.FAL_KEY || process.env.FAL_API_KEY || \"36d002d2-c5db-49fe-b02c-5552be87e29e:cb8148d966acf4a68d72e1cb719d6079\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize default admin user\n  await initializeDefaultAdmin();\n  \n  // Custom auth setup\n  setupCustomAuth(app);\n\n  // Object storage routes\n  app.post(\"/api/objects/upload\", requireAuth, async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ message: \"Failed to get upload URL\" });\n    }\n  });\n\n  app.post(\"/api/objects/normalize-path\", requireAuth, async (req, res) => {\n    try {\n      const { uploadURL } = req.body;\n      if (!uploadURL) {\n        return res.status(400).json({ message: \"Upload URL is required\" });\n      }\n      \n      const objectStorageService = new ObjectStorageService();\n      const objectPath = objectStorageService.normalizeObjectEntityPath(uploadURL);\n      res.json({ objectPath });\n    } catch (error) {\n      console.error(\"Error normalizing object path:\", error);\n      res.status(500).json({ message: \"Failed to normalize object path\" });\n    }\n  });\n\n  // Text-to-music generation using ElevenLabs\n  app.post(\"/api/generate-text-to-music\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const validation = insertTextToMusicSchema.parse(req.body);\n      \n      // Create generation record\n      const generation = await storage.createTextToMusicGeneration(userId, validation);\n      \n      // Convert duration from seconds to milliseconds\n      const durationMs = (validation.duration || 30) * 1000;\n      \n      // Log the input parameters\n      console.log(`\\n=== TEXT-TO-MUSIC ELEVENLABS REQUEST ===`);\n      console.log(`User ID: ${userId}`);\n      console.log(`Generation ID: ${generation.id}`);\n      console.log(`Tags: ${validation.tags}`);\n      console.log(`Lyrics: ${validation.lyrics || 'N/A'}`);\n      console.log(`Duration: ${durationMs}ms`);\n      console.log(`=========================================\\n`);\n\n      // Generate music using ElevenLabs\n      const audioStream = await generateMusic({\n        tags: validation.tags,\n        lyrics: validation.lyrics || undefined,\n        durationMs: durationMs\n      });\n\n      // Convert stream to buffer for storage\n      const chunks: Uint8Array[] = [];\n      const reader = audioStream.getReader();\n      \n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n          chunks.push(value);\n        }\n      } finally {\n        reader.releaseLock();\n      }\n      \n      const audioBuffer = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));\n      let offset = 0;\n      for (const chunk of chunks) {\n        audioBuffer.set(chunk, offset);\n        offset += chunk.length;\n      }\n\n      // Upload to object storage\n      const objectStorageService = new ObjectStorageService();\n      const filename = `generated-music-${generation.id}.mp3`;\n      const uploadUrl = await objectStorageService.uploadAudioBuffer(audioBuffer, filename);\n      \n      // Update generation with success\n      await storage.updateMusicGeneration(generation.id, {\n        status: \"completed\",\n        audioUrl: uploadUrl,\n      });\n\n      res.json({ \n        generationId: generation.id, \n        status: \"completed\",\n        audioUrl: uploadUrl \n      });\n    } catch (error) {\n      console.error(\"Error generating music with ElevenLabs:\", error);\n      \n      // Update generation with failure\n      try {\n        await storage.updateMusicGeneration(req.body.generationId || '', { status: \"failed\" });\n      } catch (updateError) {\n        console.error(\"Error updating generation status:\", updateError);\n      }\n      \n      res.status(500).json({ message: \"Failed to generate music\" });\n    }\n  });\n\n  // Audio-to-music generation\n  app.post(\"/api/generate-audio-to-music\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const validation = insertAudioToMusicSchema.parse(req.body);\n      \n      // Create generation record\n      const generation = await storage.createAudioToMusicGeneration(userId, validation);\n      \n      // Validate audio URL is provided\n      if (!validation.inputAudioUrl) {\n        return res.status(400).json({ message: \"Audio file URL is required\" });\n      }\n\n      // Get publicly accessible URL for the audio file\n      const objectStorageService = new ObjectStorageService();\n      const publicAudioUrl = await objectStorageService.getObjectEntityPublicUrl(validation.inputAudioUrl, 7200); // 2 hours\n      \n      // Prepare API request payload\n      const apiPayload = {\n        audio_url: publicAudioUrl,\n        tags: validation.tags,\n        original_tags: validation.tags, // Copy tags to original_tags as required by FAL.ai\n        lyrics: validation.lyrics || \"\",\n      };\n\n      // Log the input parameters being sent to FAL.ai\n      console.log(`\\n=== AUDIO-TO-MUSIC API REQUEST ===`);\n      console.log(`User ID: ${userId}`);\n      console.log(`Generation ID: ${generation.id}`);\n      console.log(`API Payload being sent to FAL.ai:`);\n      console.log(JSON.stringify(apiPayload, null, 2));\n      console.log(`==================================\\n`);\n\n      // Submit request to FAL.ai\n      const falResponse = await fetch(\"https://queue.fal.run/fal-ai/ace-step/audio-to-audio\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Key ${FAL_KEY}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiPayload)\n      });\n\n      if (!falResponse.ok) {\n        const errorText = await falResponse.text();\n        console.error(\"FAL.ai API error:\", errorText);\n        await storage.updateMusicGeneration(generation.id, { status: \"failed\" });\n        return res.status(500).json({ message: \"Failed to submit audio generation request\" });\n      }\n\n      const falResult = await falResponse.json();\n      const requestId = falResult.request_id;\n\n      // Update generation with FAL request ID\n      await storage.updateMusicGeneration(generation.id, {\n        status: \"generating\",\n        falRequestId: requestId,\n      });\n\n      res.json({ generationId: generation.id, requestId });\n    } catch (error) {\n      console.error(\"Error generating audio-to-music:\", error);\n      res.status(500).json({ message: \"Failed to generate audio-to-music\" });\n    }\n  });\n\n  app.get(\"/api/generation/:id/status\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { id } = req.params;\n      \n      const generation = await storage.getMusicGeneration(id);\n      if (!generation || generation.userId !== userId) {\n        return res.status(404).json({ message: \"Generation not found\" });\n      }\n\n      // If already completed, return the result\n      if (generation.status === \"completed\" || generation.status === \"failed\") {\n        return res.json(generation);\n      }\n\n      // Check FAL.ai status\n      if (generation.falRequestId) {\n        const falResponse = await fetch(\n          `https://queue.fal.run/fal-ai/ace-step/requests/${generation.falRequestId}/status`,\n          {\n            headers: {\n              \"Authorization\": `Key ${FAL_KEY}`,\n            },\n          }\n        );\n\n        if (falResponse.ok) {\n          const falStatus = await falResponse.json();\n          \n          if (falStatus.status === \"COMPLETED\") {\n            // Get the result\n            const resultResponse = await fetch(\n              `https://queue.fal.run/fal-ai/ace-step/requests/${generation.falRequestId}`,\n              {\n                headers: {\n                  \"Authorization\": `Key ${FAL_KEY}`,\n                },\n              }\n            );\n\n            if (resultResponse.ok) {\n              const result = await resultResponse.json();\n              const updatedGeneration = await storage.updateMusicGeneration(id, {\n                status: \"completed\",\n                audioUrl: result.audio?.url,\n                seed: result.seed,\n              });\n              return res.json(updatedGeneration);\n            }\n          } else if (falStatus.status === \"FAILED\") {\n            const updatedGeneration = await storage.updateMusicGeneration(id, {\n              status: \"failed\",\n            });\n            return res.json(updatedGeneration);\n          }\n        }\n      }\n\n      res.json(generation);\n    } catch (error) {\n      console.error(\"Error checking generation status:\", error);\n      res.status(500).json({ message: \"Failed to check generation status\" });\n    }\n  });\n\n  app.get(\"/api/my-generations\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const generations = await storage.getUserMusicGenerations(userId);\n      res.json(generations);\n    } catch (error) {\n      console.error(\"Error fetching user generations:\", error);\n      res.status(500).json({ message: \"Failed to fetch generations\" });\n    }\n  });\n\n  // Get public music tracks for gallery\n  // Public plans endpoint\n  app.get(\"/api/plans\", async (req, res) => {\n    try {\n      const plans = await storage.getAllSubscriptionPlans();\n      res.json(plans.filter(plan => plan.isActive));\n    } catch (error) {\n      console.error(\"Error fetching subscription plans:\", error);\n      res.status(500).json({ message: \"Failed to fetch subscription plans\" });\n    }\n  });\n\n  app.get(\"/api/public-tracks\", async (req, res) => {\n    try {\n      const tracks = await storage.getPublicMusicGenerations();\n      res.json(tracks);\n    } catch (error) {\n      console.error(\"Error fetching public tracks:\", error);\n      res.status(500).json({ message: \"Failed to fetch public tracks\" });\n    }\n  });\n\n  // Get individual track (public access)\n  app.get(\"/api/track/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const track = await storage.getMusicGeneration(id);\n      \n      if (!track) {\n        return res.status(404).json({ message: \"Track not found\" });\n      }\n      \n      // Only allow access to public tracks or if user owns the track\n      if (track.visibility === \"private\") {\n        if (!req.isAuthenticated()) {\n          return res.status(401).json({ message: \"Authentication required\" });\n        }\n        \n        const user = req.user as any;\n        if (track.userId !== user.id) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n      \n      res.json(track);\n    } catch (error) {\n      console.error(\"Error fetching track:\", error);\n      res.status(500).json({ message: \"Failed to fetch track\" });\n    }\n  });\n\n  // Update track visibility and title\n  app.patch(\"/api/generation/:id/visibility\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { id } = req.params;\n      const validation = updateMusicGenerationVisibilitySchema.parse(req.body);\n\n      const generation = await storage.getMusicGeneration(id);\n      if (!generation || generation.userId !== userId) {\n        return res.status(404).json({ message: \"Generation not found\" });\n      }\n\n      const updatedGeneration = await storage.updateMusicGeneration(id, {\n        visibility: validation.visibility,\n        title: validation.title,\n      });\n\n      res.json(updatedGeneration);\n    } catch (error) {\n      console.error(\"Error updating generation visibility:\", error);\n      res.status(500).json({ message: \"Failed to update generation visibility\" });\n    }\n  });\n\n  // Delete music generation\n  app.delete(\"/api/generation/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { id } = req.params;\n\n      const generation = await storage.getMusicGeneration(id);\n      if (!generation || generation.userId !== userId) {\n        return res.status(404).json({ message: \"Generation not found\" });\n      }\n\n      await storage.deleteMusicGeneration(id);\n      res.status(200).json({ message: \"Track deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting generation:\", error);\n      res.status(500).json({ message: \"Failed to delete track\" });\n    }\n  });\n\n  // ===== ADMIN ROUTES =====\n  \n  // Admin login\n  app.post('/api/admin/login', async (req, res) => {\n    try {\n      const { username, password } = adminLoginSchema.parse(req.body);\n      \n      const adminUser = await storage.getAdminUserByUsername(username);\n      if (!adminUser || !adminUser.isActive) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n      \n      const isValidPassword = await verifyPassword(password, adminUser.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n      \n      // Update last login\n      await storage.updateAdminLastLogin(adminUser.id);\n      \n      // Set admin session\n      req.session.adminUserId = adminUser.id;\n      \n      // Return admin user (without password hash)\n      const { passwordHash, ...adminUserResponse } = adminUser;\n      res.json(adminUserResponse);\n    } catch (error) {\n      console.error('Admin login error:', error);\n      res.status(500).json({ message: 'Login failed' });\n    }\n  });\n  \n  // Admin logout\n  app.post('/api/admin/logout', (req, res) => {\n    req.session.adminUserId = undefined;\n    res.json({ message: 'Logged out' });\n  });\n  \n  // Get current admin user\n  app.get('/api/admin/user', isAdminAuthenticated, async (req, res) => {\n    const { passwordHash, ...adminUserResponse } = req.adminUser!;\n    res.json(adminUserResponse);\n  });\n  \n  // Dashboard stats\n  app.get('/api/admin/dashboard/stats', isAdminAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching dashboard stats:', error);\n      res.status(500).json({ message: 'Failed to fetch dashboard stats' });\n    }\n  });\n  \n  // User management\n  app.get('/api/admin/users', isAdminAuthenticated, async (req, res) => {\n    try {\n      const users = await storage.getAllAdminUsers();\n      const userList = users.map(({ passwordHash, ...user }) => user);\n      res.json(userList);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n  \n  app.post('/api/admin/users', isAdminAuthenticated, async (req, res) => {\n    try {\n      const userData = insertAdminUserSchema.parse(req.body);\n      const hashedPassword = await hashPassword(userData.password);\n      \n      const newUser = await storage.createAdminUser({\n        ...userData,\n        passwordHash: hashedPassword,\n      });\n      \n      const { passwordHash, ...userResponse } = newUser;\n      res.status(201).json(userResponse);\n    } catch (error) {\n      console.error('Error creating admin user:', error);\n      res.status(500).json({ message: 'Failed to create user' });\n    }\n  });\n  \n  app.put('/api/admin/users/:id', isAdminAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = updateAdminUserSchema.parse(req.body);\n      \n      const updates: any = { ...updateData };\n      if (updateData.newPassword) {\n        updates.passwordHash = await hashPassword(updateData.newPassword);\n        delete updates.newPassword;\n      }\n      \n      const updatedUser = await storage.updateAdminUser(id, updates);\n      const { passwordHash, ...userResponse } = updatedUser;\n      res.json(userResponse);\n    } catch (error) {\n      console.error('Error updating admin user:', error);\n      res.status(500).json({ message: 'Failed to update user' });\n    }\n  });\n  \n  // Subscription plans management\n  app.get('/api/admin/plans', isAdminAuthenticated, async (req, res) => {\n    try {\n      const plans = await storage.getAllSubscriptionPlans();\n      res.json(plans);\n    } catch (error) {\n      console.error('Error fetching subscription plans:', error);\n      res.status(500).json({ message: 'Failed to fetch subscription plans' });\n    }\n  });\n  \n  app.post('/api/admin/plans', isAdminAuthenticated, async (req, res) => {\n    try {\n      const planData = insertSubscriptionPlanSchema.parse(req.body);\n      const newPlan = await storage.createSubscriptionPlan(planData);\n      res.status(201).json(newPlan);\n    } catch (error) {\n      console.error('Error creating subscription plan:', error);\n      res.status(500).json({ message: 'Failed to create subscription plan' });\n    }\n  });\n  \n  app.put('/api/admin/plans/:id', isAdminAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = updateSubscriptionPlanSchema.parse(req.body);\n      const updatedPlan = await storage.updateSubscriptionPlan(id, updateData);\n      res.json(updatedPlan);\n    } catch (error) {\n      console.error('Error updating subscription plan:', error);\n      res.status(500).json({ message: 'Failed to update subscription plan' });\n    }\n  });\n  \n  app.delete('/api/admin/plans/:id', isAdminAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteSubscriptionPlan(id);\n      res.json({ message: 'Subscription plan deleted' });\n    } catch (error) {\n      console.error('Error deleting subscription plan:', error);\n      res.status(500).json({ message: 'Failed to delete subscription plan' });\n    }\n  });\n  \n  // Admin music tracks management\n  app.get('/api/admin/tracks', isAdminAuthenticated, async (req, res) => {\n    try {\n      const tracks = await storage.getAllMusicGenerations();\n      res.json(tracks);\n    } catch (error) {\n      console.error('Error fetching admin tracks:', error);\n      res.status(500).json({ message: 'Failed to fetch tracks' });\n    }\n  });\n\n  app.patch('/api/admin/tracks/:id/gallery-visibility', isAdminAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { showInGallery } = req.body;\n      \n      if (typeof showInGallery !== 'boolean') {\n        return res.status(400).json({ message: 'showInGallery must be a boolean' });\n      }\n      \n      const updatedTrack = await storage.updateMusicGenerationGalleryVisibility(id, showInGallery);\n      res.json(updatedTrack);\n    } catch (error) {\n      console.error('Error updating track gallery visibility:', error);\n      res.status(500).json({ message: 'Failed to update track gallery visibility' });\n    }\n  });\n\n  app.patch('/api/admin/tracks/:id/title', isAdminAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { title } = req.body;\n      \n      if (typeof title !== 'string') {\n        return res.status(400).json({ message: 'title must be a string' });\n      }\n      \n      if (title.trim().length === 0) {\n        return res.status(400).json({ message: 'title cannot be empty' });\n      }\n      \n      if (title.length > 100) {\n        return res.status(400).json({ message: 'title must be 100 characters or less' });\n      }\n      \n      const updatedTrack = await storage.updateMusicGenerationTitle(id, title.trim());\n      res.json(updatedTrack);\n    } catch (error) {\n      console.error('Error updating track title:', error);\n      res.status(500).json({ message: 'Failed to update track title' });\n    }\n  });\n\n  // Delete track endpoint\n  app.delete('/api/admin/tracks/:id', isAdminAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Check if track exists\n      const existingTrack = await storage.getMusicGeneration(id);\n      if (!existingTrack) {\n        return res.status(404).json({ message: 'Track not found' });\n      }\n      \n      await storage.deleteMusicGeneration(id);\n      res.json({ message: 'Track deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting track:', error);\n      res.status(500).json({ message: 'Failed to delete track' });\n    }\n  });\n  \n  // Site settings management\n  app.get('/api/admin/settings', isAdminAuthenticated, async (req, res) => {\n    try {\n      const settings = await storage.getAllSiteSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error('Error fetching site settings:', error);\n      res.status(500).json({ message: 'Failed to fetch site settings' });\n    }\n  });\n  \n  app.post('/api/admin/settings', isAdminAuthenticated, async (req, res) => {\n    try {\n      const settingData = insertSiteSettingSchema.parse(req.body);\n      const newSetting = await storage.upsertSiteSetting(settingData);\n      res.status(201).json(newSetting);\n    } catch (error) {\n      console.error('Error creating site setting:', error);\n      res.status(500).json({ message: 'Failed to create site setting' });\n    }\n  });\n  \n  app.put('/api/admin/settings', isAdminAuthenticated, async (req, res) => {\n    try {\n      const { key, value } = req.body;\n      \n      // Determine category based on key prefix\n      let category = 'general';\n      if (key.startsWith('stripe_')) {\n        category = 'stripe';\n      } else if (key.startsWith('webhook_')) {\n        category = 'webhook';\n      }\n      \n      const updatedSetting = await storage.upsertSiteSetting({ \n        key, \n        value: value || '',\n        category,\n        description: `Setting for ${key.replace(/_/g, ' ')}`\n      });\n      res.json(updatedSetting);\n    } catch (error) {\n      console.error('Error updating site setting:', error);\n      res.status(500).json({ message: 'Failed to update site setting' });\n    }\n  });\n  \n  app.delete('/api/admin/settings/:key', isAdminAuthenticated, async (req, res) => {\n    try {\n      const { key } = req.params;\n      await storage.deleteSiteSetting(key);\n      res.json({ message: 'Site setting deleted' });\n    } catch (error) {\n      console.error('Error deleting site setting:', error);\n      res.status(500).json({ message: 'Failed to delete site setting' });\n    }\n  });\n\n  // Admin password change\n  app.put('/api/admin/change-password', isAdminAuthenticated, async (req, res) => {\n    try {\n      const { currentPassword, newPassword } = req.body;\n      const adminId = (req as any).adminUser?.id;\n      \n      if (!adminId) {\n        return res.status(401).json({ message: 'Admin not found' });\n      }\n\n      // Verify current password\n      const admin = await storage.getAdminUser(adminId);\n      if (!admin) {\n        return res.status(404).json({ message: 'Admin not found' });\n      }\n\n      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, admin.passwordHash);\n      if (!isCurrentPasswordValid) {\n        return res.status(400).json({ message: 'Current password is incorrect' });\n      }\n\n      // Hash new password and update\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n      await storage.updateAdminPassword(adminId, hashedPassword);\n      \n      res.json({ message: 'Password updated successfully' });\n    } catch (error) {\n      console.error('Error changing admin password:', error);\n      res.status(500).json({ message: 'Failed to change password' });\n    }\n  });\n\n  // Update user subscription plan\n  app.put('/api/admin/regular-users/:id/plan', isAdminAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { planId, status } = req.body;\n\n      // Check if user exists\n      const existingUser = await storage.getUserById(id);\n      if (!existingUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      // Validate plan if provided\n      if (planId) {\n        const plan = await storage.getSubscriptionPlan(planId);\n        if (!plan) {\n          return res.status(400).json({ message: 'Invalid subscription plan' });\n        }\n      }\n\n      // Prepare update data\n      const updates: any = {\n        subscriptionPlanId: planId || null,\n        planStatus: status || (planId ? 'active' : 'free'),\n        generationsUsedThisMonth: 0, // Reset usage when changing plans\n      };\n\n      // Set plan dates if activating a plan\n      if (planId && status === 'active') {\n        updates.planStartDate = new Date();\n        // Set end date 30 days from now\n        const endDate = new Date();\n        endDate.setDate(endDate.getDate() + 30);\n        updates.planEndDate = endDate;\n      } else if (!planId || status === 'free') {\n        updates.planStartDate = null;\n        updates.planEndDate = null;\n      }\n\n      const updatedUser = await storage.updateUser(id, updates);\n      \n      // Remove password hash from response\n      const { passwordHash, ...userResponse } = updatedUser;\n      res.json(userResponse);\n    } catch (error) {\n      console.error('Error updating user plan:', error);\n      res.status(500).json({ message: 'Failed to update user plan' });\n    }\n  });\n\n  // ===== REGULAR USER MANAGEMENT ROUTES (Admin Only) =====\n  \n  // Get all regular users\n  app.get('/api/admin/regular-users', isAdminAuthenticated, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      // Remove password hash from response for security\n      const userList = users.map(({ passwordHash, ...user }) => user);\n      res.json(userList);\n    } catch (error) {\n      console.error('Error fetching regular users:', error);\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n\n  // Get single regular user with generation count\n  app.get('/api/admin/regular-users/:id', isAdminAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.getUserWithGenerationCount(id);\n      \n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      // Remove password hash from response\n      const { passwordHash, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      res.status(500).json({ message: 'Failed to fetch user' });\n    }\n  });\n\n  // Update regular user\n  app.put('/api/admin/regular-users/:id', isAdminAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = updateUserSchema.parse(req.body);\n\n      // Check if user exists\n      const existingUser = await storage.getUserById(id);\n      if (!existingUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      // If email is being updated, check for conflicts\n      if (updates.email && updates.email !== existingUser.email) {\n        const emailConflict = await storage.getUserByEmail(updates.email);\n        if (emailConflict && emailConflict.id !== id) {\n          return res.status(400).json({ message: 'Email already in use' });\n        }\n      }\n\n      const updatedUser = await storage.updateUser(id, updates);\n      \n      // Remove password hash from response\n      const { passwordHash, ...userResponse } = updatedUser;\n      res.json(userResponse);\n    } catch (error) {\n      console.error('Error updating user:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid input data' });\n      }\n      res.status(500).json({ message: 'Failed to update user' });\n    }\n  });\n\n  // Delete regular user\n  app.delete('/api/admin/regular-users/:id', isAdminAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      // Check if user exists\n      const existingUser = await storage.getUserById(id);\n      if (!existingUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      await storage.deleteUser(id);\n      res.json({ message: 'User deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      res.status(500).json({ message: 'Failed to delete user' });\n    }\n  });\n\n  // Generate lyrics endpoint\n  app.post('/api/generate-lyrics', requireAuth, async (req, res) => {\n    try {\n      const { prompt, duration = 60 } = req.body;\n      \n      if (!prompt || typeof prompt !== 'string' || !prompt.trim()) {\n        return res.status(400).json({ message: 'Prompt is required' });\n      }\n\n      const lyrics = await generateLyrics(prompt.trim(), duration);\n      res.json({ lyrics });\n    } catch (error) {\n      console.error('Error generating lyrics:', error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : 'Failed to generate lyrics' \n      });\n    }\n  });\n\n  // Serve generated audio files from object storage\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      \n      // Stream the file with proper content type\n      await objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error serving object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":30237},"server/storage.ts":{"content":"import {\n  users,\n  musicGenerations,\n  adminUsers,\n  subscriptionPlans,\n  siteSettings,\n  usageAnalytics,\n  type User,\n  type UpsertUser,\n  type MusicGeneration,\n  type InsertTextToMusic,\n  type InsertAudioToMusic,\n  type AdminUser,\n  type InsertAdminUser,\n  type SubscriptionPlan,\n  type InsertSubscriptionPlan,\n  type SiteSetting,\n  type InsertSiteSetting,\n  type UsageAnalytic,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, count, asc } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: Omit<UpsertUser, 'id'>): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserEmail(userId: string, newEmail: string): Promise<User | undefined>;\n  updateUserPassword(userId: string, newPasswordHash: string): Promise<User | undefined>;\n  setEmailVerificationToken(userId: string, token: string, expiry: Date): Promise<void>;\n  verifyUserEmail(token: string): Promise<User | null>;\n  getUserByVerificationToken(token: string): Promise<User | undefined>;\n  setPasswordResetToken(userId: string, token: string, expiry: Date): Promise<void>;\n  getUserByPasswordResetToken(token: string): Promise<User | undefined>;\n  resetUserPassword(token: string, newPasswordHash: string): Promise<User | null>;\n  \n  // Admin user management operations\n  getAllUsers(): Promise<User[]>;\n  updateUser(userId: string, updates: Partial<User>): Promise<User>;\n  deleteUser(userId: string): Promise<void>;\n  getUserWithGenerationCount(userId: string): Promise<User & { generationCount: number } | undefined>;\n  \n  // Music generation operations\n  createTextToMusicGeneration(userId: string, data: InsertTextToMusic): Promise<MusicGeneration>;\n  createAudioToMusicGeneration(userId: string, data: InsertAudioToMusic): Promise<MusicGeneration>;\n  updateMusicGeneration(id: string, updates: Partial<MusicGeneration>): Promise<MusicGeneration>;\n  getMusicGeneration(id: string): Promise<MusicGeneration | undefined>;\n  getUserMusicGenerations(userId: string): Promise<MusicGeneration[]>;\n  getPublicMusicGenerations(): Promise<MusicGeneration[]>;\n  deleteMusicGeneration(id: string): Promise<void>;\n  \n  // Admin operations\n  getAdminUser(id: string): Promise<AdminUser | undefined>;\n  getAdminUserByUsername(username: string): Promise<AdminUser | undefined>;\n  createAdminUser(adminUser: InsertAdminUser): Promise<AdminUser>;\n  updateAdminUser(id: string, updates: Partial<AdminUser>): Promise<AdminUser>;\n  getAllAdminUsers(): Promise<AdminUser[]>;\n  updateAdminLastLogin(id: string): Promise<void>;\n  \n  // Analytics operations\n  getDashboardStats(): Promise<{\n    totalUsers: number;\n    totalGenerations: number;\n    publicTracks: number;\n    privateTracks: number;\n    newUsersToday: number;\n    generationsToday: number;\n  }>;\n  getUsageAnalytics(days: number): Promise<UsageAnalytic[]>;\n  \n  // Subscription plans operations\n  getAllSubscriptionPlans(): Promise<SubscriptionPlan[]>;\n  getSubscriptionPlan(id: string): Promise<SubscriptionPlan | undefined>;\n  createSubscriptionPlan(plan: InsertSubscriptionPlan): Promise<SubscriptionPlan>;\n  updateSubscriptionPlan(id: string, updates: Partial<SubscriptionPlan>): Promise<SubscriptionPlan>;\n  deleteSubscriptionPlan(id: string): Promise<void>;\n  \n  // Site settings operations\n  getAllSiteSettings(): Promise<SiteSetting[]>;\n  getSiteSetting(key: string): Promise<SiteSetting | undefined>;\n  upsertSiteSetting(setting: InsertSiteSetting): Promise<SiteSetting>;\n  deleteSiteSetting(key: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: Omit<UpsertUser, 'id'>): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserEmail(userId: string, newEmail: string): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({\n        email: newEmail,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async updateUserPassword(userId: string, newPasswordHash: string): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({\n        passwordHash: newPasswordHash,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async setEmailVerificationToken(userId: string, token: string, expiry: Date): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        emailVerificationToken: token,\n        emailVerificationExpiry: expiry,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async verifyUserEmail(token: string): Promise<User | null> {\n    // Find user with valid token\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(\n        and(\n          eq(users.emailVerificationToken, token),\n          sql`${users.emailVerificationExpiry} > NOW()`\n        )\n      );\n\n    if (!user) {\n      return null;\n    }\n\n    // Update user to verified and clear token\n    const [verifiedUser] = await db\n      .update(users)\n      .set({\n        emailVerified: true,\n        emailVerificationToken: null,\n        emailVerificationExpiry: null,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, user.id))\n      .returning();\n\n    return verifiedUser;\n  }\n\n  async getUserByVerificationToken(token: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(\n        and(\n          eq(users.emailVerificationToken, token),\n          sql`${users.emailVerificationExpiry} > NOW()`\n        )\n      );\n    return user;\n  }\n\n  async setPasswordResetToken(userId: string, token: string, expiry: Date): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        passwordResetToken: token,\n        passwordResetExpiry: expiry,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async getUserByPasswordResetToken(token: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(\n        and(\n          eq(users.passwordResetToken, token),\n          sql`${users.passwordResetExpiry} > NOW()`\n        )\n      );\n    return user;\n  }\n\n  async resetUserPassword(token: string, newPasswordHash: string): Promise<User | null> {\n    const user = await this.getUserByPasswordResetToken(token);\n    if (!user) {\n      return null;\n    }\n\n    const [updatedUser] = await db\n      .update(users)\n      .set({\n        passwordHash: newPasswordHash,\n        passwordResetToken: null,\n        passwordResetExpiry: null,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, user.id))\n      .returning();\n\n    return updatedUser;\n  }\n\n  // Admin user management operations\n  async getAllUsers(): Promise<User[]> {\n    const allUsers = await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.createdAt));\n    return allUsers;\n  }\n\n  async updateUser(userId: string, updates: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(userId: string): Promise<void> {\n    // First delete all user's music generations\n    await db.delete(musicGenerations).where(eq(musicGenerations.userId, userId));\n    \n    // Then delete the user\n    await db.delete(users).where(eq(users.id, userId));\n  }\n\n  async getUserWithGenerationCount(userId: string): Promise<User & { generationCount: number, subscriptionPlan?: SubscriptionPlan } | undefined> {\n    const result = await db\n      .select({\n        id: users.id,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        passwordHash: users.passwordHash,\n        profileImageUrl: users.profileImageUrl,\n        emailVerified: users.emailVerified,\n        emailVerificationToken: users.emailVerificationToken,\n        emailVerificationExpiry: users.emailVerificationExpiry,\n        subscriptionPlanId: users.subscriptionPlanId,\n        planStatus: users.planStatus,\n        generationsUsedThisMonth: users.generationsUsedThisMonth,\n        planStartDate: users.planStartDate,\n        planEndDate: users.planEndDate,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        generationCount: count(musicGenerations.id).as(\"generationCount\"),\n        planName: subscriptionPlans.name,\n        planDescription: subscriptionPlans.description,\n        maxGenerations: subscriptionPlans.maxGenerations,\n      })\n      .from(users)\n      .leftJoin(musicGenerations, eq(users.id, musicGenerations.userId))\n      .leftJoin(subscriptionPlans, eq(users.subscriptionPlanId, subscriptionPlans.id))\n      .where(eq(users.id, userId))\n      .groupBy(\n        users.id,\n        users.email,\n        users.firstName,\n        users.lastName,\n        users.passwordHash,\n        users.profileImageUrl,\n        users.emailVerified,\n        users.emailVerificationToken,\n        users.emailVerificationExpiry,\n        users.subscriptionPlanId,\n        users.planStatus,\n        users.generationsUsedThisMonth,\n        users.planStartDate,\n        users.planEndDate,\n        users.createdAt,\n        users.updatedAt,\n        subscriptionPlans.name,\n        subscriptionPlans.description,\n        subscriptionPlans.maxGenerations\n      );\n\n    const [user] = result;\n    if (!user) return undefined;\n\n    return {\n      ...user,\n      generationCount: Number(user.generationCount),\n      subscriptionPlan: user.planName ? {\n        id: user.subscriptionPlanId!,\n        name: user.planName,\n        description: user.planDescription,\n        maxGenerations: user.maxGenerations,\n      } as any : undefined\n    };\n  }\n\n  // Music generation operations\n  async createTextToMusicGeneration(userId: string, data: InsertTextToMusic): Promise<MusicGeneration> {\n    const [generation] = await db\n      .insert(musicGenerations)\n      .values({\n        ...data,\n        userId,\n        type: \"text-to-music\",\n      })\n      .returning();\n    return generation;\n  }\n\n  async createAudioToMusicGeneration(userId: string, data: InsertAudioToMusic): Promise<MusicGeneration> {\n    const [generation] = await db\n      .insert(musicGenerations)\n      .values({\n        ...data,\n        userId,\n        type: \"audio-to-music\",\n      })\n      .returning();\n    return generation;\n  }\n\n  async updateMusicGeneration(id: string, updates: Partial<MusicGeneration>): Promise<MusicGeneration> {\n    const [generation] = await db\n      .update(musicGenerations)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(musicGenerations.id, id))\n      .returning();\n    return generation;\n  }\n\n  async getMusicGeneration(id: string): Promise<MusicGeneration | undefined> {\n    const [generation] = await db\n      .select()\n      .from(musicGenerations)\n      .where(eq(musicGenerations.id, id));\n    return generation;\n  }\n\n  async getUserMusicGenerations(userId: string): Promise<MusicGeneration[]> {\n    return await db\n      .select()\n      .from(musicGenerations)\n      .where(eq(musicGenerations.userId, userId))\n      .orderBy(desc(musicGenerations.createdAt))\n      .limit(50);\n  }\n\n  async getPublicMusicGenerations(): Promise<MusicGeneration[]> {\n    return await db\n      .select()\n      .from(musicGenerations)\n      .where(and(\n        eq(musicGenerations.visibility, \"public\"),\n        eq(musicGenerations.status, \"completed\"),\n        eq(musicGenerations.showInGallery, true)\n      ))\n      .orderBy(desc(musicGenerations.createdAt))\n      .limit(20);\n  }\n\n  async deleteMusicGeneration(id: string): Promise<void> {\n    await db.delete(musicGenerations).where(eq(musicGenerations.id, id));\n  }\n\n  // Admin operations\n  async getAdminUser(id: string): Promise<AdminUser | undefined> {\n    const [adminUser] = await db.select().from(adminUsers).where(eq(adminUsers.id, id));\n    return adminUser;\n  }\n\n  async getAdminUserByUsername(username: string): Promise<AdminUser | undefined> {\n    const [adminUser] = await db.select().from(adminUsers).where(eq(adminUsers.username, username));\n    return adminUser;\n  }\n\n  async createAdminUser(adminUserData: InsertAdminUser): Promise<AdminUser> {\n    const [adminUser] = await db.insert(adminUsers).values(adminUserData).returning();\n    return adminUser;\n  }\n\n  async updateAdminUser(id: string, updates: Partial<AdminUser>): Promise<AdminUser> {\n    const [adminUser] = await db\n      .update(adminUsers)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(adminUsers.id, id))\n      .returning();\n    return adminUser;\n  }\n\n  async getAllAdminUsers(): Promise<AdminUser[]> {\n    return await db.select().from(adminUsers).orderBy(adminUsers.createdAt);\n  }\n\n  async updateAdminLastLogin(id: string): Promise<void> {\n    await db\n      .update(adminUsers)\n      .set({ lastLoginAt: new Date() })\n      .where(eq(adminUsers.id, id));\n  }\n\n  // Admin music tracks operations\n  async getAllMusicGenerations(): Promise<MusicGeneration[]> {\n    return await db\n      .select()\n      .from(musicGenerations)\n      .orderBy(desc(musicGenerations.createdAt));\n  }\n\n  async updateMusicGenerationGalleryVisibility(id: string, showInGallery: boolean): Promise<MusicGeneration> {\n    const [generation] = await db\n      .update(musicGenerations)\n      .set({ showInGallery, updatedAt: new Date() })\n      .where(eq(musicGenerations.id, id))\n      .returning();\n    return generation;\n  }\n\n  async updateMusicGenerationTitle(id: string, title: string): Promise<MusicGeneration> {\n    const [generation] = await db\n      .update(musicGenerations)\n      .set({ title, updatedAt: new Date() })\n      .where(eq(musicGenerations.id, id))\n      .returning();\n    return generation;\n  }\n\n\n\n  // Analytics operations\n  async getDashboardStats(): Promise<{\n    totalUsers: number;\n    totalGenerations: number;\n    publicTracks: number;\n    privateTracks: number;\n    newUsersToday: number;\n    generationsToday: number;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const [totalUsersResult] = await db.select({ count: count() }).from(users);\n    const [totalGenerationsResult] = await db.select({ count: count() }).from(musicGenerations);\n    const [publicTracksResult] = await db\n      .select({ count: count() })\n      .from(musicGenerations)\n      .where(eq(musicGenerations.visibility, \"public\"));\n    const [privateTracksResult] = await db\n      .select({ count: count() })\n      .from(musicGenerations)\n      .where(eq(musicGenerations.visibility, \"private\"));\n    const [newUsersTodayResult] = await db\n      .select({ count: count() })\n      .from(users)\n      .where(sql`${users.createdAt} >= ${today}`);\n    const [generationsTodayResult] = await db\n      .select({ count: count() })\n      .from(musicGenerations)\n      .where(sql`${musicGenerations.createdAt} >= ${today}`);\n\n    return {\n      totalUsers: totalUsersResult?.count || 0,\n      totalGenerations: totalGenerationsResult?.count || 0,\n      publicTracks: publicTracksResult?.count || 0,\n      privateTracks: privateTracksResult?.count || 0,\n      newUsersToday: newUsersTodayResult?.count || 0,\n      generationsToday: generationsTodayResult?.count || 0,\n    };\n  }\n\n  async getUsageAnalytics(days: number): Promise<UsageAnalytic[]> {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n    \n    return await db\n      .select()\n      .from(usageAnalytics)\n      .where(sql`${usageAnalytics.date} >= ${startDate}`)\n      .orderBy(usageAnalytics.date);\n  }\n\n  // Subscription plans operations\n  async getAllSubscriptionPlans(): Promise<SubscriptionPlan[]> {\n    return await db.select().from(subscriptionPlans).orderBy(subscriptionPlans.sortOrder);\n  }\n\n  async getSubscriptionPlan(id: string): Promise<SubscriptionPlan | undefined> {\n    const [plan] = await db.select().from(subscriptionPlans).where(eq(subscriptionPlans.id, id));\n    return plan;\n  }\n\n  async createSubscriptionPlan(planData: InsertSubscriptionPlan): Promise<SubscriptionPlan> {\n    const [plan] = await db.insert(subscriptionPlans).values(planData).returning();\n    return plan;\n  }\n\n  async updateSubscriptionPlan(id: string, updates: Partial<SubscriptionPlan>): Promise<SubscriptionPlan> {\n    const [plan] = await db\n      .update(subscriptionPlans)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(subscriptionPlans.id, id))\n      .returning();\n    return plan;\n  }\n\n  async deleteSubscriptionPlan(id: string): Promise<void> {\n    await db.delete(subscriptionPlans).where(eq(subscriptionPlans.id, id));\n  }\n\n  // Site settings operations\n  async getAllSiteSettings(): Promise<SiteSetting[]> {\n    return await db.select().from(siteSettings).orderBy(siteSettings.category, siteSettings.key);\n  }\n\n  async getSiteSetting(key: string): Promise<SiteSetting | undefined> {\n    const [setting] = await db.select().from(siteSettings).where(eq(siteSettings.key, key));\n    return setting;\n  }\n\n  async upsertSiteSetting(settingData: InsertSiteSetting): Promise<SiteSetting> {\n    const [setting] = await db\n      .insert(siteSettings)\n      .values(settingData)\n      .onConflictDoUpdate({\n        target: siteSettings.key,\n        set: {\n          ...settingData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return setting;\n  }\n\n  async deleteSiteSetting(key: string): Promise<void> {\n    await db.delete(siteSettings).where(eq(siteSettings.key, key));\n  }\n\n  // Admin password operations\n  async updateAdminPassword(adminId: string, hashedPassword: string): Promise<void> {\n    await db\n      .update(adminUsers)\n      .set({ \n        passwordHash: hashedPassword,\n        updatedAt: new Date()\n      })\n      .where(eq(adminUsers.id, adminId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":18987},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  passwordHash: varchar(\"password_hash\").notNull(),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  emailVerified: boolean(\"email_verified\").notNull().default(false),\n  emailVerificationToken: varchar(\"email_verification_token\"),\n  emailVerificationExpiry: timestamp(\"email_verification_expiry\"),\n  passwordResetToken: varchar(\"password_reset_token\"),\n  passwordResetExpiry: timestamp(\"password_reset_expiry\"),\n  subscriptionPlanId: varchar(\"subscription_plan_id\").references(() => subscriptionPlans.id),\n  planStatus: varchar(\"plan_status\").notNull().default(\"free\"), // free, active, expired, cancelled\n  generationsUsedThisMonth: integer(\"generations_used_this_month\").notNull().default(0),\n  planStartDate: timestamp(\"plan_start_date\"),\n  planEndDate: timestamp(\"plan_end_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Music generation records\nexport const musicGenerations = pgTable(\"music_generations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: varchar(\"type\").notNull().default(\"text-to-music\"), // text-to-music, audio-to-music\n  tags: text(\"tags\").notNull(),\n  lyrics: text(\"lyrics\"),\n  duration: integer(\"duration\"), // Only for text-to-music\n  inputAudioUrl: varchar(\"input_audio_url\"), // Only for audio-to-music\n  audioUrl: varchar(\"audio_url\"),\n  seed: integer(\"seed\"),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, generating, completed, failed\n  visibility: varchar(\"visibility\").notNull().default(\"public\"), // public, private\n  showInGallery: boolean(\"show_in_gallery\").notNull().default(true), // Admin can hide from gallery\n  title: varchar(\"title\"), // Optional custom title for the track\n  falRequestId: varchar(\"fal_request_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\nexport type UpsertUser = typeof users.$inferInsert;\n\nexport const insertTextToMusicSchema = createInsertSchema(musicGenerations).pick({\n  tags: true,\n  lyrics: true,\n  duration: true,\n  visibility: true,\n  title: true,\n}).extend({\n  type: z.literal(\"text-to-music\").default(\"text-to-music\"),\n  visibility: z.enum([\"public\", \"private\"]).default(\"public\"),\n});\n\nexport const insertAudioToMusicSchema = createInsertSchema(musicGenerations).pick({\n  tags: true,\n  lyrics: true,\n  inputAudioUrl: true,\n  visibility: true,\n  title: true,\n}).extend({\n  type: z.literal(\"audio-to-music\").default(\"audio-to-music\"),\n  inputAudioUrl: z.string().min(1, \"Audio file URL is required\"),\n  visibility: z.enum([\"public\", \"private\"]).default(\"public\"),\n});\n\nexport const updateMusicGenerationVisibilitySchema = z.object({\n  visibility: z.enum([\"public\", \"private\"]),\n  title: z.string().optional(),\n});\n\nexport type InsertTextToMusic = z.infer<typeof insertTextToMusicSchema>;\nexport type InsertAudioToMusic = z.infer<typeof insertAudioToMusicSchema>;\nexport type MusicGeneration = typeof musicGenerations.$inferSelect;\n\n// Admin users table\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  passwordHash: varchar(\"password_hash\").notNull(),\n  email: varchar(\"email\").unique(),\n  role: varchar(\"role\").notNull().default(\"admin\"), // admin, super_admin\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Subscription plans table\nexport const subscriptionPlans = pgTable(\"subscription_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  monthlyPrice: decimal(\"monthly_price\", { precision: 10, scale: 2 }),\n  yearlyPrice: decimal(\"yearly_price\", { precision: 10, scale: 2 }),\n  monthlyPriceId: varchar(\"monthly_price_id\"), // Stripe price ID for monthly billing\n  yearlyPriceId: varchar(\"yearly_price_id\"), // Stripe price ID for yearly billing\n  maxGenerations: integer(\"max_generations\").notNull().default(5), // monthly generation limit\n  generationsNumber: integer(\"generations_number\").notNull().default(5), // number of generations allowed\n  features: jsonb(\"features\").default(sql`'[]'::jsonb`), // array of feature strings\n  isActive: boolean(\"is_active\").notNull().default(true),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Site settings table\nexport const siteSettings = pgTable(\"site_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: varchar(\"key\").unique().notNull(),\n  value: text(\"value\"),\n  description: text(\"description\"),\n  type: varchar(\"type\").notNull().default(\"text\"), // text, number, boolean, json\n  category: varchar(\"category\").notNull().default(\"general\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Usage analytics table\nexport const usageAnalytics = pgTable(\"usage_analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  date: timestamp(\"date\").notNull(),\n  totalUsers: integer(\"total_users\").default(0),\n  newUsers: integer(\"new_users\").default(0),\n  totalGenerations: integer(\"total_generations\").default(0),\n  textToMusicGenerations: integer(\"text_to_music_generations\").default(0),\n  audioToMusicGenerations: integer(\"audio_to_music_generations\").default(0),\n  publicTracks: integer(\"public_tracks\").default(0),\n  privateTracks: integer(\"private_tracks\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertAdminUser = typeof adminUsers.$inferInsert;\nexport type SubscriptionPlan = typeof subscriptionPlans.$inferSelect;\nexport type InsertSubscriptionPlan = typeof subscriptionPlans.$inferInsert;\nexport type SiteSetting = typeof siteSettings.$inferSelect;\nexport type InsertSiteSetting = typeof siteSettings.$inferInsert;\nexport type UsageAnalytic = typeof usageAnalytics.$inferSelect;\n\n// Admin login schema\nexport const adminLoginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\n// Admin user schemas\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastLoginAt: true,\n}).extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const updateAdminUserSchema = insertAdminUserSchema.partial().omit({\n  username: true,\n  password: true,\n}).extend({\n  newPassword: z.string().min(6, \"Password must be at least 6 characters\").optional(),\n});\n\n// Subscription plan schemas\nexport const insertSubscriptionPlanSchema = createInsertSchema(subscriptionPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  features: z.array(z.string()).default([]),\n  monthlyPrice: z.string().optional(),\n  yearlyPrice: z.string().optional(),\n});\n\nexport const updateSubscriptionPlanSchema = insertSubscriptionPlanSchema.partial();\n\n// Site settings schema\nexport const insertSiteSettingSchema = createInsertSchema(siteSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const updateSiteSettingSchema = insertSiteSettingSchema.partial().omit({\n  key: true,\n});\n\n// Admin user management schemas\nexport const updateUserSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\").optional(),\n  lastName: z.string().min(1, \"Last name is required\").optional(),\n  email: z.string().email(\"Invalid email address\").optional(),\n  emailVerified: z.boolean().optional(),\n  subscriptionPlanId: z.string().optional(),\n  planStatus: z.enum([\"free\", \"active\", \"expired\", \"cancelled\"]).optional(),\n  planStartDate: z.string().optional(), // ISO string date\n  planEndDate: z.string().optional(), // ISO string date\n});\n\nexport type AdminLogin = z.infer<typeof adminLoginSchema>;\nexport type InsertAdminUserForm = z.infer<typeof insertAdminUserSchema>;\nexport type UpdateAdminUserForm = z.infer<typeof updateAdminUserSchema>;\nexport type InsertSubscriptionPlanForm = z.infer<typeof insertSubscriptionPlanSchema>;\nexport type UpdateSubscriptionPlanForm = z.infer<typeof updateSubscriptionPlanSchema>;\nexport type InsertSiteSettingForm = z.infer<typeof insertSiteSettingSchema>;\nexport type UpdateSiteSettingForm = z.infer<typeof updateSiteSettingSchema>;\nexport type UpdateUser = z.infer<typeof updateUserSchema>;\n","size_bytes":9594},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport MyLibrary from \"@/pages/my-library\";\nimport Profile from \"@/pages/profile\";\nimport Pricing from \"@/pages/pricing\";\nimport Privacy from \"@/pages/privacy\";\nimport Terms from \"@/pages/terms\";\nimport Contact from \"@/pages/contact\";\nimport Auth from \"@/pages/auth\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport TrackPage from \"@/pages/track\";\nimport CheckEmailPage from \"@/pages/check-email\";\nimport VerifyEmailPage from \"@/pages/verify-email\";\nimport ResetPasswordPage from \"@/pages/reset-password\";\n// Use direct path to video in public folder\nconst backgroundVideo = \"/background-video.mp4\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {/* Admin routes */}\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin/:page*\" component={AdminDashboard} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      \n      {/* Email verification and password reset routes */}\n      <Route path=\"/check-email\" component={CheckEmailPage} />\n      <Route path=\"/verify-email/:token\" component={VerifyEmailPage} />\n      <Route path=\"/reset-password/:token\" component={ResetPasswordPage} />\n      \n      {/* Public routes */}\n      <Route path=\"/pricing\" component={Pricing} />\n      <Route path=\"/privacy\" component={Privacy} />\n      <Route path=\"/terms\" component={Terms} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/auth\" component={Auth} />\n      <Route path=\"/track/:id\" component={TrackPage} />\n      \n      {/* Main app routes */}\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/library\" component={MyLibrary} />\n          <Route path=\"/profile\" component={Profile} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        {/* Background Video */}\n        <div className=\"fixed inset-0\" style={{ zIndex: -10 }}>\n          <video\n            className=\"w-full h-full object-cover\"\n            autoPlay\n            loop\n            muted\n            playsInline\n            preload=\"auto\"\n            onError={(e) => console.error('Video error:', e)}\n            onLoadStart={() => console.log('Video loading started')}\n            onCanPlay={() => console.log('Video can play')}\n            onPlay={() => console.log('Video started playing')}\n          >\n            <source src={backgroundVideo} type=\"video/mp4\" />\n            Your browser does not support the video tag.\n          </video>\n        </div>\n        \n        {/* Content overlay with semi-transparent background for readability */}\n        <div className=\"relative min-h-screen bg-black/40\" style={{ zIndex: 1 }}>\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3488},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Ensure body and html allow video background */\nhtml, body {\n  position: relative;\n  background: transparent !important;\n}\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: \"Inter\", \"Open Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Music Theme Colors */\n  --music-dark: hsl(0 0% 3.9216%);\n  --music-secondary: hsl(0 0% 10.1961%);\n  --music-purple: hsl(262.1053 83.3333% 57.8431%);\n  --music-blue: hsl(214.7826 100% 59.0196%);\n  --music-green: hsl(158.7037 64.4068% 52.1569%);\n  --music-accent: hsl(258.3784 90.5405% 66.2745%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: \"Inter\", \"Open Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  /* Improve placeholder visibility on dark backgrounds */\n  input::placeholder,\n  textarea::placeholder {\n    color: hsl(0 0% 60%) !important;\n    opacity: 1 !important;\n  }\n\n  /* Specific styling for dark theme inputs */\n  .bg-music-dark::placeholder,\n  .bg-music-secondary::placeholder {\n    color: hsl(0 0% 65%) !important;\n    opacity: 1 !important;\n  }\n\n  /* Ensure placeholders are visible in all shadcn input variants */\n  .placeholder-gray-300::placeholder {\n    color: hsl(0 0% 65%) !important;\n    opacity: 1 !important;\n  }\n\n  .placeholder-gray-400::placeholder {\n    color: hsl(0 0% 60%) !important;\n    opacity: 1 !important;\n  }\n}\n\n@layer utilities {\n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  .animate-bounce-gentle {\n    animation: bounce 2s infinite;\n  }\n  \n  .bg-music-dark {\n    background-color: var(--music-dark);\n  }\n  \n  .bg-music-secondary {\n    background-color: var(--music-secondary);\n  }\n  \n  .text-music-purple {\n    color: var(--music-purple);\n  }\n  \n  .text-music-blue {\n    color: var(--music-blue);\n  }\n  \n  .text-music-green {\n    color: var(--music-green);\n  }\n  \n  .text-music-accent {\n    color: var(--music-accent);\n  }\n  \n  .border-music-purple {\n    border-color: var(--music-purple);\n  }\n  \n  .border-music-blue {\n    border-color: var(--music-blue);\n  }\n  \n  .border-music-green {\n    border-color: var(--music-green);\n  }\n  \n  .border-music-accent {\n    border-color: var(--music-accent);\n  }\n  \n  .from-music-purple {\n    --tw-gradient-from: var(--music-purple);\n  }\n  \n  .to-music-blue {\n    --tw-gradient-to: var(--music-blue);\n  }\n  \n  .to-music-green {\n    --tw-gradient-to: var(--music-green);\n  }\n  \n  .via-music-blue {\n    --tw-gradient-via: var(--music-blue);\n  }\n  \n  .from-music-green {\n    --tw-gradient-from: var(--music-green);\n  }\n  \n  .from-music-accent {\n    --tw-gradient-from: var(--music-accent);\n  }\n  \n  .to-music-accent {\n    --tw-gradient-to: var(--music-accent);\n  }\n  \n  .via-music-accent {\n    --tw-gradient-via: var(--music-accent);\n  }\n}\n","size_bytes":7711},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n  acceptedFileTypes?: string[];\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 50485760, // 50MB default for audio files\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n  acceptedFileTypes = ['.mp3', '.wav', '.m4a', '.aac', '.ogg'],\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n        allowedFileTypes: acceptedFileTypes,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}","size_bytes":2322},"client/src/components/loading-spinner.tsx":{"content":"import { Music } from \"lucide-react\";\n\ninterface LoadingSpinnerProps {\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n}\n\nexport function LoadingSpinner({ size = \"md\", className = \"\" }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: \"w-4 h-4\",\n    md: \"w-8 h-8\",\n    lg: \"w-12 h-12\"\n  };\n\n  return (\n    <div className={`flex items-center justify-center ${className}`}>\n      <div className={`${sizeClasses[size]} animate-spin rounded-full border-2 border-gray-600 border-t-music-purple`} data-testid=\"loading-spinner\">\n        <div className=\"sr-only\">Loading...</div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":612},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAdminAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { AdminUser, AdminLogin } from \"@shared/schema\";\n\nexport function useAdminAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: adminUser, isLoading } = useQuery({\n    queryKey: [\"/api/admin/user\"],\n    retry: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: AdminLogin) => {\n      const response = await fetch(\"/api/admin/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(credentials),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Login failed\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/user\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/admin/logout\", { method: \"POST\" });\n      if (!response.ok) {\n        throw new Error(\"Logout failed\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.clear();\n    },\n  });\n\n  return {\n    adminUser: adminUser as AdminUser | undefined,\n    isLoading,\n    isAuthenticated: !!adminUser,\n    login: loginMutation,\n    logout: logoutMutation,\n  };\n}","size_bytes":1434},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnWindowFocus: false,\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/auth/user\");\n        if (!response.ok) {\n          if (response.status === 401) {\n            return null; // User not authenticated\n          }\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        return await response.json();\n      } catch (error) {\n        console.error(\"Auth check failed:\", error);\n        return null;\n      }\n    }\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    error,\n  };\n}\n","size_bytes":815},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useAdminAuth } from \"@/hooks/useAdminAuth\";\nimport { AdminSidebar } from \"@/components/admin/AdminSidebar\";\nimport { AdminDashboardContent } from \"@/components/admin/AdminDashboardContent\";\nimport AdminUserManagement from \"@/components/admin/AdminUserManagement\";\nimport { AdminPlanManagement } from \"@/components/admin/AdminPlanManagement\";\nimport { AdminSiteSettings } from \"@/components/admin/AdminSiteSettings\";\nimport { AdminMusicTracks } from \"@/components/admin/AdminMusicTracks\";\n\nexport default function AdminDashboard() {\n  const { isAuthenticated, isLoading } = useAdminAuth();\n  const [, navigate] = useLocation();\n  const currentPath = window.location.pathname;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center\">\n        <div className=\"text-white\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    navigate(\"/admin/login\");\n    return null;\n  }\n\n  const renderContent = () => {\n    if (currentPath === \"/admin/users\") {\n      return <AdminUserManagement />;\n    }\n    if (currentPath === \"/admin/tracks\") {\n      return <AdminMusicTracks />;\n    }\n    if (currentPath === \"/admin/plans\") {\n      return <AdminPlanManagement />;\n    }\n    if (currentPath === \"/admin/settings\") {\n      return <AdminSiteSettings />;\n    }\n    return <AdminDashboardContent />;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black flex\">\n      <AdminSidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n}","size_bytes":1609},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { adminLoginSchema, type AdminLogin } from \"@shared/schema\";\nimport { useAdminAuth } from \"@/hooks/useAdminAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Shield, Eye, EyeOff } from \"lucide-react\";\nimport backgroundVideo from \"/background-video.mp4\";\n\nexport default function AdminLogin() {\n  const [, navigate] = useLocation();\n  const { isAuthenticated, login } = useAdminAuth();\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<AdminLogin>({\n    resolver: zodResolver(adminLoginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  if (isAuthenticated) {\n    navigate(\"/admin\");\n    return null;\n  }\n\n  const onSubmit = async (data: AdminLogin) => {\n    try {\n      await login.mutateAsync(data);\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to the admin dashboard\",\n      });\n      navigate(\"/admin\");\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden flex items-center justify-center p-4\">\n      {/* Background Video */}\n      <video\n        autoPlay\n        muted\n        loop\n        playsInline\n        className=\"absolute inset-0 w-full h-full object-cover z-0\"\n        onLoadStart={() => console.log(\"Video loading started\")}\n        onCanPlay={() => console.log(\"Video can play\")}\n        onPlay={() => console.log(\"Video started playing\")}\n      >\n        <source src={backgroundVideo} type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n\n      {/* Content overlay */}\n      <div className=\"relative z-10 bg-black/40 min-h-screen flex items-center justify-center p-4 w-full\">\n      <Card className=\"w-full max-w-md bg-gray-900 border-gray-800\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"p-3 bg-purple-500/10 rounded-full\">\n              <Shield className=\"h-8 w-8 text-purple-400\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-white\">\n            Admin Login\n          </CardTitle>\n          <CardDescription className=\"text-gray-400\">\n            Sign in to access the admin dashboard\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" className=\"text-gray-300\">\n                Username\n              </Label>\n              <Input\n                id=\"username\"\n                data-testid=\"input-username\"\n                placeholder=\"Enter your username\"\n                className=\"bg-gray-800 border-gray-700 text-gray-300 placeholder-gray-500\"\n                {...form.register(\"username\")}\n              />\n              {form.formState.errors.username && (\n                <p className=\"text-sm text-red-400\">\n                  {form.formState.errors.username.message}\n                </p>\n              )}\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-gray-300\">\n                Password\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  data-testid=\"input-password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your password\"\n                  className=\"bg-gray-800 border-gray-700 text-gray-300 placeholder-gray-500 pr-10\"\n                  {...form.register(\"password\")}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"button-toggle-password\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </Button>\n              </div>\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-red-400\">\n                  {form.formState.errors.password.message}\n                </p>\n              )}\n            </div>\n            <Button\n              type=\"submit\"\n              data-testid=\"button-login\"\n              className=\"w-full bg-purple-600 hover:bg-purple-700 text-white\"\n              disabled={login.isPending}\n            >\n              {login.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5475},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Header } from \"@/components/Header\";\nimport { Music, Eye, EyeOff, Mail, Lock, User } from \"lucide-react\";\nimport backgroundVideo from \"/background-video.mp4\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { z } from \"zod\";\nimport { useEffect } from \"react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nconst forgotPasswordSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\ntype ForgotPasswordForm = z.infer<typeof forgotPasswordSchema>;\n\nexport default function Auth() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (!isLoading && isAuthenticated) {\n      setLocation(\"/\");\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const forgotPasswordForm = useForm<ForgotPasswordForm>({\n    resolver: zodResolver(forgotPasswordSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest(\"/api/auth/login\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/auth/user\"], user);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have successfully logged in.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      // Handle email verification required case\n      if (error.message && error.message.includes(\"verify your email\")) {\n        toast({\n          title: \"Email Verification Required\",\n          description: \"Please check your email and click the verification link before logging in.\",\n          variant: \"destructive\",\n        });\n        // Redirect to check-email page so user can resend if needed\n        setLocation(\"/check-email\");\n      } else {\n        toast({\n          title: \"Login failed\",\n          description: error.message || \"Invalid email or password\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterForm) => {\n      const response = await apiRequest(\"/api/auth/register\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: (result) => {\n      // Registration successful - redirect to check email page\n      // Save user info temporarily for the check-email page\n      localStorage.setItem(\"pendingVerificationEmail\", result.email || \"\");\n      localStorage.setItem(\"pendingVerificationFirstName\", result.firstName || \"\");\n      \n      toast({\n        title: \"Registration Successful!\",\n        description: \"Please check your email to verify your account.\",\n      });\n      \n      setLocation(\"/check-email\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const forgotPasswordMutation = useMutation({\n    mutationFn: async (data: ForgotPasswordForm) => {\n      const response = await apiRequest(\"/api/auth/request-password-reset\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Reset Email Sent\",\n        description: result.message || \"If an account with that email exists, we've sent password reset instructions.\",\n      });\n      setShowForgotPassword(false);\n      forgotPasswordForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Reset Failed\",\n        description: error.message || \"Failed to send reset email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onLogin = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  const onForgotPassword = (data: ForgotPasswordForm) => {\n    forgotPasswordMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-indigo-900 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-white\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden\">\n      {/* Background Video */}\n      <video\n        autoPlay\n        muted\n        loop\n        playsInline\n        className=\"absolute inset-0 w-full h-full object-cover z-0\"\n        onLoadStart={() => console.log(\"Video loading started\")}\n        onCanPlay={() => console.log(\"Video can play\")}\n        onPlay={() => console.log(\"Video started playing\")}\n      >\n        <source src={backgroundVideo} type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n\n      {/* Content overlay */}\n      <div className=\"relative z-10 bg-black/40 min-h-screen\">\n        <Header currentPage=\"auth\" />\n        <div className=\"container mx-auto px-4 py-8 pt-16\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center min-h-screen\">\n          {/* Hero Section */}\n          <div className=\"text-center lg:text-left\">\n            <div className=\"flex items-center justify-center lg:justify-start space-x-3 mb-8\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-blue-500 rounded-xl flex items-center justify-center\">\n                <Music className=\"text-white text-xl\" />\n              </div>\n              <h1 className=\"text-3xl font-bold text-white\">NuMusic</h1>\n            </div>\n            \n            <h2 className=\"text-4xl md:text-5xl font-bold text-white mb-6\">\n              Create Amazing Music with <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400\">Artificial Intelligence</span>\n            </h2>\n            \n            <p className=\"text-xl text-gray-300 mb-8\">\n              Join thousands of creators who are already using AI to compose, generate, and transform music. \n              Turn your ideas into professional tracks in seconds.\n            </p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-12\">\n              <div className=\"bg-gray-800/50 backdrop-blur-sm rounded-lg p-6 border border-gray-700\">\n                <h4 className=\"font-semibold text-white mb-2\">Text to Music</h4>\n                <p className=\"text-gray-400 text-sm\">Generate complete songs from simple text descriptions</p>\n              </div>\n              <div className=\"bg-gray-800/50 backdrop-blur-sm rounded-lg p-6 border border-gray-700\">\n                <h4 className=\"font-semibold text-white mb-2\">Audio Enhancement</h4>\n                <p className=\"text-gray-400 text-sm\">Transform and remix existing audio with AI</p>\n              </div>\n              <div className=\"bg-gray-800/50 backdrop-blur-sm rounded-lg p-6 border border-gray-700\">\n                <h4 className=\"font-semibold text-white mb-2\">Professional Quality</h4>\n                <p className=\"text-gray-400 text-sm\">Export high-quality tracks ready for streaming</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Auth Form */}\n          <div className=\"flex justify-center lg:justify-end\">\n            <Card className=\"w-full max-w-md bg-gray-800/50 border-gray-700 backdrop-blur-sm\">\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl font-bold text-white\">Get Started</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Create your account or sign in to continue\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Tabs defaultValue=\"login\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-2 bg-gray-700\">\n                    <TabsTrigger value=\"login\" className=\"data-[state=active]:bg-purple-600\">Sign In</TabsTrigger>\n                    <TabsTrigger value=\"register\" className=\"data-[state=active]:bg-purple-600\">Sign Up</TabsTrigger>\n                  </TabsList>\n                  \n                  <TabsContent value=\"login\" className=\"space-y-4 mt-6\">\n                    <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"login-email\" className=\"text-gray-300\">Email</Label>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                          <Input\n                            id=\"login-email\"\n                            type=\"email\"\n                            placeholder=\"Enter your email\"\n                            className=\"pl-10 bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n                            data-testid=\"input-login-email\"\n                            {...loginForm.register(\"email\")}\n                          />\n                        </div>\n                        {loginForm.formState.errors.email && (\n                          <p className=\"text-red-400 text-sm\">{loginForm.formState.errors.email.message}</p>\n                        )}\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"login-password\" className=\"text-gray-300\">Password</Label>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                          <Input\n                            id=\"login-password\"\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your password\"\n                            className=\"pl-10 pr-10 bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n                            data-testid=\"input-login-password\"\n                            {...loginForm.register(\"password\")}\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                          >\n                            {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </button>\n                        </div>\n                        {loginForm.formState.errors.password && (\n                          <p className=\"text-red-400 text-sm\">{loginForm.formState.errors.password.message}</p>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between mt-4\">\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowForgotPassword(true)}\n                          className=\"text-sm text-purple-400 hover:text-purple-300 underline\"\n                          data-testid=\"link-forgot-password\"\n                        >\n                          Forgot Password?\n                        </button>\n                      </div>\n\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white\"\n                        disabled={loginMutation.isPending}\n                        data-testid=\"button-login\"\n                      >\n                        {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                      </Button>\n                    </form>\n                  </TabsContent>\n                  \n                  <TabsContent value=\"register\" className=\"space-y-4 mt-6\">\n                    <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"register-firstname\" className=\"text-gray-300\">First Name</Label>\n                          <div className=\"relative\">\n                            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                            <Input\n                              id=\"register-firstname\"\n                              type=\"text\"\n                              placeholder=\"First name\"\n                              className=\"pl-10 bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n                              data-testid=\"input-register-firstname\"\n                              {...registerForm.register(\"firstName\")}\n                            />\n                          </div>\n                          {registerForm.formState.errors.firstName && (\n                            <p className=\"text-red-400 text-sm\">{registerForm.formState.errors.firstName.message}</p>\n                          )}\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"register-lastname\" className=\"text-gray-300\">Last Name</Label>\n                          <Input\n                            id=\"register-lastname\"\n                            type=\"text\"\n                            placeholder=\"Last name\"\n                            className=\"bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n                            data-testid=\"input-register-lastname\"\n                            {...registerForm.register(\"lastName\")}\n                          />\n                          {registerForm.formState.errors.lastName && (\n                            <p className=\"text-red-400 text-sm\">{registerForm.formState.errors.lastName.message}</p>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-email\" className=\"text-gray-300\">Email</Label>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                          <Input\n                            id=\"register-email\"\n                            type=\"email\"\n                            placeholder=\"Enter your email\"\n                            className=\"pl-10 bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n                            data-testid=\"input-register-email\"\n                            {...registerForm.register(\"email\")}\n                          />\n                        </div>\n                        {registerForm.formState.errors.email && (\n                          <p className=\"text-red-400 text-sm\">{registerForm.formState.errors.email.message}</p>\n                        )}\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-password\" className=\"text-gray-300\">Password</Label>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                          <Input\n                            id=\"register-password\"\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Create a password\"\n                            className=\"pl-10 pr-10 bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n                            data-testid=\"input-register-password\"\n                            {...registerForm.register(\"password\")}\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                          >\n                            {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </button>\n                        </div>\n                        {registerForm.formState.errors.password && (\n                          <p className=\"text-red-400 text-sm\">{registerForm.formState.errors.password.message}</p>\n                        )}\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-confirm-password\" className=\"text-gray-300\">Confirm Password</Label>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                          <Input\n                            id=\"register-confirm-password\"\n                            type={showConfirmPassword ? \"text\" : \"password\"}\n                            placeholder=\"Confirm your password\"\n                            className=\"pl-10 pr-10 bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n                            data-testid=\"input-register-confirm-password\"\n                            {...registerForm.register(\"confirmPassword\")}\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                          >\n                            {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </button>\n                        </div>\n                        {registerForm.formState.errors.confirmPassword && (\n                          <p className=\"text-red-400 text-sm\">{registerForm.formState.errors.confirmPassword.message}</p>\n                        )}\n                      </div>\n                      \n                      <Button\n                        type=\"submit\"\n                        className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white\"\n                        disabled={registerMutation.isPending}\n                        data-testid=\"button-register\"\n                      >\n                        {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n                      </Button>\n                    </form>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n      </div>\n\n      {/* Forgot Password Modal */}\n      <Dialog open={showForgotPassword} onOpenChange={setShowForgotPassword}>\n        <DialogContent className=\"sm:max-w-md bg-gray-800 border-gray-700\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Reset Your Password</DialogTitle>\n            <DialogDescription className=\"text-gray-400\">\n              Enter your email address and we'll send you a link to reset your password.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={forgotPasswordForm.handleSubmit(onForgotPassword)} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"forgot-email\" className=\"text-gray-300\">Email</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"forgot-email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  className=\"pl-10 bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n                  data-testid=\"input-forgot-email\"\n                  {...forgotPasswordForm.register(\"email\")}\n                />\n              </div>\n              {forgotPasswordForm.formState.errors.email && (\n                <p className=\"text-red-400 text-sm\">{forgotPasswordForm.formState.errors.email.message}</p>\n              )}\n            </div>\n            \n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowForgotPassword(false)}\n                className=\"flex-1 border-gray-600 text-gray-300 hover:bg-gray-700\"\n                data-testid=\"button-cancel-forgot\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={forgotPasswordMutation.isPending}\n                className=\"flex-1 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white\"\n                data-testid=\"button-submit-forgot\"\n              >\n                {forgotPasswordMutation.isPending ? \"Sending...\" : \"Send Reset Link\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":23537},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Header } from \"@/components/Header\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Mail, MessageSquare, Send, MapPin, Phone, Clock, Music, User, LogOut } from \"lucide-react\";\n\nexport default function ContactPage() {\n  const { user } = useAuth();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\"\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      // Simulate form submission\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast({\n        title: \"Message sent successfully!\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n\n      // Reset form\n      setFormData({\n        name: \"\",\n        email: \"\",\n        subject: \"\",\n        message: \"\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to send message\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen text-white\">\n      {/* Header Navigation */}\n      <Header currentPage=\"contact\" />\n\n      {/* Header Section */}\n      <div className=\"bg-gradient-to-br from-music-dark via-gray-900 to-music-secondary py-16\">\n        <div className=\"max-w-4xl mx-auto px-4 text-center\">\n          <h1 className=\"text-4xl md:text-5xl font-bold bg-gradient-to-r from-music-accent via-music-purple to-music-blue bg-clip-text text-transparent mb-4\">\n            Get In Touch\n          </h1>\n          <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n            Have questions, feedback, or need support? We'd love to hear from you.\n          </p>\n        </div>\n      </div>\n\n      <div className=\"max-w-6xl mx-auto px-4 py-16\">\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <div>\n            <Card className=\"bg-music-secondary border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-2xl\">\n                  <MessageSquare className=\"mr-3 h-6 w-6 text-music-accent\" />\n                  Send us a message\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                        Name *\n                      </label>\n                      <Input\n                        value={formData.name}\n                        onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                        placeholder=\"Your full name\"\n                        className=\"bg-music-dark border-gray-600 text-white placeholder-gray-400 focus:border-music-accent\"\n                        required\n                        data-testid=\"input-contact-name\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                        Email *\n                      </label>\n                      <Input\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                        placeholder=\"your@email.com\"\n                        className=\"bg-music-dark border-gray-600 text-white placeholder-gray-400 focus:border-music-accent\"\n                        required\n                        data-testid=\"input-contact-email\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      Subject *\n                    </label>\n                    <Input\n                      value={formData.subject}\n                      onChange={(e) => handleInputChange(\"subject\", e.target.value)}\n                      placeholder=\"What's this about?\"\n                      className=\"bg-music-dark border-gray-600 text-white placeholder-gray-400 focus:border-music-accent\"\n                      required\n                      data-testid=\"input-contact-subject\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      Message *\n                    </label>\n                    <Textarea\n                      value={formData.message}\n                      onChange={(e) => handleInputChange(\"message\", e.target.value)}\n                      placeholder=\"Tell us more about your inquiry...\"\n                      rows={6}\n                      className=\"bg-music-dark border-gray-600 text-white placeholder-gray-400 focus:border-music-accent resize-none\"\n                      required\n                      data-testid=\"textarea-contact-message\"\n                    />\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className=\"w-full bg-gradient-to-r from-music-accent via-music-purple to-music-blue hover:from-purple-600 hover:via-blue-600 hover:to-green-600 text-white py-3 font-semibold transition-all transform hover:scale-[1.02] disabled:opacity-50\"\n                    data-testid=\"button-send-message\"\n                  >\n                    <Send className=\"mr-2 h-4 w-4\" />\n                    {isSubmitting ? \"Sending...\" : \"Send Message\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Information */}\n          <div className=\"space-y-8\">\n            <Card className=\"bg-music-secondary border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-xl\">\n                  <Mail className=\"mr-3 h-5 w-5 text-music-blue\" />\n                  Contact Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-music-accent to-music-purple rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <Mail className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-white\">Email Support</h4>\n                    <p className=\"text-gray-300\">support@numusic.app</p>\n                    <p className=\"text-sm text-gray-400\">For general inquiries and support</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-music-blue to-music-green rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <MessageSquare className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-white\">Business Inquiries</h4>\n                    <p className=\"text-gray-300\">business@numusic.app</p>\n                    <p className=\"text-sm text-gray-400\">For partnerships and collaborations</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-music-purple to-music-accent rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <Clock className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-white\">Response Time</h4>\n                    <p className=\"text-gray-300\">Within 24 hours</p>\n                    <p className=\"text-sm text-gray-400\">Monday to Friday, 9 AM - 6 PM EST</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* FAQ Section */}\n            <Card className=\"bg-music-secondary border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-xl\">Frequently Asked Questions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-semibold text-white mb-2\">How long does music generation take?</h4>\n                  <p className=\"text-gray-300 text-sm\">Most tracks are generated within 30-60 seconds, depending on complexity and current demand.</p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold text-white mb-2\">Can I use generated music commercially?</h4>\n                  <p className=\"text-gray-300 text-sm\">Commercial usage rights depend on your subscription plan. Premium plans include commercial licenses.</p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold text-white mb-2\">What audio formats are supported?</h4>\n                  <p className=\"text-gray-300 text-sm\">We support MP3, WAV, M4A, AAC, and OGG formats for audio uploads and downloads.</p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold text-white mb-2\">How can I upgrade my subscription?</h4>\n                  <p className=\"text-gray-300 text-sm\">Visit our pricing page or contact support to upgrade your plan and unlock more features.</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10408},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AudioPlayer } from \"@/components/ui/audio-player\";\nimport { LoadingSpinner } from \"@/components/loading-spinner\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { LyricsGeneratorModal } from \"@/components/LyricsGeneratorModal\";\nimport { Header } from \"@/components/Header\";\nimport { \n  Music, \n  WandSparkles, \n  Mic, \n  Clock, \n  Play, \n  Download, \n  Share, \n  RotateCcw,\n  Tags,\n  Lightbulb,\n  CheckCircle,\n  AudioWaveform,\n  LogOut,\n  User,\n  Edit2,\n  Check,\n  X,\n  Trash2,\n  Star\n} from \"lucide-react\";\nimport type { MusicGeneration } from \"@shared/schema\";\n\nexport default function Home() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Text-to-music state\n  const [tags, setTags] = useState(\"\");\n  const [lyrics, setLyrics] = useState(\"\");\n  const [duration, setDuration] = useState([60]);\n  const [title, setTitle] = useState(\"\");\n  const [visibility, setVisibility] = useState<\"public\" | \"private\">(\"public\");\n  \n  // Audio-to-music state\n  const [audioTags, setAudioTags] = useState(\"\");\n  const [audioLyrics, setAudioLyrics] = useState(\"\");\n  const [audioTitle, setAudioTitle] = useState(\"\");\n  const [audioVisibility, setAudioVisibility] = useState<\"public\" | \"private\">(\"public\");\n  const [uploadedAudioUrl, setUploadedAudioUrl] = useState<string>(\"\");\n  \n  // Shared state\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [currentGeneration, setCurrentGeneration] = useState<MusicGeneration | null>(null);\n  const [activeTab, setActiveTab] = useState(\"textToMusic\");\n  \n  // Lyrics generator modal state\n  const [showLyricsModal, setShowLyricsModal] = useState(false);\n  const [currentLyricsTarget, setCurrentLyricsTarget] = useState<'text' | 'audio'>('text');\n\n  // Fetch user's music generations\n  const { data: generations } = useQuery({\n    queryKey: [\"/api/my-generations\"],\n    retry: false,\n  });\n\n  // Lyrics generator handlers\n  const handleOpenLyricsGenerator = (target: 'text' | 'audio') => {\n    setCurrentLyricsTarget(target);\n    setShowLyricsModal(true);\n  };\n\n  const handleUseLyrics = (generatedLyrics: string) => {\n    if (currentLyricsTarget === 'text') {\n      setLyrics(generatedLyrics);\n    } else {\n      setAudioLyrics(generatedLyrics);\n    }\n  };\n\n  // Shared generation success handler\n  const handleGenerationSuccess = async (data: any) => {\n    setIsGenerating(true);\n    const { generationId } = data;\n    \n    // Poll for status updates\n    const pollStatus = async () => {\n      try {\n        const response = await apiRequest(`/api/generation/${generationId}/status`, \"GET\");\n        const generation = await response.json();\n        \n        setCurrentGeneration(generation);\n        \n        if (generation.status === \"completed\") {\n          setIsGenerating(false);\n          toast({\n            title: \"Music Generated!\",\n            description: \"Your track is ready to play.\",\n          });\n          queryClient.invalidateQueries({ queryKey: [\"/api/my-generations\"] });\n        } else if (generation.status === \"failed\") {\n          setIsGenerating(false);\n          toast({\n            title: \"Generation Failed\",\n            description: \"There was an error generating your music. Please try again.\",\n            variant: \"destructive\",\n          });\n        } else {\n          setTimeout(pollStatus, 3000); // Poll every 3 seconds\n        }\n      } catch (error) {\n        if (isUnauthorizedError(error as Error)) {\n          toast({\n            title: \"Unauthorized\",\n            description: \"You are logged out. Logging in again...\",\n            variant: \"destructive\",\n          });\n          setTimeout(() => {\n            window.location.href = \"/auth\";\n          }, 500);\n          return;\n        }\n        console.error(\"Error polling status:\", error);\n        setIsGenerating(false);\n        toast({\n          title: \"Error\",\n          description: \"Failed to check generation status.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n    \n    pollStatus();\n  };\n\n  // Shared generation error handler\n  const handleGenerationError = (error: any) => {\n    if (isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/auth\";\n      }, 500);\n      return;\n    }\n    toast({\n      title: \"Generation Failed\",\n      description: \"Failed to start music generation. Please try again.\",\n      variant: \"destructive\",\n    });\n  };\n\n  // Text-to-music generation mutation\n  const generateTextToMusicMutation = useMutation({\n    mutationFn: async (data: { tags: string; lyrics: string; duration: number; title?: string; visibility: \"public\" | \"private\" }) => {\n      const response = await apiRequest(\"/api/generate-text-to-music\", \"POST\", data);\n      return await response.json();\n    },\n    onSuccess: handleGenerationSuccess,\n    onError: handleGenerationError,\n  });\n\n  // Audio-to-music generation mutation\n  const generateAudioToMusicMutation = useMutation({\n    mutationFn: async (data: { tags: string; lyrics: string; inputAudioUrl: string; title?: string; visibility: \"public\" | \"private\" }) => {\n      const response = await apiRequest(\"/api/generate-audio-to-music\", \"POST\", data);\n      return await response.json();\n    },\n    onSuccess: handleGenerationSuccess,\n    onError: handleGenerationError,\n  });\n\n  const handleGenerateTextToMusic = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!tags.trim()) {\n      toast({\n        title: \"Missing Tags\",\n        description: \"Please enter at least one genre tag.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateTextToMusicMutation.mutate({\n      tags: tags.trim(),\n      lyrics: lyrics.trim(),\n      duration: duration[0],\n      title: title.trim() || undefined,\n      visibility,\n    });\n  };\n\n  const handleGenerateAudioToMusic = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!audioTags.trim()) {\n      toast({\n        title: \"Missing Tags\",\n        description: \"Please enter at least one genre tag.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!uploadedAudioUrl) {\n      toast({\n        title: \"Missing Audio File\",\n        description: \"Please upload an audio file first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateAudioToMusicMutation.mutate({\n      tags: audioTags.trim(),\n      lyrics: audioLyrics.trim(),\n      inputAudioUrl: uploadedAudioUrl,\n      title: audioTitle.trim() || undefined,\n      visibility: audioVisibility,\n    });\n  };\n\n  const handleGetUploadParameters = async () => {\n    const response = await apiRequest(\"/api/objects/upload\", \"POST\");\n    const data = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = async (result: any) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      // Call backend to convert the upload URL to object path format\n      try {\n        const response = await apiRequest(\"/api/objects/normalize-path\", \"POST\", { \n          uploadURL: uploadedFile.uploadURL \n        });\n        const data = await response.json();\n        setUploadedAudioUrl(data.objectPath);\n        toast({\n          title: \"Audio Uploaded!\",\n          description: \"Your audio file is ready for processing.\",\n        });\n      } catch (error) {\n        console.error(\"Error normalizing upload path:\", error);\n        toast({\n          title: \"Upload Error\",\n          description: \"Failed to process uploaded file.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleDownload = async (audioUrl: string) => {\n    try {\n      const response = await fetch(audioUrl);\n      const blob = await response.blob();\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `ai-music-${Date.now()}.wav`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download the track.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleShare = async (track: MusicGeneration) => {\n    try {\n      const shareUrl = `${window.location.origin}/track/${track.id}`;\n      await navigator.clipboard.writeText(shareUrl);\n      toast({\n        title: \"Link Copied!\",\n        description: \"Track link has been copied to your clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Share Failed\",\n        description: \"Failed to copy link to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-black/50 flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen text-white\">\n      {/* Header */}\n      <Header currentPage=\"create\" />\n\n      {/* Main Content */}\n      <main className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-12\">\n        {/* Tab Navigation */}\n        <Tabs defaultValue=\"textToMusic\" className=\"mb-8\">\n          <TabsList className=\"bg-music-secondary p-2 border border-gray-700 grid w-full grid-cols-3 h-12\">\n            <TabsTrigger \n              value=\"textToMusic\"\n              className=\"text-gray-300 data-[state=active]:bg-gradient-to-r data-[state=active]:from-music-purple data-[state=active]:to-music-blue data-[state=active]:text-white flex items-center justify-center h-8 rounded-md transition-all\"\n              data-testid=\"tab-text-to-music\"\n            >\n              <WandSparkles className=\"mr-2 h-4 w-4\" />\n              Text to Music\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"audioToMusic\"\n              className=\"text-gray-300 data-[state=active]:bg-gradient-to-r data-[state=active]:from-music-purple data-[state=active]:to-music-blue data-[state=active]:text-white flex items-center justify-center h-8 rounded-md transition-all\"\n              data-testid=\"tab-audio-to-music\"\n            >\n              <AudioWaveform className=\"mr-2 h-4 w-4\" />\n              Audio to Music\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"myLibrary\"\n              className=\"text-gray-300 data-[state=active]:bg-gradient-to-r data-[state=active]:from-music-purple data-[state=active]:to-music-blue data-[state=active]:text-white flex items-center justify-center h-8 rounded-md transition-all\"\n              data-testid=\"tab-my-library\"\n            >\n              <Music className=\"mr-2 h-4 w-4\" />\n              My Library\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"textToMusic\" className=\"space-y-6 sm:space-y-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8\">\n              {/* Input Form */}\n              <div className=\"space-y-6\">\n                <Card className=\"bg-music-secondary border-gray-700\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <div className=\"w-8 h-8 bg-gradient-to-br from-music-purple to-music-blue rounded-lg flex items-center justify-center mr-3\">\n                        <WandSparkles className=\"text-sm text-white\" />\n                      </div>\n                      <span className=\"text-music-blue\">Create Your Track</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <form onSubmit={handleGenerateTextToMusic} className=\"space-y-6\">\n                      {/* Tags Field */}\n                      <div>\n                        <label className=\"block text-sm font-semibold text-gray-300 mb-3\">\n                          <Tags className=\"inline mr-2 h-4 w-4 text-music-accent\" />\n                          Music Genres & Style Tags\n                        </label>\n                        <Input\n                          value={tags}\n                          onChange={(e) => setTags(e.target.value)}\n                          placeholder=\"e.g., lofi, hiphop, electronic, chill, trap\"\n                          className=\"bg-music-dark border-gray-600 text-white placeholder-gray-300 focus:border-music-purple\"\n                          required\n                          data-testid=\"input-tags\"\n                        />\n                        \n                        {/* Popular Tag Bubbles */}\n                        <div className=\"mt-3\">\n                          <p className=\"text-xs text-gray-400 mb-2\">Popular tags (click to add):</p>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {[\n                              \"female singer\", \"male singer\", \"pop\", \"electronic\", \"hip hop\",\n                              \"ad jingle\", \"synthwave\", \"lo-fi\", \"energetic\", \"upbeat\"\n                            ].map((tag) => (\n                              <button\n                                key={tag}\n                                type=\"button\"\n                                onClick={() => {\n                                  const currentTags = tags.split(',').map(t => t.trim()).filter(t => t);\n                                  if (!currentTags.includes(tag)) {\n                                    setTags(currentTags.length > 0 ? `${tags}, ${tag}` : tag);\n                                  }\n                                }}\n                                className=\"px-3 py-1 text-xs bg-gray-700 hover:bg-music-purple hover:text-white text-gray-300 rounded-full transition-colors border border-gray-600 hover:border-music-purple\"\n                                data-testid={`tag-bubble-${tag.replace(/\\s+/g, '-')}`}\n                              >\n                                {tag}\n                              </button>\n                            ))}\n                          </div>\n                        </div>\n                        \n                        <p className=\"text-xs text-gray-400 mt-2\">Separate multiple genres with commas</p>\n                      </div>\n\n                      {/* Lyrics Field */}\n                      <div>\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <label className=\"block text-sm font-semibold text-gray-300\">\n                            <Mic className=\"inline mr-2 h-4 w-4 text-music-green\" />\n                            Lyrics (Optional)\n                          </label>\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleOpenLyricsGenerator('text')}\n                            className=\"border-music-purple text-music-purple hover:bg-music-purple hover:text-white\"\n                            data-testid=\"button-generate-lyrics-text\"\n                          >\n                            <WandSparkles className=\"mr-1 h-3 w-3\" />\n                            AI Generate\n                          </Button>\n                        </div>\n                        <Textarea\n                          value={lyrics}\n                          onChange={(e) => setLyrics(e.target.value)}\n                          placeholder=\"[Verse 1]&#10;Walking down the street tonight&#10;City lights are shining bright&#10;&#10;[Chorus]&#10;This is my moment to shine&#10;Everything's gonna be fine\"\n                          rows={6}\n                          className=\"bg-music-dark border-gray-600 text-white placeholder-gray-300 focus:border-music-green resize-none\"\n                          data-testid=\"textarea-lyrics\"\n                        />\n                        <p className=\"text-xs text-gray-400 mt-2\">Use [verse], [chorus], [bridge] to structure your song. Leave empty for instrumental.</p>\n                      </div>\n\n                      {/* Title Field */}\n                      <div>\n                        <label className=\"block text-sm font-semibold text-gray-300 mb-3\">\n                          <Music className=\"inline mr-2 h-4 w-4 text-music-accent\" />\n                          Track Title (Optional)\n                        </label>\n                        <Input\n                          value={title}\n                          onChange={(e) => setTitle(e.target.value)}\n                          placeholder=\"e.g., Sunset Dreams, Midnight Vibes\"\n                          className=\"bg-music-dark border-gray-600 text-white placeholder-gray-300 focus:border-music-accent\"\n                          data-testid=\"input-title\"\n                        />\n                      </div>\n\n                      {/* Duration Slider */}\n                      <div>\n                        <label className=\"block text-sm font-semibold text-gray-300 mb-3\">\n                          <Clock className=\"inline mr-2 h-4 w-4 text-music-blue\" />\n                          Duration: <span className=\"text-music-blue font-bold\">{duration[0]}</span> seconds\n                        </label>\n                        <Slider\n                          value={duration}\n                          onValueChange={setDuration}\n                          min={5}\n                          max={240}\n                          step={1}\n                          className=\"w-full\"\n                          data-testid=\"slider-duration\"\n                        />\n                        <div className=\"flex justify-between text-xs text-gray-400 mt-2\">\n                          <span>5s</span>\n                          <span>240s (4 min)</span>\n                        </div>\n                      </div>\n\n                      {/* Visibility Selector */}\n                      <div>\n                        <label className=\"block text-sm font-semibold text-gray-300 mb-3\">\n                          <Share className=\"inline mr-2 h-4 w-4 text-music-green\" />\n                          Track Visibility\n                        </label>\n                        <Select value={visibility} onValueChange={(value: \"public\" | \"private\") => setVisibility(value)}>\n                          <SelectTrigger className=\"bg-music-dark border-gray-600 text-white focus:border-music-green\" data-testid=\"select-visibility\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-music-dark border-gray-600\">\n                            <SelectItem value=\"public\" className=\"text-white hover:bg-gray-700\">\n                              Public - Visible in gallery\n                            </SelectItem>\n                            <SelectItem value=\"private\" className=\"text-white hover:bg-gray-700\">\n                              Private - Only you can see\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <p className=\"text-xs text-gray-400 mt-2\">Public tracks appear in the community gallery</p>\n                      </div>\n\n                      {/* Generate Button */}\n                      <Button\n                        type=\"submit\"\n                        disabled={generateTextToMusicMutation.isPending || isGenerating}\n                        className=\"w-full bg-gradient-to-r from-music-purple via-music-blue to-music-green hover:from-purple-600 hover:via-blue-600 hover:to-green-600 text-white py-4 text-lg font-bold transition-all transform hover:scale-[1.02] shadow-2xl disabled:opacity-50\"\n                        data-testid=\"button-generate\"\n                      >\n                        {generateTextToMusicMutation.isPending || isGenerating ? (\n                          <LoadingSpinner className=\"mr-2 h-5 w-5\" />\n                        ) : (\n                          <WandSparkles className=\"mr-2 h-5 w-5\" />\n                        )}\n                        {generateTextToMusicMutation.isPending || isGenerating ? \"Generating...\" : \"Generate Music Track\"}\n                      </Button>\n                    </form>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Results Panel */}\n              <div className=\"space-y-6\">\n                {/* Loading State */}\n                {isGenerating && (\n                  <Card className=\"bg-music-secondary border-gray-700 border-2 border-music-purple/30 shadow-xl shadow-music-purple/20\">\n                    <CardContent className=\"pt-6 text-center\">\n                      <div className=\"space-y-6\">\n                        <div className=\"relative\">\n                          <div className=\"w-20 h-20 bg-gradient-to-br from-music-purple via-music-blue to-music-green rounded-full flex items-center justify-center mx-auto animate-pulse shadow-lg\">\n                            <WandSparkles className=\"text-3xl text-white animate-spin\" style={{animationDuration: '2s'}} />\n                          </div>\n                          <div className=\"absolute -inset-2 bg-gradient-to-r from-music-purple to-music-blue rounded-full blur opacity-20 animate-pulse\"></div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <h3 className=\"text-2xl font-bold text-white\">Creating Your Music...</h3>\n                          <div className=\"flex items-center justify-center space-x-2\">\n                            <div className=\"flex space-x-1\">\n                              <div className=\"w-2 h-2 bg-music-purple rounded-full animate-bounce\"></div>\n                              <div className=\"w-2 h-2 bg-music-blue rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></div>\n                              <div className=\"w-2 h-2 bg-music-green rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n                            </div>\n                          </div>\n                          <p className=\"text-gray-300 font-medium\">This usually takes 30-60 seconds</p>\n                        </div>\n                        <div className=\"bg-gray-800/50 rounded-lg p-4\">\n                          <p className=\"text-sm text-gray-400\">🎵 Analyzing your inputs...</p>\n                          <p className=\"text-sm text-gray-400\">🎼 Generating musical patterns...</p>\n                          <p className=\"text-sm text-gray-400\">🎹 Composing your unique track...</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Music Player */}\n                {currentGeneration?.status === \"completed\" && currentGeneration.audioUrl && (\n                  <Card className=\"bg-music-secondary border-gray-700\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <div className=\"w-8 h-8 bg-gradient-to-br from-music-green to-music-blue rounded-lg flex items-center justify-center mr-3\">\n                          <Play className=\"text-sm text-white\" />\n                        </div>\n                        <span className=\"text-music-blue\">Your Generated Track</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <AudioPlayer src={currentGeneration.audioUrl} />\n                      \n                      {/* Track Info */}\n                      <div className=\"pt-4 border-t border-gray-700\">\n                        <div className=\"flex justify-between text-sm text-gray-400\">\n                          <span>Duration: {currentGeneration.duration ? Math.floor(currentGeneration.duration / 60) + ':' + (currentGeneration.duration % 60).toString().padStart(2, '0') : 'N/A'}</span>\n                          <span>Genre: {currentGeneration.tags}</span>\n                        </div>\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"flex space-x-3\">\n                        {user?.planStatus !== \"free\" ? (\n                          <Button\n                            onClick={() => handleDownload(currentGeneration.audioUrl!)}\n                            className=\"flex-1 bg-music-purple hover:bg-purple-600\"\n                            data-testid=\"button-download\"\n                          >\n                            <Download className=\"mr-2 h-4 w-4\" />\n                            Download\n                          </Button>\n                        ) : (\n                          <Button\n                            onClick={() => window.location.href = \"/pricing\"}\n                            className=\"flex-1 bg-gradient-to-r from-music-purple to-music-blue hover:from-purple-600 hover:to-blue-600\"\n                            data-testid=\"button-upgrade-to-download\"\n                          >\n                            <Star className=\"mr-2 h-4 w-4\" />\n                            Upgrade to Download\n                          </Button>\n                        )}\n                        <Button\n                          variant=\"outline\"\n                          className=\"flex-1 border-gray-600 hover:border-music-accent\"\n                          onClick={() => handleShare(currentGeneration)}\n                          data-testid=\"button-share\"\n                        >\n                          <Share className=\"mr-2 h-4 w-4\" />\n                          Share\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => handleGenerateTextToMusic({ preventDefault: () => {} } as React.FormEvent)}\n                          className=\"border-gray-600 hover:border-music-green\"\n                          data-testid=\"button-regenerate\"\n                        >\n                          <RotateCcw className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Tips Card */}\n                <Card className=\"bg-gradient-to-br from-music-secondary to-gray-800 border-gray-700\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Lightbulb className=\"text-music-accent mr-3 h-5 w-5\" />\n                      <span className=\"text-music-blue\">Tips for Better Results</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"space-y-3 text-gray-300\">\n                      <li className=\"flex items-start\">\n                        <CheckCircle className=\"text-music-green mr-3 mt-1 h-4 w-4\" />\n                        <span>Use specific genre tags like \"synthwave\", \"lo-fi hip hop\", or \"ambient electronic\"</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <CheckCircle className=\"text-music-green mr-3 mt-1 h-4 w-4\" />\n                        <span>Structure lyrics with [verse], [chorus], and [bridge] markers for better flow</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <CheckCircle className=\"text-music-green mr-3 mt-1 h-4 w-4\" />\n                        <span>Longer durations allow for more complex musical development</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <CheckCircle className=\"text-music-green mr-3 mt-1 h-4 w-4\" />\n                        <span>Leave lyrics empty or use \"[instrumental]\" for instrumental tracks</span>\n                      </li>\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"audioToMusic\" className=\"space-y-6 sm:space-y-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8\">\n              {/* Audio Upload Form */}\n              <div className=\"space-y-6\">\n                <Card className=\"bg-music-secondary border-gray-700\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <div className=\"w-8 h-8 bg-gradient-to-br from-music-accent to-music-blue rounded-lg flex items-center justify-center mr-3\">\n                        <AudioWaveform className=\"text-sm text-white\" />\n                      </div>\n                      <span className=\"text-music-blue\">Transform Your Audio</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <form onSubmit={handleGenerateAudioToMusic} className=\"space-y-6\">\n                      {/* Audio Upload */}\n                      <div>\n                        <label className=\"block text-sm font-semibold text-gray-300 mb-3\">\n                          <AudioWaveform className=\"inline mr-2 h-4 w-4 text-music-accent\" />\n                          Upload Audio File\n                        </label>\n                        <ObjectUploader\n                          maxNumberOfFiles={1}\n                          maxFileSize={50485760} // 50MB\n                          onGetUploadParameters={handleGetUploadParameters}\n                          onComplete={handleUploadComplete}\n                          acceptedFileTypes={['.mp3', '.wav', '.m4a', '.aac', '.ogg']}\n                          buttonClassName=\"w-full bg-music-dark border-2 border-dashed border-gray-600 hover:border-music-accent text-gray-300 hover:text-white min-h-[120px] rounded-lg transition-all flex items-center justify-center\"\n                        >\n                          <div className=\"flex flex-col items-center justify-center space-y-3 px-4 py-4\">\n                            <AudioWaveform className=\"h-8 w-8 text-music-accent flex-shrink-0\" />\n                            <div className=\"text-center space-y-1\">\n                              <p className=\"text-base font-semibold\">Click to upload audio file</p>\n                              <p className=\"text-sm text-gray-400\">Supports MP3, WAV, M4A, AAC, OGG (max 50MB)</p>\n                            </div>\n                          </div>\n                        </ObjectUploader>\n                        {uploadedAudioUrl && (\n                          <p className=\"text-sm text-music-green mt-2\">✓ Audio file uploaded successfully!</p>\n                        )}\n                      </div>\n\n                      {/* Tags Field */}\n                      <div>\n                        <label className=\"block text-sm font-semibold text-gray-300 mb-3\">\n                          <Tags className=\"inline mr-2 h-4 w-4 text-music-accent\" />\n                          Target Genres & Style Tags\n                        </label>\n                        <Input\n                          value={audioTags}\n                          onChange={(e) => setAudioTags(e.target.value)}\n                          placeholder=\"e.g., lofi, hiphop, electronic, chill, trap\"\n                          className=\"bg-music-dark border-gray-600 text-white placeholder-gray-300 focus:border-music-purple\"\n                          required\n                          data-testid=\"input-audio-tags\"\n                        />\n                        \n                        {/* Popular Tag Bubbles */}\n                        <div className=\"mt-3\">\n                          <p className=\"text-xs text-gray-400 mb-2\">Popular tags (click to add):</p>\n                          <div className=\"flex flex-wrap gap-1.5 sm:gap-2\">\n                            {[\n                              \"female singer\", \"male singer\", \"pop\", \"electronic\", \"hip hop\",\n                              \"ad jingle\", \"synthwave\", \"lo-fi\", \"energetic\", \"upbeat\"\n                            ].map((tag) => (\n                              <button\n                                key={tag}\n                                type=\"button\"\n                                onClick={() => {\n                                  const currentTags = audioTags.split(',').map(t => t.trim()).filter(t => t);\n                                  if (!currentTags.includes(tag)) {\n                                    setAudioTags(currentTags.length > 0 ? `${audioTags}, ${tag}` : tag);\n                                  }\n                                }}\n                                className=\"px-2 sm:px-3 py-1 text-xs bg-gray-700 hover:bg-music-purple hover:text-white text-gray-300 rounded-full transition-colors border border-gray-600 hover:border-music-purple whitespace-nowrap\"\n                                data-testid={`audio-tag-bubble-${tag.replace(/\\s+/g, '-')}`}\n                              >\n                                {tag}\n                              </button>\n                            ))}\n                          </div>\n                        </div>\n                        \n                        <p className=\"text-xs text-gray-400 mt-2\">Describe the style you want the output to have</p>\n                      </div>\n\n                      {/* Title Field */}\n                      <div>\n                        <label className=\"block text-sm font-semibold text-gray-300 mb-3\">\n                          <Music className=\"inline mr-2 h-4 w-4 text-music-accent\" />\n                          Track Title (Optional)\n                        </label>\n                        <Input\n                          value={audioTitle}\n                          onChange={(e) => setAudioTitle(e.target.value)}\n                          placeholder=\"e.g., Transformed Melody, Audio Remix\"\n                          className=\"bg-music-dark border-gray-600 text-white placeholder-gray-300 focus:border-music-accent\"\n                          data-testid=\"input-audio-title\"\n                        />\n                      </div>\n\n                      {/* Lyrics Field */}\n                      <div>\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <label className=\"block text-sm font-semibold text-gray-300\">\n                            <Mic className=\"inline mr-2 h-4 w-4 text-music-green\" />\n                            Lyrics (Optional)\n                          </label>\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleOpenLyricsGenerator('audio')}\n                            className=\"border-music-purple text-music-purple hover:bg-music-purple hover:text-white\"\n                            data-testid=\"button-generate-lyrics-audio\"\n                          >\n                            <WandSparkles className=\"mr-1 h-3 w-3\" />\n                            AI Generate\n                          </Button>\n                        </div>\n                        <Textarea\n                          value={audioLyrics}\n                          onChange={(e) => setAudioLyrics(e.target.value)}\n                          placeholder=\"[Verse 1]&#10;Add lyrics to overlay on the audio&#10;&#10;[Chorus]&#10;Transform the melody with vocals\"\n                          rows={6}\n                          className=\"bg-music-dark border-gray-600 text-white placeholder-gray-300 focus:border-music-green resize-none\"\n                          data-testid=\"textarea-audio-lyrics\"\n                        />\n                        <p className=\"text-xs text-gray-400 mt-2\">Add lyrics to be sung over the transformed audio. Leave empty to keep instrumental.</p>\n                      </div>\n\n                      {/* Visibility Selector */}\n                      <div>\n                        <label className=\"block text-sm font-semibold text-gray-300 mb-3\">\n                          <Share className=\"inline mr-2 h-4 w-4 text-music-green\" />\n                          Track Visibility\n                        </label>\n                        <Select value={audioVisibility} onValueChange={(value: \"public\" | \"private\") => setAudioVisibility(value)}>\n                          <SelectTrigger className=\"bg-music-dark border-gray-600 text-white focus:border-music-green\" data-testid=\"select-audio-visibility\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-music-dark border-gray-600\">\n                            <SelectItem value=\"public\" className=\"text-white hover:bg-gray-700\">\n                              Public - Visible in gallery\n                            </SelectItem>\n                            <SelectItem value=\"private\" className=\"text-white hover:bg-gray-700\">\n                              Private - Only you can see\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <p className=\"text-xs text-gray-400 mt-2\">Public tracks appear in the community gallery</p>\n                      </div>\n\n                      {/* Generate Button */}\n                      <Button\n                        type=\"submit\"\n                        disabled={generateAudioToMusicMutation.isPending || isGenerating}\n                        className=\"w-full bg-gradient-to-r from-music-accent via-music-purple to-music-blue hover:from-purple-600 hover:via-blue-600 hover:to-green-600 text-white py-4 text-lg font-bold transition-all transform hover:scale-[1.02] shadow-2xl disabled:opacity-50\"\n                        data-testid=\"button-generate-audio\"\n                      >\n                        {generateAudioToMusicMutation.isPending || isGenerating ? (\n                          <LoadingSpinner className=\"mr-2 h-5 w-5\" />\n                        ) : (\n                          <AudioWaveform className=\"mr-2 h-5 w-5\" />\n                        )}\n                        {generateAudioToMusicMutation.isPending || isGenerating ? \"Transforming...\" : \"Transform Audio\"}\n                      </Button>\n                    </form>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Results Panel - Shared with Text-to-Music */}\n              <div className=\"space-y-6\">\n                {/* Loading State */}\n                {isGenerating && (\n                  <Card className=\"bg-music-secondary border-gray-700 border-2 border-music-accent/30 shadow-xl shadow-music-accent/20\">\n                    <CardContent className=\"pt-6 text-center\">\n                      <div className=\"space-y-6\">\n                        <div className=\"relative\">\n                          <div className=\"w-20 h-20 bg-gradient-to-br from-music-accent via-music-purple to-music-blue rounded-full flex items-center justify-center mx-auto animate-pulse shadow-lg\">\n                            <AudioWaveform className=\"text-3xl text-white animate-bounce\" />\n                          </div>\n                          <div className=\"absolute -inset-2 bg-gradient-to-r from-music-accent to-music-blue rounded-full blur opacity-20 animate-pulse\"></div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <h3 className=\"text-2xl font-bold text-white\">Transforming Your Audio...</h3>\n                          <div className=\"flex items-center justify-center space-x-2\">\n                            <div className=\"flex space-x-1\">\n                              <div className=\"w-2 h-2 bg-music-accent rounded-full animate-bounce\"></div>\n                              <div className=\"w-2 h-2 bg-music-purple rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></div>\n                              <div className=\"w-2 h-2 bg-music-blue rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n                            </div>\n                          </div>\n                          <p className=\"text-gray-300 font-medium\">This usually takes 30-60 seconds</p>\n                        </div>\n                        <div className=\"bg-gray-800/50 rounded-lg p-4\">\n                          <p className=\"text-sm text-gray-400\">🎵 Processing your audio file...</p>\n                          <p className=\"text-sm text-gray-400\">🎼 Analyzing musical elements...</p>\n                          <p className=\"text-sm text-gray-400\">🎹 Creating your transformation...</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Music Player */}\n                {currentGeneration?.status === \"completed\" && currentGeneration.audioUrl && (\n                  <Card className=\"bg-music-secondary border-gray-700\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <div className=\"w-8 h-8 bg-gradient-to-br from-music-green to-music-blue rounded-lg flex items-center justify-center mr-3\">\n                          <Play className=\"text-sm text-white\" />\n                        </div>\n                        Your Transformed Track\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <AudioPlayer src={currentGeneration.audioUrl} />\n                      \n                      {/* Track Info */}\n                      <div className=\"pt-4 border-t border-gray-700\">\n                        <div className=\"flex justify-between text-sm text-gray-400\">\n                          <span>Type: {currentGeneration.type === 'audio-to-music' ? 'Audio Transformation' : 'Text Generation'}</span>\n                          <span>Genre: {currentGeneration.tags}</span>\n                        </div>\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"flex space-x-3\">\n                        {user?.planStatus !== \"free\" ? (\n                          <Button\n                            onClick={() => handleDownload(currentGeneration.audioUrl!)}\n                            className=\"flex-1 bg-music-purple hover:bg-purple-600\"\n                            data-testid=\"button-download-audio\"\n                          >\n                            <Download className=\"mr-2 h-4 w-4\" />\n                            Download\n                          </Button>\n                        ) : (\n                          <Button\n                            onClick={() => window.location.href = \"/pricing\"}\n                            className=\"flex-1 bg-gradient-to-r from-music-purple to-music-blue hover:from-purple-600 hover:to-blue-600\"\n                            data-testid=\"button-upgrade-to-download-audio\"\n                          >\n                            <Star className=\"mr-2 h-4 w-4\" />\n                            Upgrade to Download\n                          </Button>\n                        )}\n                        <Button\n                          variant=\"outline\"\n                          className=\"flex-1 border-gray-600 hover:border-music-accent\"\n                          data-testid=\"button-share-audio\"\n                        >\n                          <Share className=\"mr-2 h-4 w-4\" />\n                          Share\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => handleGenerateAudioToMusic({ preventDefault: () => {} } as React.FormEvent)}\n                          className=\"border-gray-600 hover:border-music-green\"\n                          data-testid=\"button-regenerate-audio\"\n                        >\n                          <RotateCcw className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Tips Card */}\n                <Card className=\"bg-gradient-to-br from-music-secondary to-gray-800 border-gray-700\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Lightbulb className=\"text-music-accent mr-3 h-5 w-5\" />\n                      <span className=\"text-music-blue\">Audio Transformation Tips</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"space-y-3 text-gray-300\">\n                      <li className=\"flex items-start\">\n                        <CheckCircle className=\"text-music-green mr-3 mt-1 h-4 w-4\" />\n                        <span>Upload clear, high-quality audio files for best results</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <CheckCircle className=\"text-music-green mr-3 mt-1 h-4 w-4\" />\n                        <span>Specify target genres to guide the transformation style</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <CheckCircle className=\"text-music-green mr-3 mt-1 h-4 w-4\" />\n                        <span>Add lyrics to create a vocal version of instrumental tracks</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <CheckCircle className=\"text-music-green mr-3 mt-1 h-4 w-4\" />\n                        <span>Shorter audio clips (30s-2min) typically work best</span>\n                      </li>\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"myLibrary\" className=\"space-y-6 sm:space-y-8\">\n            <div>\n              <Card className=\"bg-music-secondary border-gray-700\">\n                <CardHeader className=\"pb-4 sm:pb-6\">\n                  <CardTitle className=\"flex items-center\">\n                    <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-gradient-to-br from-music-purple to-music-blue rounded-lg flex items-center justify-center mr-3 flex-shrink-0\">\n                      <Music className=\"text-xs sm:text-sm text-white\" />\n                    </div>\n                    <span className=\"text-music-blue text-sm sm:text-base truncate\">My Music Library ({Array.isArray(generations) ? generations.length : 0} tracks)</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"px-4 sm:px-6 pb-4 sm:pb-6\">\n                  {!generations || !Array.isArray(generations) || generations.length === 0 ? (\n                    <div className=\"text-center py-8 sm:py-12\">\n                      <Music className=\"h-12 w-12 sm:h-16 sm:w-16 text-gray-600 mx-auto mb-4\" />\n                      <h3 className=\"text-lg sm:text-xl font-semibold text-gray-400 mb-2\">No tracks yet</h3>\n                      <p className=\"text-sm sm:text-base text-gray-500 mb-4 sm:mb-6 px-4\">Create your first AI-generated track to start your music library.</p>\n                      <Button\n                        onClick={() => (document.querySelector('[data-testid=\"tab-text-to-music\"]') as HTMLElement)?.click()}\n                        className=\"bg-gradient-to-r from-music-purple to-music-blue hover:from-purple-600 hover:to-blue-600 text-sm sm:text-base\"\n                        data-testid=\"button-create-first-track\"\n                      >\n                        <WandSparkles className=\"mr-2 h-4 w-4\" />\n                        Create First Track\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"grid gap-3 sm:gap-4\">\n                      {(generations as MusicGeneration[]).map((track: MusicGeneration) => (\n                        <TrackCard key={track.id} track={track} user={user} />\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </main>\n\n      {/* Lyrics Generator Modal */}\n      <LyricsGeneratorModal\n        isOpen={showLyricsModal}\n        onClose={() => setShowLyricsModal(false)}\n        onUseLyrics={handleUseLyrics}\n        duration={currentLyricsTarget === 'text' ? duration[0] : 60}\n      />\n    </div>\n  );\n}\n\nfunction TrackCard({ track, user }: { track: MusicGeneration; user: any }) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditingTitle, setIsEditingTitle] = useState(false);\n  const [editedTitle, setEditedTitle] = useState(track.title || \"\");\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n\n  const updateTitleMutation = useMutation({\n    mutationFn: async (title: string) => {\n      const response = await apiRequest(`/api/generation/${track.id}/visibility`, \"PATCH\", { \n        title,\n        visibility: track.visibility \n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/my-generations\"] });\n      setIsEditingTitle(false);\n      toast({\n        title: \"Track updated\",\n        description: \"Title has been changed.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/auth\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Update failed\",\n        description: \"Could not update track title.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  const updateVisibilityMutation = useMutation({\n    mutationFn: async (visibility: \"public\" | \"private\") => {\n      const response = await apiRequest(`/api/generation/${track.id}/visibility`, \"PATCH\", { \n        visibility,\n        title: track.title \n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/my-generations\"] });\n      toast({\n        title: \"Track updated\",\n        description: \"Visibility setting has been changed.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/auth\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Update failed\",\n        description: \"Could not update track visibility.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(`/api/generation/${track.id}`, \"DELETE\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/my-generations\"] });\n      toast({\n        title: \"Track deleted\",\n        description: \"Your track has been permanently deleted.\",\n      });\n      setShowDeleteConfirm(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/auth\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Delete failed\",\n        description: \"Could not delete track. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <Card className=\"bg-music-dark border-gray-600 hover:border-gray-500 transition-colors\">\n      <CardContent className=\"p-4 sm:p-6\">\n        {/* Mobile-first responsive layout */}\n        <div className=\"space-y-4\">\n          {/* Title and Type Row */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-6 h-6 bg-gradient-to-br from-music-purple to-music-blue rounded flex items-center justify-center flex-shrink-0\">\n              {track.type === \"text-to-music\" ? (\n                <WandSparkles className=\"w-3 h-3 text-white\" />\n              ) : (\n                <AudioWaveform className=\"w-3 h-3 text-white\" />\n              )}\n            </div>\n            {isEditingTitle ? (\n              <div className=\"flex items-center space-x-2 flex-1 min-w-0\">\n                <Input\n                  value={editedTitle}\n                  onChange={(e) => setEditedTitle(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      updateTitleMutation.mutate(editedTitle);\n                    } else if (e.key === 'Escape') {\n                      setIsEditingTitle(false);\n                      setEditedTitle(track.title || \"\");\n                    }\n                  }}\n                  className=\"text-sm sm:text-lg font-semibold bg-music-secondary border-gray-600 text-white flex-1 min-w-0\"\n                  placeholder=\"Enter track title\"\n                  autoFocus\n                  data-testid={`input-edit-title-${track.id}`}\n                />\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => updateTitleMutation.mutate(editedTitle)}\n                  disabled={updateTitleMutation.isPending}\n                  className=\"text-music-green hover:text-music-green flex-shrink-0\"\n                  data-testid={`button-save-title-${track.id}`}\n                >\n                  <Check className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => {\n                    setIsEditingTitle(false);\n                    setEditedTitle(track.title || \"\");\n                  }}\n                  className=\"text-gray-400 hover:text-white flex-shrink-0\"\n                  data-testid={`button-cancel-title-${track.id}`}\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-2 flex-1 min-w-0\">\n                <h3 className=\"text-sm sm:text-lg font-semibold text-white truncate\">\n                  {track.title || `Untitled Track`}\n                </h3>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => {\n                    setIsEditingTitle(true);\n                    setEditedTitle(track.title || \"\");\n                  }}\n                  className=\"text-gray-400 hover:text-white hover:bg-gray-700 p-2 h-8 w-8 opacity-70 hover:opacity-100 transition-all flex-shrink-0\"\n                  data-testid={`button-edit-title-${track.id}`}\n                  title=\"Edit track title\"\n                >\n                  <Edit2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            )}\n            <span className={`px-2 py-1 rounded text-xs font-medium flex-shrink-0 ${\n              track.visibility === \"public\" \n                ? \"bg-music-green/20 text-music-green\" \n                : \"bg-gray-600/20 text-gray-400\"\n            }`}>\n              {track.visibility}\n            </span>\n          </div>\n          \n          {/* Track Metadata */}\n          <div className=\"flex flex-wrap items-center gap-3 text-xs sm:text-sm text-gray-400\">\n            {track.tags && (\n              <div className=\"flex items-center\">\n                <Tags className=\"w-4 h-4 mr-1 flex-shrink-0\" />\n                <span className=\"truncate\">{track.tags}</span>\n              </div>\n            )}\n            <div className=\"flex items-center\">\n              <Clock className=\"w-4 h-4 mr-1 flex-shrink-0\" />\n              {track.duration ? `${track.duration}s` : \"N/A\"}\n            </div>\n            <div className=\"flex items-center\">\n              <span className={`w-2 h-2 rounded-full mr-2 flex-shrink-0 ${\n                track.status === \"completed\" ? \"bg-music-green\" :\n                track.status === \"processing\" ? \"bg-music-blue animate-pulse\" :\n                track.status === \"failed\" ? \"bg-red-500\" : \"bg-gray-500\"\n              }`} />\n              {track.status}\n            </div>\n          </div>\n\n          {/* Audio Player */}\n          {track.status === \"completed\" && track.audioUrl && (\n            <div>\n              <AudioPlayer \n                src={track.audioUrl}\n                className=\"w-full\"\n              />\n            </div>\n          )}\n\n          {/* Actions - Mobile responsive */}\n          <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-3\">\n            <Select \n              value={track.visibility} \n              onValueChange={(value: \"public\" | \"private\") => updateVisibilityMutation.mutate(value)}\n              disabled={updateVisibilityMutation.isPending}\n            >\n              <SelectTrigger className=\"w-full sm:w-32 bg-music-secondary border-gray-600 text-white text-xs\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent className=\"bg-music-dark border-gray-600\">\n                <SelectItem value=\"public\" className=\"text-white hover:bg-gray-700 text-xs\">\n                  Public\n                </SelectItem>\n                <SelectItem value=\"private\" className=\"text-white hover:bg-gray-700 text-xs\">\n                  Private  \n                </SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <div className=\"flex items-center justify-center gap-2 sm:gap-1\">\n              {track.status === \"completed\" && track.audioUrl && (\n                user?.planStatus !== \"free\" ? (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => {\n                      const link = document.createElement('a');\n                      link.href = track.audioUrl!;\n                      link.download = `${track.title || 'track'}.wav`;\n                      link.click();\n                    }}\n                    className=\"text-gray-400 hover:text-white flex-1 sm:flex-initial\"\n                    data-testid={`button-download-${track.id}`}\n                  >\n                    <Download className=\"w-4 h-4\" />\n                  </Button>\n                ) : (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => window.location.href = \"/pricing\"}\n                    className=\"text-music-purple hover:text-white hover:bg-music-purple/20 flex-1 sm:flex-initial\"\n                    data-testid={`button-upgrade-download-${track.id}`}\n                    title=\"Upgrade to download tracks\"\n                  >\n                    <Star className=\"w-4 h-4\" />\n                  </Button>\n                )\n              )}\n              \n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={async () => {\n                  try {\n                    await navigator.clipboard.writeText('https://numusic.app/track/' + track.id);\n                    toast({\n                      title: \"Link Copied!\",\n                      description: \"Track link has been copied to your clipboard.\",\n                    });\n                  } catch (error) {\n                    toast({\n                      title: \"Share Failed\",\n                      description: \"Failed to copy link to clipboard.\",\n                      variant: \"destructive\",\n                    });\n                  }\n                }}\n                className=\"text-gray-400 hover:text-white flex-1 sm:flex-initial\"\n                data-testid={`button-share-${track.id}`}\n              >\n                <Share className=\"w-4 h-4\" />\n              </Button>\n              \n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => setShowDeleteConfirm(true)}\n                className=\"text-gray-400 hover:text-red-400 flex-1 sm:flex-initial\"\n                data-testid={`button-delete-${track.id}`}\n              >\n                <Trash2 className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {track.lyrics && (\n          <div className=\"mt-4\">\n            <label className=\"block text-xs font-medium text-gray-400 mb-2\">\n              <Mic className=\"inline w-3 h-3 mr-1\" />\n              Lyrics\n            </label>\n            <div className=\"max-h-24 overflow-y-auto p-3 bg-music-secondary/50 rounded-lg border border-gray-600\">\n              <p className=\"text-sm text-gray-300 whitespace-pre-wrap leading-relaxed\">{track.lyrics}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Delete Confirmation Dialog */}\n        {showDeleteConfirm && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\" onClick={() => setShowDeleteConfirm(false)}>\n            <div className=\"bg-music-dark border border-gray-600 rounded-lg p-6 max-w-md mx-4\" onClick={(e) => e.stopPropagation()}>\n              <h3 className=\"text-lg font-semibold text-white mb-2\">Delete Track</h3>\n              <p className=\"text-gray-300 mb-4\">\n                Are you sure you want to delete \"{track.title || 'Untitled'}\"? This action cannot be undone.\n              </p>\n              <div className=\"flex gap-3 justify-end\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setShowDeleteConfirm(false)}\n                  className=\"text-gray-400 hover:text-white\"\n                  data-testid=\"button-cancel-delete\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={() => deleteMutation.mutate()}\n                  disabled={deleteMutation.isPending}\n                  className=\"bg-red-600 hover:bg-red-700 text-white\"\n                  data-testid=\"button-confirm-delete\"\n                >\n                  {deleteMutation.isPending ? \"Deleting...\" : \"Delete\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":63768},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AudioPlayer } from \"@/components/ui/audio-player\";\nimport { Header } from \"@/components/Header\";\nimport { Music, Play, Headphones, WandSparkles, Lightbulb, Clock, Tags, AudioWaveform, Share } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { MusicGeneration } from \"@shared/schema\";\n\n\nexport default function Landing() {\n  const { toast } = useToast();\n  \n  // Fetch public tracks for the gallery\n  const { data: publicTracks } = useQuery({\n    queryKey: [\"/api/public-tracks\"],\n    retry: false,\n  });\n\n  const handleShare = async (track: MusicGeneration) => {\n    try {\n      const shareUrl = `${window.location.origin}/track/${track.id}`;\n      await navigator.clipboard.writeText(shareUrl);\n      toast({\n        title: \"Link Copied!\",\n        description: \"Track link has been copied to your clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Share Failed\",\n        description: \"Failed to copy link to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen text-white\">\n      <Header currentPage=\"home\" />\n\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        {/* Background Elements */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-music-purple/10 via-music-dark to-music-blue/10\"></div>\n        <div className=\"absolute top-20 left-10 w-72 h-72 bg-music-purple/20 rounded-full blur-3xl animate-pulse-slow\"></div>\n        <div className=\"absolute bottom-20 right-10 w-96 h-96 bg-music-blue/20 rounded-full blur-3xl animate-pulse-slow\"></div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            {/* Content Column */}\n            <div className=\"text-center lg:text-left\">\n              <h2 className=\"text-5xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-white via-music-accent to-music-green bg-clip-text text-transparent leading-tight\">\n                Create Music with AI\n              </h2>\n              <p className=\"text-xl text-gray-300 mb-8 leading-relaxed\">\n                Transform your ideas into professional music tracks. Generate songs from text prompts or enhance existing audio with our cutting-edge AI technology.\n              </p>\n              \n              {/* Hero CTA */}\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center lg:justify-start items-center mb-12\">\n                <Button\n                  size=\"lg\"\n                  className=\"bg-gradient-to-r from-music-purple to-music-blue hover:from-purple-600 hover:to-blue-600 text-white px-8 py-4 text-lg font-semibold transition-all transform hover:scale-105 shadow-2xl\"\n                  onClick={() => window.location.href = \"/auth\"}\n                  data-testid=\"button-start-creating\"\n                >\n                  <Play className=\"mr-2 h-5 w-5\" />\n                  Start Creating Music\n                </Button>\n\n              </div>\n            </div>\n\n\n          </div>\n        </div>\n      </section>\n\n      {/* Public Gallery Section */}\n      {publicTracks && Array.isArray(publicTracks) && publicTracks.length > 0 && (\n        <section className=\"py-20 bg-music-dark\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-16\">\n              <h3 className=\"text-3xl font-bold mb-4\">Community Gallery</h3>\n              <p className=\"text-xl text-gray-400 max-w-2xl mx-auto\">\n                Discover amazing tracks created by our community of AI music creators.\n              </p>\n            </div>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {(publicTracks as MusicGeneration[]).slice(0, 6).map((track: MusicGeneration) => (\n                <PublicTrackCard key={track.id} track={track} onShare={() => handleShare(track)} />\n              ))}\n            </div>\n\n            {publicTracks.length > 6 && (\n              <div className=\"text-center mt-12\">\n                <Button\n                  variant=\"outline\"\n                  size=\"lg\"\n                  onClick={() => window.location.href = \"/auth\"}\n                  className=\"border-music-purple text-music-purple hover:bg-music-purple hover:text-white\"\n                  data-testid=\"button-explore-more\"\n                >\n                  Explore More Tracks\n                </Button>\n              </div>\n            )}\n          </div>\n        </section>\n      )}\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-music-secondary/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-3xl font-bold mb-4\">Powerful AI Music Generation</h3>\n            <p className=\"text-xl text-gray-400 max-w-2xl mx-auto\">\n              Create professional-quality music with just text prompts. Our AI understands genres, styles, and musical structure.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"bg-music-secondary rounded-2xl p-8 border border-gray-700\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-music-purple to-music-blue rounded-lg flex items-center justify-center mb-6\">\n                <WandSparkles className=\"text-white text-xl\" />\n              </div>\n              <h4 className=\"text-xl font-bold mb-4\">Text to Music</h4>\n              <p className=\"text-gray-400\">\n                Describe your musical vision with genres, lyrics, and style tags. Our AI will compose a complete track for you.\n              </p>\n            </div>\n\n            <div className=\"bg-music-secondary rounded-2xl p-8 border border-gray-700\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-music-green to-music-blue rounded-lg flex items-center justify-center mb-6\">\n                <Clock className=\"text-white text-xl\" />\n              </div>\n              <h4 className=\"text-xl font-bold mb-4\">Custom Duration</h4>\n              <p className=\"text-gray-400\">\n                Generate tracks from 5 seconds to 4 minutes long. Perfect for loops, full songs, or background music.\n              </p>\n            </div>\n\n            <div className=\"bg-music-secondary rounded-2xl p-8 border border-gray-700\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-music-accent to-music-purple rounded-lg flex items-center justify-center mb-6\">\n                <Lightbulb className=\"text-white text-xl\" />\n              </div>\n              <h4 className=\"text-xl font-bold mb-4\">Professional Quality</h4>\n              <p className=\"text-gray-400\">\n                High-quality audio output suitable for streaming, social media, or professional projects.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-music-secondary border-t border-gray-800 mt-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {/* Brand */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-music-purple to-music-blue rounded-lg flex items-center justify-center\">\n                  <Music className=\"text-white text-sm\" />\n                </div>\n                <span className=\"text-lg font-bold\">NuMusic</span>\n              </div>\n              <p className=\"text-gray-400\">Create professional music with the power of artificial intelligence.</p>\n            </div>\n\n            {/* Quick Links */}\n            <div>\n              <h4 className=\"font-semibold mb-4\">Quick Links</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"/pricing\" className=\"hover:text-white transition-colors\">Pricing</a></li>\n                <li><a href=\"/auth\" className=\"hover:text-white transition-colors\">Get Started</a></li>\n              </ul>\n            </div>\n\n            {/* Legal */}\n            <div>\n              <h4 className=\"font-semibold mb-4\">Legal</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"/privacy\" className=\"hover:text-white transition-colors\">Privacy Policy</a></li>\n                <li><a href=\"/terms\" className=\"hover:text-white transition-colors\">Terms of Service</a></li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n            <p>&copy; 2024 NuMusic. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nfunction PublicTrackCard({ track, onShare }: { track: MusicGeneration; onShare: () => void }): JSX.Element {\n  return (\n    <Card className=\"bg-music-secondary border-gray-700 hover:border-gray-600 transition-colors\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-music-purple to-music-blue rounded-lg flex items-center justify-center\">\n              {track.type === \"text-to-music\" ? (\n                <WandSparkles className=\"w-4 h-4 text-white\" />\n              ) : (\n                <AudioWaveform className=\"w-4 h-4 text-white\" />\n              )}\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-white\">\n                {track.title || \"Untitled Track\"}\n              </h4>\n              <p className=\"text-sm text-gray-400\">\n                AI Generated {track.type === \"text-to-music\" ? \"Music\" : \"Remix\"}\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {track.tags && (\n          <div className=\"flex items-center text-sm text-gray-400\">\n            <Tags className=\"w-4 h-4 mr-2\" />\n            <span className=\"truncate\">{track.tags}</span>\n          </div>\n        )}\n        \n        {track.audioUrl && (\n          <AudioPlayer \n            src={track.audioUrl}\n            className=\"w-full\"\n          />\n        )}\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center text-xs text-gray-500 space-x-4\">\n            <span>{track.duration ? `${track.duration}s` : \"\"}</span>\n            <span className=\"capitalize\">{track.type.replace(\"-\", \" \")}</span>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onShare}\n            className=\"text-gray-400 hover:text-white h-8 w-8 p-0\"\n            data-testid={`button-share-${track.id}`}\n          >\n            <Share className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11195},"client/src/pages/my-library.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AudioPlayer } from \"@/components/ui/audio-player\";\nimport { Music, Search, Filter, WandSparkles, AudioWaveform, Download, Share, Eye, EyeOff, Trash2 } from \"lucide-react\";\nimport type { MusicGeneration } from \"@shared/schema\";\n\nexport default function MyLibrary() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [visibilityFilter, setVisibilityFilter] = useState<string>(\"all\");\n\n  // Fetch user's generations\n  const { data: generations, isLoading } = useQuery({\n    queryKey: [\"/api/my-generations\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  // Filter generations based on search and filters\n  const filteredGenerations = (generations as MusicGeneration[] || []).filter((generation: MusicGeneration) => {\n    const matchesSearch = !searchQuery || \n      generation.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      generation.tags?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || generation.status === statusFilter;\n    const matchesType = typeFilter === \"all\" || generation.type === typeFilter;\n    const matchesVisibility = visibilityFilter === \"all\" || generation.visibility === visibilityFilter;\n    \n    return matchesSearch && matchesStatus && matchesType && matchesVisibility;\n  });\n\n  const completedGenerations = filteredGenerations.filter(gen => gen.status === \"completed\");\n  const publicGenerations = filteredGenerations.filter(gen => gen.visibility === \"public\");\n  const privateGenerations = filteredGenerations.filter(gen => gen.visibility === \"private\");\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-black text-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Access Denied</h1>\n          <p className=\"text-gray-400\">Please log in to view your library.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-black text-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4\"></div>\n          <p className=\"text-gray-400\">Loading your music library...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-blue-400 mb-2\">My Music Library</h1>\n            <p className=\"text-gray-400\">\n              Welcome back, {(user as any)?.email || 'there'}! Here are all your music creations.\n            </p>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Music className=\"h-5 w-5 text-blue-400\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Total Tracks</p>\n                  <p className=\"text-xl font-bold text-white\">{filteredGenerations.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <WandSparkles className=\"h-5 w-5 text-green-400\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Completed</p>\n                  <p className=\"text-xl font-bold text-white\">{completedGenerations.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Eye className=\"h-5 w-5 text-purple-400\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Public</p>\n                  <p className=\"text-xl font-bold text-white\">{publicGenerations.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <EyeOff className=\"h-5 w-5 text-yellow-400\" />\n                <div>\n                  <p className=\"text-sm text-gray-400\">Private</p>\n                  <p className=\"text-xl font-bold text-white\">{privateGenerations.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"bg-gray-900 border-gray-700 mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search by title or tags...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10 bg-gray-800 border-gray-600 text-white\"\n                    data-testid=\"input-search\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"generating\">Generating</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"failed\">Failed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Select value={typeFilter} onValueChange={setTypeFilter}>\n                  <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"text-to-music\">Text to Music</SelectItem>\n                    <SelectItem value=\"audio-to-music\">Audio to Music</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Select value={visibilityFilter} onValueChange={setVisibilityFilter}>\n                  <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Visibility</SelectItem>\n                    <SelectItem value=\"public\">Public</SelectItem>\n                    <SelectItem value=\"private\">Private</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Generations Grid */}\n        {filteredGenerations.length === 0 ? (\n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardContent className=\"p-12 text-center\">\n              <Music className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-white mb-2\">No music found</h3>\n              <p className=\"text-gray-400 mb-6\">\n                {searchQuery || statusFilter !== \"all\" || typeFilter !== \"all\" || visibilityFilter !== \"all\"\n                  ? \"No tracks match your current filters.\"\n                  : \"You haven't created any music yet. Start by generating your first track!\"}\n              </p>\n              {!searchQuery && statusFilter === \"all\" && typeFilter === \"all\" && visibilityFilter === \"all\" && (\n                <Button \n                  onClick={() => window.location.href = '/'}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                  data-testid=\"button-create-first\"\n                >\n                  Create Your First Track\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredGenerations.map((generation: MusicGeneration) => (\n              <Card key={generation.id} className=\"bg-gray-900 border-gray-700 hover:border-gray-600 transition-colors\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-gradient-to-br from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n                        {generation.type === \"text-to-music\" ? (\n                          <WandSparkles className=\"w-5 h-5 text-white\" />\n                        ) : (\n                          <AudioWaveform className=\"w-5 h-5 text-white\" />\n                        )}\n                      </div>\n                      \n                      <div>\n                        <h3 className=\"text-lg font-semibold text-white\">\n                          {generation.title || \"Untitled Track\"}\n                        </h3>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Badge \n                            variant={generation.status === \"completed\" ? \"default\" : \"secondary\"}\n                            className={\n                              generation.status === \"completed\" ? \"bg-green-600 text-white\" :\n                              generation.status === \"failed\" ? \"bg-red-600 text-white\" :\n                              generation.status === \"generating\" ? \"bg-yellow-600 text-white\" :\n                              \"bg-gray-600 text-white\"\n                            }\n                          >\n                            {generation.status}\n                          </Badge>\n                          <Badge variant={generation.visibility === \"public\" ? \"default\" : \"secondary\"}>\n                            {generation.visibility}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"text-sm text-gray-400\">\n                      <p><strong>Tags:</strong> {generation.tags || \"No tags\"}</p>\n                      {generation.lyrics && (\n                        <p className=\"mt-1\">\n                          <strong>Lyrics:</strong> {generation.lyrics.substring(0, 100)}\n                          {generation.lyrics.length > 100 ? \"...\" : \"\"}\n                        </p>\n                      )}\n                      <p className=\"mt-1\">\n                        <strong>Created:</strong> {generation.createdAt ? new Date(generation.createdAt).toLocaleDateString() : \"N/A\"}\n                      </p>\n                      {generation.duration && (\n                        <p><strong>Duration:</strong> {generation.duration}s</p>\n                      )}\n                    </div>\n\n                    {/* Audio Player */}\n                    {generation.audioUrl && generation.status === \"completed\" && (\n                      <div className=\"mt-4\">\n                        <AudioPlayer src={generation.audioUrl} className=\"w-full\" />\n                      </div>\n                    )}\n\n                    {/* Action Buttons */}\n                    <div className=\"flex gap-3 items-center pt-3 border-t border-gray-700\">\n                      {generation.status === \"completed\" && generation.audioUrl && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => {\n                            const a = document.createElement('a');\n                            a.href = generation.audioUrl!;\n                            a.download = `${generation.title || 'track'}.wav`;\n                            a.click();\n                          }}\n                          className=\"text-blue-400 hover:text-blue-300 flex-1\"\n                          data-testid={`button-download-${generation.id}`}\n                        >\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Download\n                        </Button>\n                      )}\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={async () => {\n                          try {\n                            await navigator.clipboard.writeText('https://numusic.app/track/' + generation.id);\n                            toast({\n                              title: \"Link Copied!\",\n                              description: \"Track link has been copied to your clipboard.\",\n                            });\n                          } catch (error) {\n                            toast({\n                              title: \"Share Failed\",\n                              description: \"Failed to copy link to clipboard.\",\n                              variant: \"destructive\",\n                            });\n                          }\n                        }}\n                        className=\"text-green-400 hover:text-green-300 flex-1\"\n                        data-testid={`button-share-${generation.id}`}\n                      >\n                        <Share className=\"w-4 h-4 mr-2\" />\n                        Share\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":15258},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pricing.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Header } from \"@/components/Header\";\nimport { Check, Music, Zap, Crown, User, LogOut } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { SubscriptionPlan } from \"@shared/schema\";\n\nexport default function Pricing() {\n  const { user } = useAuth();\n  const { data: plans = [], isLoading } = useQuery<SubscriptionPlan[]>({\n    queryKey: [\"/api/plans\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-indigo-900\">\n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"text-center mb-16\">\n            <div className=\"h-12 bg-gray-700 rounded animate-pulse mb-4 max-w-md mx-auto\" />\n            <div className=\"h-6 bg-gray-700 rounded animate-pulse max-w-2xl mx-auto\" />\n          </div>\n          <div className=\"grid gap-8 md:grid-cols-3\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-96 bg-gray-700 rounded-lg animate-pulse\" />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getPlanIcon = (planName: string) => {\n    if (planName.toLowerCase().includes('premium')) return Crown;\n    if (planName.toLowerCase().includes('basic')) return Zap;\n    return Music;\n  };\n\n  const getPlanColor = (planName: string) => {\n    if (planName.toLowerCase().includes('premium')) return 'from-yellow-600 to-orange-600';\n    if (planName.toLowerCase().includes('basic')) return 'from-purple-600 to-indigo-600';\n    return 'from-green-600 to-teal-600';\n  };\n\n  const formatPrice = (price: string) => {\n    const num = parseFloat(price);\n    return num === 0 ? 'Free' : `$${num}`;\n  };\n\n  const getFeatures = (plan: SubscriptionPlan): string[] => {\n    if (!plan.features) return [];\n    if (typeof plan.features === 'string') {\n      try {\n        return JSON.parse(plan.features);\n      } catch {\n        return (plan.features as string).split('\\n').map((f: string) => f.replace('• ', '').trim()).filter(Boolean);\n      }\n    }\n    return Array.isArray(plan.features) ? plan.features : [];\n  };\n\n  return (\n    <div className=\"min-h-screen text-white\">\n      {/* Header */}\n      <Header currentPage=\"pricing\" />\n\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-indigo-900\">\n\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6\">\n            Choose Your <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400\">Creative Plan</span>\n          </h1>\n          <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n            Unlock the power of AI music generation with our flexible subscription plans. \n            Create amazing music that fits your needs and budget.\n          </p>\n        </div>\n\n        {/* Pricing Cards */}\n        <div className=\"grid gap-8 md:grid-cols-3 max-w-6xl mx-auto\">\n          {plans.map((plan) => {\n            const IconComponent = getPlanIcon(plan.name);\n            const gradientColor = getPlanColor(plan.name);\n            const features = getFeatures(plan);\n            const isPopular = plan.name.toLowerCase().includes('basic');\n            \n            return (\n              <Card \n                key={plan.id}\n                className={`bg-gray-800/50 border-gray-700 backdrop-blur-sm relative h-[750px] grid grid-rows-[auto_1fr_auto] ${\n                  isPopular ? 'ring-2 ring-purple-500' : ''\n                }`}\n                data-testid={`card-plan-${plan.name.toLowerCase()}`}\n              >\n                {isPopular && (\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 z-10\">\n                    <span className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white px-3 py-1 rounded-full text-xs font-medium\">\n                      Most Popular\n                    </span>\n                  </div>\n                )}\n                \n                <CardHeader className=\"text-center pb-8\">\n                  <div className={`w-16 h-16 mx-auto rounded-full bg-gradient-to-r ${gradientColor} flex items-center justify-center mb-4`}>\n                    <IconComponent className=\"w-8 h-8 text-white\" />\n                  </div>\n                  \n                  <CardTitle className=\"text-2xl font-bold text-white mb-2\">\n                    {plan.name}\n                  </CardTitle>\n                  \n                  <CardDescription className=\"text-gray-400 text-base mb-4\">\n                    {plan.description ? plan.description.split('\\n')[0].replace('• ', '') : ''}\n                  </CardDescription>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"text-4xl font-bold text-white mb-2\">\n                      {formatPrice(plan.monthlyPrice || '0')}\n                      {parseFloat(plan.monthlyPrice || '0') > 0 && (\n                        <span className=\"text-lg text-gray-400 font-normal\">/month</span>\n                      )}\n                    </div>\n                    {parseFloat(plan.yearlyPrice || '0') > 0 && (\n                      <div className=\"text-sm text-gray-400\">\n                        or {formatPrice(plan.yearlyPrice || '0')} yearly\n                        <span className=\"text-green-400 ml-1\">\n                          (Save {Math.round((1 - (parseFloat(plan.yearlyPrice || '0') / (parseFloat(plan.monthlyPrice || '0') * 12))) * 100)}%)\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"overflow-y-auto\">\n                  <ul className=\"space-y-3\">\n                    {features.map((feature, index) => (\n                      <li key={index} className=\"flex items-start\">\n                        <Check className=\"w-5 h-5 text-green-400 mt-0.5 mr-3 flex-shrink-0\" />\n                        <span className=\"text-gray-300\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n                \n                {/* Button Footer - Grid Row */}\n                <div className=\"p-6 bg-gray-800/30 border-t border-gray-700\">\n                  <Button \n                    className={`w-full bg-gradient-to-r ${gradientColor} hover:opacity-90 text-white font-medium py-3`}\n                    data-testid={`button-select-${plan.name.toLowerCase()}`}\n                  >\n                    {plan.name === 'Free' ? 'Get Started Free' : `Choose ${plan.name}`}\n                  </Button>\n                  \n                  <div className=\"h-8 flex items-center justify-center mt-3\">\n                    {plan.name !== 'Free' && (\n                      <p className=\"text-xs text-gray-500 text-center\">\n                        Cancel anytime. No hidden fees.\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* FAQ or Additional Info */}\n        <div className=\"mt-16 text-center\">\n          <h3 className=\"text-2xl font-bold text-white mb-4\">Need Help Choosing?</h3>\n          <p className=\"text-gray-300 mb-6\">\n            All plans include access to our AI music generation technology. \n            Upgrade or downgrade anytime as your needs change.\n          </p>\n          <div className=\"flex justify-center space-x-4\">\n            <Button \n              variant=\"outline\" \n              className=\"border-gray-600 text-gray-300 hover:bg-gray-800 hover:text-white bg-transparent\"\n              data-testid=\"button-contact-support\"\n            >\n              Contact Support\n            </Button>\n            <Link href=\"/\">\n              <Button \n                variant=\"outline\" \n                className=\"border-gray-600 text-gray-300 hover:bg-gray-800 hover:text-white bg-transparent\"\n                data-testid=\"button-try-demo\"\n              >\n                Try Demo\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8474},"client/src/pages/privacy.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Header } from \"@/components/Header\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function Privacy() {\n  return (\n    <div className=\"min-h-screen text-white\">\n      <Header currentPage=\"privacy\" />\n      \n      {/* Page Header */}\n      <header className=\"bg-music-secondary border-b border-gray-800\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => window.history.back()}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back\n              </Button>\n              <h1 className=\"text-3xl font-bold text-white\">Privacy Policy</h1>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card className=\"bg-music-secondary border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl text-music-blue\">NuMusic Privacy Policy</CardTitle>\n            <p className=\"text-gray-300\">Last updated: {new Date().toLocaleDateString()}</p>\n          </CardHeader>\n          <CardContent className=\"prose prose-invert max-w-none space-y-6\">\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">1. Information We Collect</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  When you use NuMusic, we collect information that you provide directly to us, including:\n                </p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>Account information (email address, username, password)</li>\n                  <li>Music generation inputs (text prompts, lyrics, audio files)</li>\n                  <li>Generated music tracks and associated metadata</li>\n                  <li>Usage preferences and settings</li>\n                  <li>Payment information (processed securely through Stripe)</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">2. How We Use Your Information</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>We use the information we collect to:</p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>Provide and improve our AI music generation services</li>\n                  <li>Process your music generation requests</li>\n                  <li>Manage your account and subscription</li>\n                  <li>Communicate with you about your account and our services</li>\n                  <li>Ensure platform security and prevent fraud</li>\n                  <li>Comply with legal obligations</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">3. Information Sharing and Disclosure</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  We do not sell, trade, or rent your personal information. We may share your information only in the following circumstances:\n                </p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>With your explicit consent</li>\n                  <li>To comply with legal requirements or court orders</li>\n                  <li>To protect our rights, property, or safety, or that of our users</li>\n                  <li>With service providers who assist in our operations (subject to confidentiality agreements)</li>\n                  <li>Public tracks you choose to share are visible to all users in the community gallery</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">4. Data Storage and Security</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  We implement appropriate technical and organizational measures to protect your personal information:\n                </p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>Encrypted data transmission and storage</li>\n                  <li>Secure password hashing using industry standards</li>\n                  <li>Regular security audits and updates</li>\n                  <li>Limited access to personal data on a need-to-know basis</li>\n                  <li>Secure cloud infrastructure with backup and recovery systems</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">5. Your Rights and Choices</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>You have the right to:</p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>Access, update, or delete your personal information</li>\n                  <li>Control the visibility of your generated tracks (public/private)</li>\n                  <li>Export your data in a machine-readable format</li>\n                  <li>Opt out of promotional communications</li>\n                  <li>Request deletion of your account and associated data</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">6. AI-Generated Content</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  Regarding music generated through our AI services:\n                </p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>You retain ownership rights to tracks you generate</li>\n                  <li>AI models may learn from aggregated, anonymized usage patterns</li>\n                  <li>We do not use your specific content to train AI models without consent</li>\n                  <li>Generated content is subject to our Terms of Service</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">7. Cookies and Tracking</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  We use essential cookies and similar technologies to:\n                </p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>Maintain your login session</li>\n                  <li>Remember your preferences</li>\n                  <li>Ensure platform security</li>\n                  <li>Analyze usage patterns to improve our services</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">8. Changes to This Policy</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  We may update this Privacy Policy from time to time. We will notify you of any material changes by posting the updated policy on our website and updating the \"Last updated\" date at the top of this policy.\n                </p>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">9. Contact Us</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  If you have any questions about this Privacy Policy or our data practices, please contact us at:\n                </p>\n                <div className=\"bg-music-dark p-4 rounded-lg border border-gray-600\">\n                  <p className=\"font-medium\">NuMusic Support</p>\n                  <p>Email: privacy@numusic.app</p>\n                  <p>Website: numusic.app</p>\n                </div>\n              </div>\n            </section>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":8271},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Header } from \"@/components/Header\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  User, \n  Settings, \n  CreditCard, \n  Shield, \n  Music,\n  Crown,\n  Mail,\n  Key,\n  ChevronRight,\n  LogOut\n} from \"lucide-react\";\nimport type { SubscriptionPlan } from \"@shared/schema\";\n\nexport default function ProfilePage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Form states\n  const [emailData, setEmailData] = useState({\n    newEmail: (user as any)?.email || \"\",\n  });\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n\n  // Fetch subscription plans\n  const { data: plans = [] } = useQuery<SubscriptionPlan[]>({\n    queryKey: [\"/api/plans\"],\n  });\n\n  // Update email mutation\n  const updateEmailMutation = useMutation({\n    mutationFn: async (data: { newEmail: string }) => {\n      const response = await apiRequest(\"PUT\", \"/api/user/email\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Email updated successfully\",\n        description: \"Your email address has been changed.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update email\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update password mutation\n  const updatePasswordMutation = useMutation({\n    mutationFn: async (data: { currentPassword: string; newPassword: string }) => {\n      const response = await apiRequest(\"PUT\", \"/api/user/password\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      setPasswordData({\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\",\n      });\n      toast({\n        title: \"Password updated successfully\",\n        description: \"Your password has been changed.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update password\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateEmail = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (emailData.newEmail === (user as any)?.email) {\n      toast({\n        title: \"No changes made\",\n        description: \"The email address is the same as your current email.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateEmailMutation.mutate({ newEmail: emailData.newEmail });\n  };\n\n  const handleUpdatePassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"New password and confirmation don't match.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (passwordData.newPassword.length < 8) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 8 characters long.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updatePasswordMutation.mutate({\n      currentPassword: passwordData.currentPassword,\n      newPassword: passwordData.newPassword,\n    });\n  };\n\n  const getCurrentPlan = () => {\n    return plans.find(plan => plan.name === \"Free\") || plans[0]; // Default to Free plan\n  };\n\n  const currentPlan = getCurrentPlan();\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-music-dark text-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Please sign in to access your profile</h1>\n          <Button onClick={() => window.location.href = \"/auth\"}>\n            Sign In\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-music-dark text-white\">\n      <Header currentPage=\"profile\" />\n\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        {/* Profile Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Account Settings</h1>\n          <p className=\"text-gray-400\">Manage your account, subscription, and preferences</p>\n        </div>\n\n        <div className=\"grid gap-6\">\n          {/* Profile Information */}\n          <Card className=\"bg-music-secondary border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <User className=\"mr-2 h-5 w-5 text-music-accent\" />\n                Profile Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-300\">First Name</label>\n                  <div className=\"mt-1 text-white bg-music-dark px-3 py-2 rounded-md border border-gray-600\">\n                    {(user as any)?.firstName || 'Not set'}\n                  </div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-300\">Last Name</label>\n                  <div className=\"mt-1 text-white bg-music-dark px-3 py-2 rounded-md border border-gray-600\">\n                    {(user as any)?.lastName || 'Not set'}\n                  </div>\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-gray-300\">Current Email</label>\n                <div className=\"mt-1 text-white bg-music-dark px-3 py-2 rounded-md border border-gray-600 flex items-center\">\n                  <Mail className=\"mr-2 h-4 w-4 text-gray-400\" />\n                  {(user as any)?.email || 'Not set'}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Current Subscription */}\n          <Card className=\"bg-music-secondary border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Crown className=\"mr-2 h-5 w-5 text-music-accent\" />\n                Current Subscription\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {currentPlan ? (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-white\">{currentPlan.name} Plan</h3>\n                      <p className=\"text-gray-400\">{currentPlan.description}</p>\n                    </div>\n                    <Badge \n                      variant={currentPlan.name === \"Free\" ? \"secondary\" : \"default\"}\n                      className={currentPlan.name === \"Free\" \n                        ? \"bg-gray-600 text-gray-200\" \n                        : \"bg-gradient-to-r from-music-purple to-music-blue text-white\"\n                      }\n                    >\n                      {currentPlan.name}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Monthly Generations:</span>\n                      <span className=\"text-white font-medium\">{currentPlan.maxGenerations}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Monthly Price:</span>\n                      <span className=\"text-white font-medium\">\n                        {(currentPlan.monthlyPrice && parseFloat(currentPlan.monthlyPrice) > 0) ? `$${currentPlan.monthlyPrice}/mo` : \"Free\"}\n                      </span>\n                    </div>\n                  </div>\n\n                  <Separator className=\"bg-gray-600\" />\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-400\">Want to upgrade or downgrade your plan?</p>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      className=\"border-music-accent text-music-accent hover:bg-music-accent hover:text-white\"\n                      onClick={() => window.location.href = \"/pricing\"}\n                      data-testid=\"button-manage-subscription\"\n                    >\n                      <CreditCard className=\"mr-2 h-4 w-4\" />\n                      Change Plan\n                      <ChevronRight className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <p className=\"text-gray-400\">No subscription information available</p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Update Email */}\n          <Card className=\"bg-music-secondary border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Mail className=\"mr-2 h-5 w-5 text-music-blue\" />\n                Update Email Address\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleUpdateEmail} className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-300\">New Email Address</label>\n                  <Input\n                    type=\"email\"\n                    value={emailData.newEmail}\n                    onChange={(e) => setEmailData({ newEmail: e.target.value })}\n                    className=\"mt-1 bg-music-dark border-gray-600 text-white\"\n                    required\n                    data-testid=\"input-new-email\"\n                  />\n                </div>\n                <Button\n                  type=\"submit\"\n                  disabled={updateEmailMutation.isPending}\n                  className=\"bg-music-blue hover:bg-blue-600\"\n                  data-testid=\"button-update-email\"\n                >\n                  {updateEmailMutation.isPending ? \"Updating...\" : \"Update Email\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Update Password */}\n          <Card className=\"bg-music-secondary border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Key className=\"mr-2 h-5 w-5 text-music-green\" />\n                Update Password\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleUpdatePassword} className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-300\">Current Password</label>\n                  <Input\n                    type=\"password\"\n                    value={passwordData.currentPassword}\n                    onChange={(e) => setPasswordData({ ...passwordData, currentPassword: e.target.value })}\n                    className=\"mt-1 bg-music-dark border-gray-600 text-white\"\n                    required\n                    data-testid=\"input-current-password\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-300\">New Password</label>\n                  <Input\n                    type=\"password\"\n                    value={passwordData.newPassword}\n                    onChange={(e) => setPasswordData({ ...passwordData, newPassword: e.target.value })}\n                    className=\"mt-1 bg-music-dark border-gray-600 text-white\"\n                    required\n                    minLength={8}\n                    data-testid=\"input-new-password\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-300\">Confirm New Password</label>\n                  <Input\n                    type=\"password\"\n                    value={passwordData.confirmPassword}\n                    onChange={(e) => setPasswordData({ ...passwordData, confirmPassword: e.target.value })}\n                    className=\"mt-1 bg-music-dark border-gray-600 text-white\"\n                    required\n                    minLength={8}\n                    data-testid=\"input-confirm-password\"\n                  />\n                </div>\n                <Button\n                  type=\"submit\"\n                  disabled={updatePasswordMutation.isPending}\n                  className=\"bg-music-green hover:bg-green-600\"\n                  data-testid=\"button-update-password\"\n                >\n                  {updatePasswordMutation.isPending ? \"Updating...\" : \"Update Password\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Account Security */}\n          <Card className=\"bg-music-secondary border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Shield className=\"mr-2 h-5 w-5 text-music-purple\" />\n                Account Security\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium text-white\">Login Sessions</h4>\n                  <p className=\"text-sm text-gray-400\">Manage your active login sessions</p>\n                </div>\n                <Button variant=\"outline\" size=\"sm\" className=\"border-gray-600 text-gray-300\">\n                  View Sessions\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14246},"client/src/pages/terms.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Header } from \"@/components/Header\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function Terms() {\n  return (\n    <div className=\"min-h-screen text-white\">\n      <Header currentPage=\"terms\" />\n      \n      {/* Page Header */}\n      <header className=\"bg-music-secondary border-b border-gray-800\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => window.history.back()}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back\n              </Button>\n              <h1 className=\"text-3xl font-bold text-white\">Terms of Service</h1>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card className=\"bg-music-secondary border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl text-music-blue\">NuMusic Terms of Service</CardTitle>\n            <p className=\"text-gray-300\">Last updated: {new Date().toLocaleDateString()}</p>\n          </CardHeader>\n          <CardContent className=\"prose prose-invert max-w-none space-y-6\">\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">1. Acceptance of Terms</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  By accessing and using NuMusic (\"the Service\"), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\n                </p>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">2. Description of Service</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  NuMusic is an AI-powered music generation platform that allows users to:\n                </p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>Generate music from text prompts and lyrics</li>\n                  <li>Transform existing audio files using AI</li>\n                  <li>Create and manage a personal music library</li>\n                  <li>Share tracks publicly in the community gallery</li>\n                  <li>Access subscription-based features and enhanced capabilities</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">3. User Accounts</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>To access our services, you must:</p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>Provide accurate, current, and complete account information</li>\n                  <li>Maintain and update your account information</li>\n                  <li>Keep your password secure and confidential</li>\n                  <li>Be responsible for all activities under your account</li>\n                  <li>Notify us immediately of any unauthorized access</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">4. Subscription Plans and Billing</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>NuMusic offers the following subscription tiers:</p>\n                <div className=\"bg-music-dark p-4 rounded-lg border border-gray-600 my-4\">\n                  <ul className=\"space-y-2\">\n                    <li><strong>Free Plan:</strong> Up to 5 songs per month, standard quality, public sharing only</li>\n                    <li><strong>Basic Plan:</strong> Up to 30 songs per month, high quality, private/public sharing ($9/month or $90/year)</li>\n                    <li><strong>Premium Plan:</strong> Up to 200 songs per month, ultra-high quality, priority generation, commercial license ($19/month or $190/year)</li>\n                  </ul>\n                </div>\n                <p>\n                  Subscription fees are billed in advance and are non-refundable except as required by law. You may cancel your subscription at any time through your account settings.\n                </p>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">5. Acceptable Use Policy</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>You agree not to use the Service to:</p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>Generate content that infringes copyright, trademark, or other intellectual property rights</li>\n                  <li>Create music that contains hate speech, harassment, or discriminatory content</li>\n                  <li>Violate any applicable laws or regulations</li>\n                  <li>Attempt to reverse engineer, hack, or compromise the Service</li>\n                  <li>Share account credentials or circumvent usage limits</li>\n                  <li>Generate excessive requests that could impact service performance</li>\n                  <li>Use the Service for any commercial purpose without appropriate licensing</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">6. Intellectual Property Rights</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p><strong>Your Content:</strong></p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>You retain ownership of music you generate using our Service</li>\n                  <li>You grant us a limited license to process and store your content</li>\n                  <li>Public tracks may be displayed in our community gallery</li>\n                  <li>You are responsible for ensuring your inputs don't infringe third-party rights</li>\n                </ul>\n                <p><strong>Our Service:</strong></p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>NuMusic retains all rights to the platform, AI models, and technology</li>\n                  <li>You may not copy, modify, or distribute our software or algorithms</li>\n                  <li>Our trademarks and branding remain our exclusive property</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">7. Commercial Licensing</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  Commercial use of generated music is subject to your subscription plan:\n                </p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li><strong>Free & Basic Plans:</strong> Personal use only, no commercial licensing</li>\n                  <li><strong>Premium Plan:</strong> Includes commercial license for generated content</li>\n                  <li>For extensive commercial use, contact us for enterprise licensing options</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">8. Service Availability</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  While we strive for high availability, we do not guarantee uninterrupted service. The Service may be temporarily unavailable due to:\n                </p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>Scheduled maintenance and updates</li>\n                  <li>Technical issues or server problems</li>\n                  <li>Third-party service dependencies</li>\n                  <li>Extraordinary circumstances beyond our control</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">9. Limitation of Liability</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  To the maximum extent permitted by law, NuMusic shall not be liable for any indirect, incidental, special, consequential, or punitive damages, including but not limited to:\n                </p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>Loss of data or generated content</li>\n                  <li>Business interruption or lost profits</li>\n                  <li>Cost of substitute services</li>\n                  <li>Any damages arising from use of the Service</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">10. Privacy and Data Protection</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  Your privacy is important to us. Our collection and use of personal information is governed by our Privacy Policy, which is incorporated into these Terms by reference.\n                </p>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">11. Termination</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  Either party may terminate this agreement at any time:\n                </p>\n                <ul className=\"list-disc pl-6 space-y-1\">\n                  <li>You may delete your account through your account settings</li>\n                  <li>We may suspend or terminate accounts for Terms violations</li>\n                  <li>Upon termination, your access to the Service will cease</li>\n                  <li>We will retain your data according to our Privacy Policy</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">12. Changes to Terms</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  We reserve the right to modify these Terms at any time. We will notify users of material changes via email or through the Service. Continued use after changes constitutes acceptance of the new Terms.\n                </p>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold text-white mb-3\">13. Contact Information</h2>\n              <div className=\"text-gray-300 space-y-3\">\n                <p>\n                  For questions about these Terms, please contact us:\n                </p>\n                <div className=\"bg-music-dark p-4 rounded-lg border border-gray-600\">\n                  <p className=\"font-medium\">NuMusic Legal Team</p>\n                  <p>Email: legal@numusic.app</p>\n                  <p>Website: numusic.app</p>\n                </div>\n              </div>\n            </section>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":11472},"client/src/components/admin/AdminDashboardContent.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, Music, Eye, EyeOff, TrendingUp, UserPlus } from \"lucide-react\";\n\ninterface DashboardStats {\n  totalUsers: number;\n  totalGenerations: number;\n  publicTracks: number;\n  privateTracks: number;\n  newUsersToday: number;\n  generationsToday: number;\n}\n\nexport function AdminDashboardContent() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/admin/dashboard/stats\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-800 rounded-lg\" />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const statCards = [\n    {\n      title: \"Total Users\",\n      value: stats?.totalUsers || 0,\n      icon: Users,\n      description: \"Registered users\",\n      color: \"text-blue-400\",\n    },\n    {\n      title: \"Total Generations\",\n      value: stats?.totalGenerations || 0,\n      icon: Music,\n      description: \"Music tracks created\",\n      color: \"text-purple-400\",\n    },\n    {\n      title: \"Public Tracks\",\n      value: stats?.publicTracks || 0,\n      icon: Eye,\n      description: \"Publicly visible\",\n      color: \"text-green-400\",\n    },\n    {\n      title: \"Private Tracks\",\n      value: stats?.privateTracks || 0,\n      icon: EyeOff,\n      description: \"User private tracks\",\n      color: \"text-yellow-400\",\n    },\n    {\n      title: \"New Users Today\",\n      value: stats?.newUsersToday || 0,\n      icon: UserPlus,\n      description: \"Users joined today\",\n      color: \"text-cyan-400\",\n    },\n    {\n      title: \"Generations Today\",\n      value: stats?.generationsToday || 0,\n      icon: TrendingUp,\n      description: \"Tracks created today\",\n      color: \"text-pink-400\",\n    },\n  ];\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold text-white\">Dashboard</h1>\n        <p className=\"text-gray-400 mt-2\">\n          Welcome to the NuMusic admin dashboard\n        </p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {statCards.map((stat) => {\n          const Icon = stat.icon;\n          return (\n            <Card key={stat.title} className=\"bg-gray-900 border-gray-800\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-gray-400\">\n                  {stat.title}\n                </CardTitle>\n                <Icon className={`h-4 w-4 ${stat.color}`} />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">\n                  {stat.value.toLocaleString()}\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {stat.description}\n                </p>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Activity Overview */}\n      <Card className=\"bg-gray-900 border-gray-800\">\n        <CardHeader>\n          <CardTitle className=\"text-white\">Platform Overview</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-400\">Public vs Private Tracks</span>\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-green-400\">\n                  {stats?.publicTracks || 0} public\n                </span>\n                <span className=\"text-yellow-400\">\n                  {stats?.privateTracks || 0} private\n                </span>\n              </div>\n            </div>\n            <div className=\"w-full bg-gray-800 rounded-full h-2\">\n              <div\n                className=\"bg-green-400 h-2 rounded-full\"\n                style={{\n                  width: `${\n                    stats?.totalGenerations\n                      ? (stats.publicTracks / stats.totalGenerations) * 100\n                      : 0\n                  }%`,\n                }}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card className=\"bg-gray-900 border-gray-800\">\n        <CardHeader>\n          <CardTitle className=\"text-white\">Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <button \n              className=\"p-4 bg-gray-800 hover:bg-gray-700 rounded-lg text-left transition-colors\"\n              onClick={() => window.location.href = '/admin/users'}\n              data-testid=\"quick-action-users\"\n            >\n              <Users className=\"h-8 w-8 text-blue-400 mb-2\" />\n              <h3 className=\"font-medium text-white\">Manage Users</h3>\n              <p className=\"text-sm text-gray-400\">Add, edit, or remove admin users</p>\n            </button>\n            <button \n              className=\"p-4 bg-gray-800 hover:bg-gray-700 rounded-lg text-left transition-colors\"\n              onClick={() => window.location.href = '/admin/plans'}\n              data-testid=\"quick-action-plans\"\n            >\n              <Music className=\"h-8 w-8 text-purple-400 mb-2\" />\n              <h3 className=\"font-medium text-white\">Subscription Plans</h3>\n              <p className=\"text-sm text-gray-400\">Configure pricing and features</p>\n            </button>\n            <button \n              className=\"p-4 bg-gray-800 hover:bg-gray-700 rounded-lg text-left transition-colors\"\n              onClick={() => window.location.href = '/admin/tracks'}\n              data-testid=\"quick-action-tracks\"\n            >\n              <Eye className=\"h-8 w-8 text-green-400 mb-2\" />\n              <h3 className=\"font-medium text-white\">Music Tracks</h3>\n              <p className=\"text-sm text-gray-400\">View and moderate user content</p>\n            </button>\n            <button \n              className=\"p-4 bg-gray-800 hover:bg-gray-700 rounded-lg text-left transition-colors\"\n              onClick={() => window.location.href = '/admin/settings'}\n              data-testid=\"quick-action-settings\"\n            >\n              <TrendingUp className=\"h-8 w-8 text-pink-400 mb-2\" />\n              <h3 className=\"font-medium text-white\">Site Settings</h3>\n              <p className=\"text-sm text-gray-400\">Configure platform settings</p>\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6829},"client/src/components/admin/AdminMusicTracks.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { AudioPlayer } from \"@/components/ui/audio-player\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Music, Eye, EyeOff, Search, Filter, WandSparkles, AudioWaveform, Edit3, Check, X, Download, Trash2 } from \"lucide-react\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport type { MusicGeneration } from \"@shared/schema\";\n\nexport function AdminMusicTracks() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [visibilityFilter, setVisibilityFilter] = useState<string>(\"all\");\n  const [editingTitle, setEditingTitle] = useState<string | null>(null);\n  const [editTitleValue, setEditTitleValue] = useState(\"\");\n\n  // Fetch all music tracks\n  const { data: tracks, isLoading } = useQuery({\n    queryKey: [\"/api/admin/tracks\"],\n    retry: false,\n  });\n\n  // Toggle gallery visibility mutation\n  const toggleGalleryMutation = useMutation({\n    mutationFn: async ({ trackId, showInGallery }: { trackId: string; showInGallery: boolean }) => {\n      const response = await apiRequest(`/api/admin/tracks/${trackId}/gallery-visibility`, \"PATCH\", {\n        showInGallery,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/tracks\"] });\n      toast({\n        title: \"Track Updated\",\n        description: \"Gallery visibility has been updated.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update track visibility.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update title mutation\n  const updateTitleMutation = useMutation({\n    mutationFn: async ({ trackId, title }: { trackId: string; title: string }) => {\n      const response = await apiRequest(`/api/admin/tracks/${trackId}/title`, \"PATCH\", {\n        title,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/tracks\"] });\n      setEditingTitle(null);\n      setEditTitleValue(\"\");\n      toast({\n        title: \"Track Updated\",\n        description: \"Track title has been updated.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update track title.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete track mutation\n  const deleteTrackMutation = useMutation({\n    mutationFn: async (trackId: string) => {\n      await apiRequest(`/api/admin/tracks/${trackId}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/tracks\"] });\n      toast({\n        title: \"Track Deleted\",\n        description: \"Track has been permanently deleted.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Failed to delete track.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToggleGallery = (trackId: string, currentValue: boolean) => {\n    toggleGalleryMutation.mutate({\n      trackId,\n      showInGallery: !currentValue,\n    });\n  };\n\n  const handleStartEditTitle = (trackId: string, currentTitle: string) => {\n    setEditingTitle(trackId);\n    setEditTitleValue(currentTitle || \"\");\n  };\n\n  const handleSaveTitle = (trackId: string) => {\n    if (editTitleValue.trim().length === 0) {\n      toast({\n        title: \"Invalid Title\",\n        description: \"Title cannot be empty.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editTitleValue.length > 100) {\n      toast({\n        title: \"Invalid Title\",\n        description: \"Title must be 100 characters or less.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateTitleMutation.mutate({\n      trackId,\n      title: editTitleValue.trim(),\n    });\n  };\n\n  const handleCancelEditTitle = () => {\n    setEditingTitle(null);\n    setEditTitleValue(\"\");\n  };\n\n  // Download track function\n  const handleDownloadTrack = async (track: MusicGeneration) => {\n    if (!track.audioUrl || track.status !== \"completed\") {\n      toast({\n        title: \"Download Failed\",\n        description: \"Track is not ready for download.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Create a temporary anchor element to trigger download\n      const link = document.createElement('a');\n      link.href = track.audioUrl;\n      link.download = `${track.title || 'Untitled Track'}.mp3`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      toast({\n        title: \"Download Started\",\n        description: `Downloading \"${track.title || 'Untitled Track'}\"...`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download the track.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteTrack = (trackId: string) => {\n    deleteTrackMutation.mutate(trackId);\n  };\n\n  // Filter tracks based on search and filters\n  const filteredTracks = (tracks as MusicGeneration[] || []).filter((track: MusicGeneration) => {\n    const matchesSearch = !searchQuery || \n      track.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      track.tags?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || track.status === statusFilter;\n    const matchesVisibility = visibilityFilter === \"all\" || track.visibility === visibilityFilter;\n    \n    return matchesSearch && matchesStatus && matchesVisibility;\n  });\n\n  const publicTracks = filteredTracks.filter(track => track.visibility === \"public\");\n  const galleryVisibleTracks = publicTracks.filter(track => track.showInGallery);\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-white\">Loading music tracks...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-white mb-2\">Music Tracks</h1>\n          <p className=\"text-gray-400\">\n            Manage user-generated music tracks and gallery visibility\n          </p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Music className=\"h-4 w-4 text-blue-400\" />\n              <div>\n                <p className=\"text-sm text-gray-400\">Total Tracks</p>\n                <p className=\"text-xl font-bold text-white\">{(tracks as MusicGeneration[] || []).length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Eye className=\"h-4 w-4 text-green-400\" />\n              <div>\n                <p className=\"text-sm text-gray-400\">Public Tracks</p>\n                <p className=\"text-xl font-bold text-white\">{publicTracks.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Filter className=\"h-4 w-4 text-purple-400\" />\n              <div>\n                <p className=\"text-sm text-gray-400\">Gallery Visible</p>\n                <p className=\"text-xl font-bold text-white\">{galleryVisibleTracks.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <EyeOff className=\"h-4 w-4 text-yellow-400\" />\n              <div>\n                <p className=\"text-sm text-gray-400\">Hidden from Gallery</p>\n                <p className=\"text-xl font-bold text-white\">{publicTracks.length - galleryVisibleTracks.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <Label htmlFor=\"search\" className=\"text-gray-400 mb-2 block\">Search</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search by title or tags...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 bg-gray-700 border-gray-600 text-white\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"status-filter\" className=\"text-gray-400 mb-2 block\">Status</Label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"bg-gray-700 border-gray-600 text-white\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"generating\">Generating</SelectItem>\n                  <SelectItem value=\"failed\">Failed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"visibility-filter\" className=\"text-gray-400 mb-2 block\">Visibility</Label>\n              <Select value={visibilityFilter} onValueChange={setVisibilityFilter}>\n                <SelectTrigger className=\"bg-gray-700 border-gray-600 text-white\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Visibility</SelectItem>\n                  <SelectItem value=\"public\">Public</SelectItem>\n                  <SelectItem value=\"private\">Private</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tracks List */}\n      <div className=\"space-y-4\">\n        {filteredTracks.length === 0 ? (\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardContent className=\"p-8 text-center\">\n              <Music className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-white mb-2\">No tracks found</h3>\n              <p className=\"text-gray-400\">No tracks match your current filters.</p>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredTracks.map((track: MusicGeneration) => (\n            <Card key={track.id} className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-start space-x-4 flex-1\">\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n                      {track.type === \"text-to-music\" ? (\n                        <WandSparkles className=\"w-5 h-5 text-white\" />\n                      ) : (\n                        <AudioWaveform className=\"w-5 h-5 text-white\" />\n                      )}\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        {/* Editable Title */}\n                        <div className=\"flex items-center space-x-2 flex-1\">\n                          {editingTitle === track.id ? (\n                            <div className=\"flex items-center space-x-2 flex-1\">\n                              <Input\n                                value={editTitleValue}\n                                onChange={(e) => setEditTitleValue(e.target.value)}\n                                onKeyDown={(e) => {\n                                  if (e.key === 'Enter') {\n                                    handleSaveTitle(track.id);\n                                  } else if (e.key === 'Escape') {\n                                    handleCancelEditTitle();\n                                  }\n                                }}\n                                className=\"bg-gray-700 border-gray-600 text-white flex-1\"\n                                placeholder=\"Enter track title\"\n                                autoFocus\n                                data-testid={`input-edit-title-${track.id}`}\n                              />\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => handleSaveTitle(track.id)}\n                                disabled={updateTitleMutation.isPending}\n                                className=\"text-green-400 hover:text-green-300\"\n                                data-testid={`button-save-title-${track.id}`}\n                              >\n                                <Check className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={handleCancelEditTitle}\n                                disabled={updateTitleMutation.isPending}\n                                className=\"text-red-400 hover:text-red-300\"\n                                data-testid={`button-cancel-title-${track.id}`}\n                              >\n                                <X className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          ) : (\n                            <div className=\"flex items-center space-x-2 group\">\n                              <h3 className=\"text-lg font-semibold text-white\">\n                                {track.title || \"Untitled Track\"}\n                              </h3>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => handleStartEditTitle(track.id, track.title || \"\")}\n                                className=\"opacity-0 group-hover:opacity-100 transition-opacity text-blue-400 hover:text-blue-300 p-1\"\n                                data-testid={`button-edit-title-${track.id}`}\n                              >\n                                <Edit3 className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Badge \n                            variant={track.status === \"completed\" ? \"default\" : \"secondary\"}\n                            className={\n                              track.status === \"completed\" ? \"bg-green-600\" :\n                              track.status === \"failed\" ? \"bg-red-600\" :\n                              track.status === \"generating\" ? \"bg-yellow-600\" :\n                              \"bg-gray-600\"\n                            }\n                          >\n                            {track.status}\n                          </Badge>\n                          <Badge variant={track.visibility === \"public\" ? \"default\" : \"secondary\"}>\n                            {track.visibility}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-sm text-gray-400 space-y-1\">\n                        <p><strong>Tags:</strong> {track.tags || \"No tags\"}</p>\n                        {track.lyrics && <p><strong>Lyrics:</strong> {track.lyrics.substring(0, 100)}{track.lyrics.length > 100 ? \"...\" : \"\"}</p>}\n                        <p><strong>Created:</strong> {track.createdAt ? new Date(track.createdAt).toLocaleDateString() : \"N/A\"}</p>\n                        {track.duration && <p><strong>Duration:</strong> {track.duration}s</p>}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex items-center space-x-3\">\n                    {/* Download Button */}\n                    {track.audioUrl && track.status === \"completed\" && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleDownloadTrack(track)}\n                        className=\"text-blue-400 hover:text-blue-300 border-blue-400 hover:border-blue-300\"\n                        data-testid={`button-download-${track.id}`}\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download\n                      </Button>\n                    )}\n\n                    {/* Delete Button */}\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"text-red-400 hover:text-red-300 border-red-400 hover:border-red-300\"\n                          data-testid={`button-delete-track-${track.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-2\" />\n                          Delete\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent className=\"bg-gray-900 border-gray-700\">\n                        <AlertDialogHeader>\n                          <AlertDialogTitle className=\"text-white\">Delete Track</AlertDialogTitle>\n                          <AlertDialogDescription className=\"text-gray-400\">\n                            Are you sure you want to delete <strong>\"{track.title || 'Untitled Track'}\"</strong>?\n                            This will permanently remove the track and cannot be undone.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel className=\"bg-gray-700 text-white border-gray-600\">\n                            Cancel\n                          </AlertDialogCancel>\n                          <AlertDialogAction\n                            onClick={() => handleDeleteTrack(track.id)}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                            data-testid={`confirm-delete-track-${track.id}`}\n                          >\n                            Delete Track\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                    \n                    {/* Gallery Visibility Toggle */}\n                    {track.visibility === \"public\" && track.status === \"completed\" && (\n                      <>\n                        <Label htmlFor={`gallery-${track.id}`} className=\"text-sm text-gray-400\">\n                          Show in Gallery\n                        </Label>\n                        <Switch\n                          id={`gallery-${track.id}`}\n                          checked={track.showInGallery}\n                          onCheckedChange={() => handleToggleGallery(track.id, track.showInGallery)}\n                          disabled={toggleGalleryMutation.isPending}\n                        />\n                      </>\n                    )}\n                  </div>\n                </div>\n\n                {/* Audio Player */}\n                {track.audioUrl && track.status === \"completed\" && (\n                  <div className=\"mt-4\">\n                    <AudioPlayer src={track.audioUrl} className=\"w-full\" />\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":21536},"client/src/components/admin/AdminPlanManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Pencil, Plus, Trash2, DollarSign } from \"lucide-react\";\nimport type { SubscriptionPlan } from \"@shared/schema\";\n\ninterface PlanFormData {\n  name: string;\n  description: string;\n  features: string[];\n  monthlyPrice: string;\n  yearlyPrice: string;\n  monthlyPriceId: string;\n  yearlyPriceId: string;\n  maxGenerations: number;\n  generationsNumber: number;\n  sortOrder: number;\n  isActive: boolean;\n}\n\nexport function AdminPlanManagement() {\n  const [editingPlan, setEditingPlan] = useState<SubscriptionPlan | null>(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [formData, setFormData] = useState<PlanFormData>({\n    name: \"\",\n    description: \"\",\n    features: [],\n    monthlyPrice: \"0\",\n    yearlyPrice: \"0\",\n    monthlyPriceId: \"\",\n    yearlyPriceId: \"\",\n    maxGenerations: 5,\n    generationsNumber: 5,\n    sortOrder: 0,\n    isActive: true,\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: plans = [], isLoading } = useQuery<SubscriptionPlan[]>({\n    queryKey: [\"/api/admin/plans\"],\n  });\n\n  const createPlanMutation = useMutation({\n    mutationFn: async (data: PlanFormData) => {\n      return await apiRequest(\"/api/admin/plans\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/plans\"] });\n      setShowCreateDialog(false);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Subscription plan created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create subscription plan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePlanMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: PlanFormData }) => {\n      return await apiRequest(`/api/admin/plans/${id}`, \"PUT\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/plans\"] });\n      setShowEditDialog(false);\n      setEditingPlan(null);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Subscription plan updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update subscription plan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePlanMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/admin/plans/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/plans\"] });\n      toast({\n        title: \"Success\",\n        description: \"Subscription plan deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete subscription plan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      features: [],\n      monthlyPrice: \"0\",\n      yearlyPrice: \"0\",\n      monthlyPriceId: \"\",\n      yearlyPriceId: \"\",\n      maxGenerations: 5,\n      generationsNumber: 5,\n      sortOrder: 0,\n      isActive: true,\n    });\n    setEditingPlan(null);\n  };\n\n  const handleCreatePlan = (e: React.FormEvent) => {\n    e.preventDefault();\n    createPlanMutation.mutate(formData);\n  };\n\n  const handleUpdatePlan = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingPlan) return;\n    updatePlanMutation.mutate({ id: editingPlan.id, data: formData });\n  };\n\n  const handleEditPlan = (plan: SubscriptionPlan) => {\n    setEditingPlan(plan);\n    setFormData({\n      name: plan.name,\n      description: plan.description || \"\",\n      features: Array.isArray(plan.features) ? plan.features : [],\n      monthlyPrice: plan.monthlyPrice || \"0\",\n      yearlyPrice: plan.yearlyPrice || \"0\",\n      monthlyPriceId: plan.monthlyPriceId || \"\",\n      yearlyPriceId: plan.yearlyPriceId || \"\",\n      maxGenerations: plan.maxGenerations || 5,\n      generationsNumber: plan.generationsNumber || 5,\n      sortOrder: plan.sortOrder || 0,\n      isActive: plan.isActive,\n    });\n    setShowEditDialog(true);\n  };\n\n  const handleDeletePlan = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this subscription plan?\")) {\n      deletePlanMutation.mutate(id);\n    }\n  };\n\n  const openCreateDialog = () => {\n    resetForm();\n    setShowCreateDialog(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-4\">\n        <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"h-48 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white\">Subscription Plans</h2>\n          <p className=\"text-gray-400 mt-1\">Manage subscription plans and pricing</p>\n        </div>\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogTrigger asChild>\n            <Button \n              onClick={openCreateDialog}\n              className=\"bg-purple-600 hover:bg-purple-700\" \n              data-testid=\"button-create-plan\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Plan\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"bg-gray-900 border-gray-700 max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle className=\"text-white\">Create Subscription Plan</DialogTitle>\n              <DialogDescription className=\"text-gray-400\">\n                Create a new subscription plan with pricing and features\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleCreatePlan} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Plan Name</label>\n                  <Input \n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                    placeholder=\"Basic, Pro, Premium\"\n                    required\n                    data-testid=\"input-plan-name\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Sort Order</label>\n                  <Input \n                    type=\"number\"\n                    value={formData.sortOrder}\n                    onChange={(e) => setFormData({ ...formData, sortOrder: parseInt(e.target.value) || 0 })}\n                    className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                    placeholder=\"0\"\n                    data-testid=\"input-sort-order\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-gray-200 text-sm font-medium\">Description</label>\n                <Textarea \n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                  placeholder=\"• Feature 1&#10;• Feature 2&#10;• Feature 3\"\n                  rows={4}\n                  data-testid=\"textarea-description\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Monthly Price ($)</label>\n                  <Input \n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.monthlyPrice}\n                    onChange={(e) => setFormData({ ...formData, monthlyPrice: e.target.value })}\n                    className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                    placeholder=\"9.99\"\n                    data-testid=\"input-monthly-price\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Yearly Price ($)</label>\n                  <Input \n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.yearlyPrice}\n                    onChange={(e) => setFormData({ ...formData, yearlyPrice: e.target.value })}\n                    className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                    placeholder=\"99.99\"\n                    data-testid=\"input-yearly-price\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Max Generations</label>\n                  <Input \n                    type=\"number\"\n                    value={formData.maxGenerations}\n                    onChange={(e) => setFormData({ ...formData, maxGenerations: parseInt(e.target.value) || 5 })}\n                    className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                    placeholder=\"5\"\n                    min=\"1\"\n                    data-testid=\"input-max-generations\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Generations Number</label>\n                  <Input \n                    type=\"number\"\n                    value={formData.generationsNumber}\n                    onChange={(e) => setFormData({ ...formData, generationsNumber: parseInt(e.target.value) || 5 })}\n                    className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                    placeholder=\"5\"\n                    min=\"1\"\n                    data-testid=\"input-generations-number\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Monthly Stripe Price ID</label>\n                  <Input \n                    value={formData.monthlyPriceId}\n                    onChange={(e) => setFormData({ ...formData, monthlyPriceId: e.target.value })}\n                    className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                    placeholder=\"price_...\"\n                    data-testid=\"input-monthly-price-id\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Yearly Stripe Price ID</label>\n                  <Input \n                    value={formData.yearlyPriceId}\n                    onChange={(e) => setFormData({ ...formData, yearlyPriceId: e.target.value })}\n                    className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                    placeholder=\"price_...\"\n                    data-testid=\"input-yearly-price-id\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.isActive}\n                    onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n                    className=\"rounded\"\n                    data-testid=\"checkbox-is-active\"\n                  />\n                  <span className=\"text-gray-200\">Active</span>\n                </label>\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowCreateDialog(false)}\n                  className=\"border-gray-600 text-gray-300\"\n                  data-testid=\"button-cancel-create\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createPlanMutation.isPending}\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                  data-testid=\"button-submit-create\"\n                >\n                  {createPlanMutation.isPending ? \"Creating...\" : \"Create Plan\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {plans.map((plan: SubscriptionPlan) => (\n          <Card key={plan.id} className=\"bg-gray-800 border-gray-700\" data-testid={`card-plan-${plan.id}`}>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-white\">{plan.name}</CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => handleEditPlan(plan)}\n                    className=\"h-8 w-8 p-0 text-gray-400 hover:text-white\"\n                    data-testid={`button-edit-${plan.id}`}\n                  >\n                    <Pencil className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => handleDeletePlan(plan.id)}\n                    className=\"h-8 w-8 p-0 text-red-400 hover:text-red-300\"\n                    data-testid={`button-delete-${plan.id}`}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n              <CardDescription className=\"text-gray-400\">\n                Sort Order: {plan.sortOrder} • {plan.isActive ? \"Active\" : \"Inactive\"}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-400 flex items-center\">\n                    <DollarSign className=\"w-4 h-4 mr-1\" />\n                    Monthly\n                  </span>\n                  <span className=\"text-white font-semibold\" data-testid={`text-monthly-price-${plan.id}`}>\n                    ${plan.monthlyPrice}/mo\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-400 flex items-center\">\n                    <DollarSign className=\"w-4 h-4 mr-1\" />\n                    Yearly\n                  </span>\n                  <span className=\"text-white font-semibold\" data-testid={`text-yearly-price-${plan.id}`}>\n                    ${plan.yearlyPrice}/yr\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-400\">Max Generations</span>\n                  <span className=\"text-white font-semibold\" data-testid={`text-max-generations-${plan.id}`}>\n                    {plan.maxGenerations}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-400\">Max Generations</span>\n                  <span className=\"text-white font-semibold\" data-testid={`text-max-generations-${plan.id}`}>\n                    {plan.maxGenerations}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-400\">Generations Number</span>\n                  <span className=\"text-white font-semibold\" data-testid={`text-generations-number-${plan.id}`}>\n                    {plan.generationsNumber}\n                  </span>\n                </div>\n                {plan.description && (\n                  <div className=\"text-sm text-gray-300\">\n                    <div className=\"font-medium mb-1\">Features:</div>\n                    <div className=\"whitespace-pre-line text-xs\">\n                      {plan.description}\n                    </div>\n                  </div>\n                )}\n                {(plan.monthlyPriceId || plan.yearlyPriceId) && (\n                  <div className=\"text-xs text-gray-500 space-y-1\">\n                    {plan.monthlyPriceId && (\n                      <div>Monthly ID: {plan.monthlyPriceId}</div>\n                    )}\n                    {plan.yearlyPriceId && (\n                      <div>Yearly ID: {plan.yearlyPriceId}</div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n        <DialogContent className=\"bg-gray-900 border-gray-700 max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Edit Subscription Plan</DialogTitle>\n            <DialogDescription className=\"text-gray-400\">\n              Update subscription plan details and pricing\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleUpdatePlan} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-gray-200 text-sm font-medium\">Plan Name</label>\n                <Input \n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                  required\n                  data-testid=\"input-edit-plan-name\"\n                />\n              </div>\n              <div>\n                <label className=\"text-gray-200 text-sm font-medium\">Sort Order</label>\n                <Input \n                  type=\"number\"\n                  value={formData.sortOrder}\n                  onChange={(e) => setFormData({ ...formData, sortOrder: parseInt(e.target.value) || 0 })}\n                  className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                  data-testid=\"input-edit-sort-order\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-gray-200 text-sm font-medium\">Description</label>\n              <Textarea \n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                rows={4}\n                data-testid=\"textarea-edit-description\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-gray-200 text-sm font-medium\">Monthly Price ($)</label>\n                <Input \n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.monthlyPrice}\n                  onChange={(e) => setFormData({ ...formData, monthlyPrice: e.target.value })}\n                  className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                  data-testid=\"input-edit-monthly-price\"\n                />\n              </div>\n              <div>\n                <label className=\"text-gray-200 text-sm font-medium\">Yearly Price ($)</label>\n                <Input \n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.yearlyPrice}\n                  onChange={(e) => setFormData({ ...formData, yearlyPrice: e.target.value })}\n                  className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                  data-testid=\"input-edit-yearly-price\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-gray-200 text-sm font-medium\">Max Generations</label>\n                <Input \n                  type=\"number\"\n                  value={formData.maxGenerations}\n                  onChange={(e) => setFormData({ ...formData, maxGenerations: parseInt(e.target.value) || 5 })}\n                  className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                  min=\"1\"\n                  data-testid=\"input-edit-max-generations\"\n                />\n              </div>\n              <div>\n                <label className=\"text-gray-200 text-sm font-medium\">Generations Number</label>\n                <Input \n                  type=\"number\"\n                  value={formData.generationsNumber}\n                  onChange={(e) => setFormData({ ...formData, generationsNumber: parseInt(e.target.value) || 5 })}\n                  className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                  min=\"1\"\n                  data-testid=\"input-edit-generations-number\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-gray-200 text-sm font-medium\">Monthly Stripe Price ID</label>\n                <Input \n                  value={formData.monthlyPriceId}\n                  onChange={(e) => setFormData({ ...formData, monthlyPriceId: e.target.value })}\n                  className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                  data-testid=\"input-edit-monthly-price-id\"\n                />\n              </div>\n              <div>\n                <label className=\"text-gray-200 text-sm font-medium\">Yearly Stripe Price ID</label>\n                <Input \n                  value={formData.yearlyPriceId}\n                  onChange={(e) => setFormData({ ...formData, yearlyPriceId: e.target.value })}\n                  className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                  data-testid=\"input-edit-yearly-price-id\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.isActive}\n                  onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n                  className=\"rounded\"\n                  data-testid=\"checkbox-edit-is-active\"\n                />\n                <span className=\"text-gray-200\">Active</span>\n              </label>\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setShowEditDialog(false)}\n                className=\"border-gray-600 text-gray-300\"\n                data-testid=\"button-cancel-edit\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={updatePlanMutation.isPending}\n                className=\"bg-purple-600 hover:bg-purple-700\"\n                data-testid=\"button-submit-edit\"\n              >\n                {updatePlanMutation.isPending ? \"Updating...\" : \"Update Plan\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {plans.length === 0 && (\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"flex flex-col items-center justify-center py-8\">\n            <DollarSign className=\"w-12 h-12 text-gray-500 mb-4\" />\n            <h3 className=\"text-lg font-semibold text-white mb-2\">No subscription plans</h3>\n            <p className=\"text-gray-400 text-center mb-4\">\n              Get started by creating your first subscription plan\n            </p>\n            <Button \n              onClick={openCreateDialog}\n              className=\"bg-purple-600 hover:bg-purple-700\"\n              data-testid=\"button-create-first-plan\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Your First Plan\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":25207},"client/src/components/admin/AdminSidebar.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAdminAuth } from \"@/hooks/useAdminAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  LayoutDashboard, \n  Users, \n  CreditCard, \n  Settings, \n  Music,\n  LogOut,\n  Menu,\n  X\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigationItems = [\n  { id: \"dashboard\", label: \"Dashboard\", icon: LayoutDashboard, path: \"/admin\" },\n  { id: \"users\", label: \"User Management\", icon: Users, path: \"/admin/users\" },\n  { id: \"plans\", label: \"Subscription Plans\", icon: CreditCard, path: \"/admin/plans\" },\n  { id: \"tracks\", label: \"Music Tracks\", icon: Music, path: \"/admin/tracks\" },\n  { id: \"settings\", label: \"Site Settings\", icon: Settings, path: \"/admin/settings\" },\n];\n\nexport function AdminSidebar() {\n  const [, navigate] = useLocation();\n  const { adminUser, logout } = useAdminAuth();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const currentPath = window.location.pathname;\n\n  const handleLogout = async () => {\n    await logout.mutateAsync();\n    navigate(\"/admin/login\");\n  };\n\n  const handleNavigation = (path: string) => {\n    navigate(path);\n    setIsMobileMenuOpen(false);\n  };\n\n  return (\n    <>\n      {/* Mobile menu button */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"fixed top-4 left-4 z-50 md:hidden bg-gray-900 hover:bg-gray-800 text-white\"\n        onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n        data-testid=\"button-mobile-menu\"\n      >\n        {isMobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n      </Button>\n\n      {/* Overlay */}\n      {isMobileMenuOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40 md:hidden\"\n          onClick={() => setIsMobileMenuOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div\n        className={cn(\n          \"fixed left-0 top-0 z-40 h-full w-64 bg-gray-900 border-r border-gray-800 transform transition-transform duration-200 ease-in-out md:relative md:transform-none\",\n          isMobileMenuOpen ? \"translate-x-0\" : \"-translate-x-full md:translate-x-0\"\n        )}\n      >\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"p-6 border-b border-gray-800\">\n            <h1 className=\"text-xl font-bold text-white\">NuMusic</h1>\n            <p className=\"text-sm text-gray-400 mt-1\">Admin Dashboard</p>\n          </div>\n\n          {/* User info */}\n          <div className=\"p-4 border-b border-gray-800\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-medium text-white\">\n                  {adminUser?.username?.charAt(0).toUpperCase()}\n                </span>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-white\">{adminUser?.username}</p>\n                <p className=\"text-xs text-gray-400 capitalize\">{adminUser?.role}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 p-4 space-y-2\">\n            {navigationItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = currentPath === item.path;\n              \n              return (\n                <Button\n                  key={item.id}\n                  variant=\"ghost\"\n                  className={cn(\n                    \"w-full justify-start text-left h-auto p-3\",\n                    isActive \n                      ? \"bg-purple-600/20 text-purple-400 border-l-2 border-purple-400\" \n                      : \"text-gray-300 hover:bg-gray-800 hover:text-white\"\n                  )}\n                  onClick={() => handleNavigation(item.path)}\n                  data-testid={`nav-${item.id}`}\n                >\n                  <Icon className=\"h-5 w-5 mr-3\" />\n                  <span>{item.label}</span>\n                </Button>\n              );\n            })}\n          </nav>\n\n          {/* Logout */}\n          <div className=\"p-4 border-t border-gray-800\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-red-400 hover:bg-red-500/10 hover:text-red-300\"\n              onClick={handleLogout}\n              disabled={logout.isPending}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-5 w-5 mr-3\" />\n              <span>{logout.isPending ? \"Signing out...\" : \"Sign Out\"}</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":4671},"client/src/components/admin/AdminSiteSettings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Settings, Shield, CreditCard, Webhook, Eye, EyeOff } from \"lucide-react\";\nimport type { SiteSetting } from \"@shared/schema\";\n\ninterface SettingFormData {\n  [key: string]: string;\n}\n\ninterface AdminPasswordForm {\n  currentPassword: string;\n  newPassword: string;\n  confirmPassword: string;\n}\n\nexport function AdminSiteSettings() {\n  const [settingsData, setSettingsData] = useState<SettingFormData>({});\n  const [passwordForm, setPasswordForm] = useState<AdminPasswordForm>({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n  const [showPasswords, setShowPasswords] = useState({\n    current: false,\n    new: false,\n    confirm: false,\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: settings = [], isLoading } = useQuery<SiteSetting[]>({\n    queryKey: [\"/api/admin/settings\"],\n  });\n\n  // Initialize form data when settings load\n  useEffect(() => {\n    if (settings.length > 0) {\n      const formData: SettingFormData = {};\n      settings.forEach((setting) => {\n        formData[setting.key] = setting.value || \"\";\n      });\n      setSettingsData(formData);\n    }\n  }, [settings]);\n\n  const updateSettingMutation = useMutation({\n    mutationFn: async ({ key, value }: { key: string; value: string }) => {\n      return await apiRequest(\"/api/admin/settings\", \"PUT\", { key, value });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings\"] });\n      toast({\n        title: \"Success\",\n        description: \"Setting updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update setting\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePasswordMutation = useMutation({\n    mutationFn: async (data: AdminPasswordForm) => {\n      return await apiRequest(\"/api/admin/change-password\", \"PUT\", data);\n    },\n    onSuccess: () => {\n      setPasswordForm({\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\",\n      });\n      toast({\n        title: \"Success\",\n        description: \"Admin password updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSettingChange = (key: string, value: string) => {\n    setSettingsData({ ...settingsData, [key]: value });\n  };\n\n  const handleSaveSetting = (key: string) => {\n    updateSettingMutation.mutate({ key, value: settingsData[key] || \"\" });\n  };\n\n  const handlePasswordSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (passwordForm.newPassword !== passwordForm.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"New passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (passwordForm.newPassword.length < 6) {\n      toast({\n        title: \"Error\",\n        description: \"New password must be at least 6 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updatePasswordMutation.mutate(passwordForm);\n  };\n\n  const togglePasswordVisibility = (field: keyof typeof showPasswords) => {\n    setShowPasswords({ ...showPasswords, [field]: !showPasswords[field] });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-4\">\n        <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          {[1, 2, 3, 4].map((i) => (\n            <div key={i} className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const getSetting = (key: string) => {\n    return settings.find((s) => s.key === key)?.value || \"\";\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center space-x-2\">\n        <Settings className=\"w-6 h-6 text-purple-400\" />\n        <div>\n          <h2 className=\"text-2xl font-bold text-white\">Site Settings</h2>\n          <p className=\"text-gray-400 mt-1\">Configure site settings and integrations</p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"general\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4 bg-gray-800\">\n          <TabsTrigger value=\"general\" className=\"data-[state=active]:bg-purple-600\">\n            General\n          </TabsTrigger>\n          <TabsTrigger value=\"stripe\" className=\"data-[state=active]:bg-purple-600\">\n            Stripe\n          </TabsTrigger>\n          <TabsTrigger value=\"webhooks\" className=\"data-[state=active]:bg-purple-600\">\n            Webhooks\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"data-[state=active]:bg-purple-600\">\n            Security\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"general\" className=\"space-y-6\">\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <Settings className=\"w-5 h-5 mr-2\" />\n                General Site Settings\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Configure basic site information and branding\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Site Name</label>\n                  <div className=\"flex space-x-2 mt-1\">\n                    <Input\n                      value={settingsData.site_name || getSetting(\"site_name\")}\n                      onChange={(e) => handleSettingChange(\"site_name\", e.target.value)}\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                      placeholder=\"NuMusic\"\n                      data-testid=\"input-site-name\"\n                    />\n                    <Button\n                      onClick={() => handleSaveSetting(\"site_name\")}\n                      disabled={updateSettingMutation.isPending}\n                      className=\"bg-purple-600 hover:bg-purple-700\"\n                      data-testid=\"button-save-site-name\"\n                    >\n                      Save\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Site Description</label>\n                  <div className=\"flex space-x-2 mt-1\">\n                    <Input\n                      value={settingsData.site_description || getSetting(\"site_description\")}\n                      onChange={(e) => handleSettingChange(\"site_description\", e.target.value)}\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                      placeholder=\"AI-powered music generation platform\"\n                      data-testid=\"input-site-description\"\n                    />\n                    <Button\n                      onClick={() => handleSaveSetting(\"site_description\")}\n                      disabled={updateSettingMutation.isPending}\n                      className=\"bg-purple-600 hover:bg-purple-700\"\n                      data-testid=\"button-save-site-description\"\n                    >\n                      Save\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Support Email</label>\n                  <div className=\"flex space-x-2 mt-1\">\n                    <Input\n                      type=\"email\"\n                      value={settingsData.support_email || getSetting(\"support_email\")}\n                      onChange={(e) => handleSettingChange(\"support_email\", e.target.value)}\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                      placeholder=\"support@aimusic.studio\"\n                      data-testid=\"input-support-email\"\n                    />\n                    <Button\n                      onClick={() => handleSaveSetting(\"support_email\")}\n                      disabled={updateSettingMutation.isPending}\n                      className=\"bg-purple-600 hover:bg-purple-700\"\n                      data-testid=\"button-save-support-email\"\n                    >\n                      Save\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Contact Email</label>\n                  <div className=\"flex space-x-2 mt-1\">\n                    <Input\n                      type=\"email\"\n                      value={settingsData.contact_email || getSetting(\"contact_email\")}\n                      onChange={(e) => handleSettingChange(\"contact_email\", e.target.value)}\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                      placeholder=\"contact@aimusic.studio\"\n                      data-testid=\"input-contact-email\"\n                    />\n                    <Button\n                      onClick={() => handleSaveSetting(\"contact_email\")}\n                      disabled={updateSettingMutation.isPending}\n                      className=\"bg-purple-600 hover:bg-purple-700\"\n                      data-testid=\"button-save-contact-email\"\n                    >\n                      Save\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"stripe\" className=\"space-y-6\">\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <CreditCard className=\"w-5 h-5 mr-2\" />\n                Stripe Integration\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Configure Stripe API keys for payment processing\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Stripe Publishable Key</label>\n                  <div className=\"flex space-x-2 mt-1\">\n                    <Input\n                      value={settingsData.stripe_publishable_key || getSetting(\"stripe_publishable_key\")}\n                      onChange={(e) => handleSettingChange(\"stripe_publishable_key\", e.target.value)}\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                      placeholder=\"pk_live_...\"\n                      data-testid=\"input-stripe-publishable-key\"\n                    />\n                    <Button\n                      onClick={() => handleSaveSetting(\"stripe_publishable_key\")}\n                      disabled={updateSettingMutation.isPending}\n                      className=\"bg-purple-600 hover:bg-purple-700\"\n                      data-testid=\"button-save-stripe-publishable-key\"\n                    >\n                      Save\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Stripe Secret Key</label>\n                  <div className=\"flex space-x-2 mt-1\">\n                    <Input\n                      type=\"password\"\n                      value={settingsData.stripe_secret_key || getSetting(\"stripe_secret_key\")}\n                      onChange={(e) => handleSettingChange(\"stripe_secret_key\", e.target.value)}\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                      placeholder=\"sk_live_...\"\n                      data-testid=\"input-stripe-secret-key\"\n                    />\n                    <Button\n                      onClick={() => handleSaveSetting(\"stripe_secret_key\")}\n                      disabled={updateSettingMutation.isPending}\n                      className=\"bg-purple-600 hover:bg-purple-700\"\n                      data-testid=\"button-save-stripe-secret-key\"\n                    >\n                      Save\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Stripe Webhook Endpoint Secret</label>\n                  <div className=\"flex space-x-2 mt-1\">\n                    <Input\n                      type=\"password\"\n                      value={settingsData.stripe_webhook_secret || getSetting(\"stripe_webhook_secret\")}\n                      onChange={(e) => handleSettingChange(\"stripe_webhook_secret\", e.target.value)}\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                      placeholder=\"whsec_...\"\n                      data-testid=\"input-stripe-webhook-secret\"\n                    />\n                    <Button\n                      onClick={() => handleSaveSetting(\"stripe_webhook_secret\")}\n                      disabled={updateSettingMutation.isPending}\n                      className=\"bg-purple-600 hover:bg-purple-700\"\n                      data-testid=\"button-save-stripe-webhook-secret\"\n                    >\n                      Save\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-4 p-4 bg-blue-900/20 border border-blue-700 rounded-lg\">\n                <p className=\"text-blue-300 text-sm\">\n                  <strong>Note:</strong> Stripe keys are stored securely and masked for security. \n                  Make sure to use your live keys for production and test keys for development.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"webhooks\" className=\"space-y-6\">\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <Webhook className=\"w-5 h-5 mr-2\" />\n                Webhook Configuration\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Configure webhook endpoints and settings\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Webhook Setup Instructions */}\n              <div className=\"bg-gray-700 border border-gray-600 rounded-lg p-4 space-y-4\">\n                <h4 className=\"text-md font-semibold text-blue-400\">Stripe Webhook Setup Instructions</h4>\n                <div className=\"space-y-3 text-sm text-gray-300\">\n                  <div>\n                    <p className=\"font-medium text-white mb-2\">1. Go to your Stripe Dashboard</p>\n                    <p>Navigate to <span className=\"text-blue-400\">Developers → Webhooks</span> in your Stripe dashboard.</p>\n                  </div>\n                  \n                  <div>\n                    <p className=\"font-medium text-white mb-2\">2. Create a new webhook endpoint</p>\n                    <p>Click \"Add endpoint\" and use this URL:</p>\n                    <div className=\"bg-gray-900 border border-gray-500 rounded p-2 mt-1 font-mono text-green-400 text-xs\">\n                      https://numusic.app/api/webhooks/stripe\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <p className=\"font-medium text-white mb-2\">3. Select events to send</p>\n                    <p>Add these essential events for subscription management:</p>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-1 mt-2\">\n                      <div className=\"font-mono text-xs bg-gray-800 px-2 py-1 rounded text-green-400\">customer.subscription.created</div>\n                      <div className=\"font-mono text-xs bg-gray-800 px-2 py-1 rounded text-green-400\">customer.subscription.updated</div>\n                      <div className=\"font-mono text-xs bg-gray-800 px-2 py-1 rounded text-green-400\">customer.subscription.deleted</div>\n                      <div className=\"font-mono text-xs bg-gray-800 px-2 py-1 rounded text-green-400\">invoice.payment_succeeded</div>\n                      <div className=\"font-mono text-xs bg-gray-800 px-2 py-1 rounded text-green-400\">invoice.payment_failed</div>\n                      <div className=\"font-mono text-xs bg-gray-800 px-2 py-1 rounded text-green-400\">payment_intent.succeeded</div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <p className=\"font-medium text-white mb-2\">4. Copy the webhook secret</p>\n                    <p>After creating the webhook, copy the signing secret (whsec_...) and add it to your Stripe settings in the previous tab.</p>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-gray-200 text-sm font-medium\">Your Webhook Endpoint URL</label>\n                <div className=\"flex space-x-2 mt-1\">\n                  <Input\n                    value=\"https://numusic.app/api/webhooks/stripe\"\n                    readOnly\n                    className=\"bg-gray-700 border-gray-600 text-gray-300 cursor-not-allowed\"\n                    data-testid=\"input-webhook-endpoint-url\"\n                  />\n                  <Button\n                    onClick={() => {\n                      navigator.clipboard.writeText(\"https://numusic.app/api/webhooks/stripe\");\n                      toast({\n                        title: \"Copied!\",\n                        description: \"Webhook URL copied to clipboard\",\n                      });\n                    }}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                    data-testid=\"button-copy-webhook-url\"\n                  >\n                    Copy URL\n                  </Button>\n                </div>\n                <p className=\"text-xs text-gray-400 mt-1\">\n                  This is your webhook endpoint URL. Copy this to your Stripe dashboard.\n                </p>\n              </div>\n\n              <div className=\"mt-4 p-4 bg-yellow-900/20 border border-yellow-700 rounded-lg\">\n                <p className=\"text-yellow-300 text-sm\">\n                  <strong>Important:</strong> Make sure your webhook endpoint secret is configured in the Stripe tab above. \n                  This ensures secure webhook verification and prevents unauthorized requests.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <Shield className=\"w-5 h-5 mr-2\" />\n                Admin Security\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Change admin password and security settings\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handlePasswordSubmit} className=\"space-y-4\">\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Current Password</label>\n                  <div className=\"relative mt-1\">\n                    <Input\n                      type={showPasswords.current ? \"text\" : \"password\"}\n                      value={passwordForm.currentPassword}\n                      onChange={(e) => setPasswordForm({ ...passwordForm, currentPassword: e.target.value })}\n                      className=\"bg-gray-700 border-gray-600 text-white pr-10\"\n                      placeholder=\"Enter current password\"\n                      required\n                      data-testid=\"input-current-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white\"\n                      onClick={() => togglePasswordVisibility(\"current\")}\n                      data-testid=\"button-toggle-current-password\"\n                    >\n                      {showPasswords.current ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">New Password</label>\n                  <div className=\"relative mt-1\">\n                    <Input\n                      type={showPasswords.new ? \"text\" : \"password\"}\n                      value={passwordForm.newPassword}\n                      onChange={(e) => setPasswordForm({ ...passwordForm, newPassword: e.target.value })}\n                      className=\"bg-gray-700 border-gray-600 text-white pr-10\"\n                      placeholder=\"Enter new password (min 6 characters)\"\n                      required\n                      minLength={6}\n                      data-testid=\"input-new-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white\"\n                      onClick={() => togglePasswordVisibility(\"new\")}\n                      data-testid=\"button-toggle-new-password\"\n                    >\n                      {showPasswords.new ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-gray-200 text-sm font-medium\">Confirm New Password</label>\n                  <div className=\"relative mt-1\">\n                    <Input\n                      type={showPasswords.confirm ? \"text\" : \"password\"}\n                      value={passwordForm.confirmPassword}\n                      onChange={(e) => setPasswordForm({ ...passwordForm, confirmPassword: e.target.value })}\n                      className=\"bg-gray-700 border-gray-600 text-white pr-10\"\n                      placeholder=\"Confirm new password\"\n                      required\n                      data-testid=\"input-confirm-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white\"\n                      onClick={() => togglePasswordVisibility(\"confirm\")}\n                      data-testid=\"button-toggle-confirm-password\"\n                    >\n                      {showPasswords.confirm ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"submit\"\n                    disabled={updatePasswordMutation.isPending}\n                    className=\"bg-red-600 hover:bg-red-700\"\n                    data-testid=\"button-change-password\"\n                  >\n                    {updatePasswordMutation.isPending ? \"Updating...\" : \"Change Password\"}\n                  </Button>\n                </div>\n              </form>\n\n              <div className=\"mt-6 p-4 bg-red-900/20 border border-red-700 rounded-lg\">\n                <p className=\"text-red-300 text-sm\">\n                  <strong>Security Notice:</strong> Changing your password will log you out of all active sessions. \n                  Make sure to save your new password securely.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":24757},"client/src/components/admin/AdminUserManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Edit, Trash2, UserCheck, UserX, Mail, MailCheck, Calendar, Music, CreditCard, Crown } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { format } from \"date-fns\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst updateUserSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\").optional(),\n  lastName: z.string().min(1, \"Last name is required\").optional(),\n  email: z.string().email(\"Invalid email address\").optional(),\n  emailVerified: z.boolean().optional(),\n});\n\ntype UpdateUserForm = z.infer<typeof updateUserSchema>;\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  emailVerified: boolean;\n  subscriptionPlanId: string | null;\n  planStatus: string;\n  generationsUsedThisMonth: number;\n  planStartDate: string | null;\n  planEndDate: string | null;\n  createdAt: string;\n  updatedAt: string;\n  generationCount?: number;\n  subscriptionPlan?: {\n    id: string;\n    name: string;\n    description: string;\n    maxGenerations: number;\n  };\n}\n\ninterface SubscriptionPlan {\n  id: string;\n  name: string;\n  description: string;\n  monthlyPrice: string;\n  yearlyPrice: string;\n  maxGenerations: number;\n  features: string[];\n  isActive: boolean;\n}\n\nexport default function AdminUserManagement() {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [planDialogOpen, setPlanDialogOpen] = useState(false);\n  const [selectedPlan, setSelectedPlan] = useState<string>(\"free\");\n  const [planStatus, setPlanStatus] = useState<string>(\"active\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: [\"/api/admin/regular-users\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"/api/admin/regular-users\", \"GET\");\n      return response.json();\n    },\n  });\n\n  // Fetch subscription plans for the dropdown\n  const { data: subscriptionPlans = [] } = useQuery({\n    queryKey: [\"/api/admin/plans\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"/api/admin/plans\", \"GET\");\n      return response.json();\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: UpdateUserForm }) => {\n      const response = await apiRequest(`/api/admin/regular-users/${id}`, \"PUT\", updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/regular-users\"] });\n      setEditDialogOpen(false);\n      setSelectedUser(null);\n      toast({\n        title: \"User Updated\",\n        description: \"User has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(`/api/admin/regular-users/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/regular-users\"] });\n      toast({\n        title: \"User Deleted\",\n        description: \"User and all their data have been permanently deleted.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update user subscription plan mutation\n  const updatePlanMutation = useMutation({\n    mutationFn: async ({ id, planId, status }: { id: string; planId: string | null; status: string }) => {\n      const response = await apiRequest(`/api/admin/regular-users/${id}/plan`, \"PUT\", { planId, status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/regular-users\"] });\n      setPlanDialogOpen(false);\n      setSelectedUser(null);\n      toast({\n        title: \"Plan Updated\",\n        description: \"User subscription plan has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update user plan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Toggle email verification mutation\n  const toggleEmailVerificationMutation = useMutation({\n    mutationFn: async ({ id, emailVerified }: { id: string; emailVerified: boolean }) => {\n      const response = await apiRequest(`/api/admin/regular-users/${id}`, \"PUT\", { emailVerified });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/regular-users\"] });\n      toast({\n        title: \"Email Status Updated\",\n        description: \"User email verification status has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update email verification status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const editForm = useForm<UpdateUserForm>({\n    resolver: zodResolver(updateUserSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      emailVerified: false,\n    },\n  });\n\n  const handleEditUser = (user: User) => {\n    setSelectedUser(user);\n    editForm.reset({\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      emailVerified: user.emailVerified,\n    });\n    setEditDialogOpen(true);\n  };\n\n  const handleUpdateUser = (data: UpdateUserForm) => {\n    if (!selectedUser) return;\n    \n    // Only send changed fields\n    const changes: UpdateUserForm = {};\n    if (data.firstName !== selectedUser.firstName) changes.firstName = data.firstName;\n    if (data.lastName !== selectedUser.lastName) changes.lastName = data.lastName;\n    if (data.email !== selectedUser.email) changes.email = data.email;\n    if (data.emailVerified !== selectedUser.emailVerified) changes.emailVerified = data.emailVerified;\n\n    if (Object.keys(changes).length === 0) {\n      setEditDialogOpen(false);\n      return;\n    }\n\n    updateUserMutation.mutate({ id: selectedUser.id, updates: changes });\n  };\n\n  const handleDeleteUser = (id: string) => {\n    deleteUserMutation.mutate(id);\n  };\n\n  const handleManagePlan = (user: User) => {\n    setSelectedUser(user);\n    setSelectedPlan(user.subscriptionPlanId || \"free\");\n    setPlanStatus(user.planStatus || \"free\");\n    setPlanDialogOpen(true);\n  };\n\n  const handleUpdatePlan = () => {\n    if (!selectedUser) return;\n    \n    updatePlanMutation.mutate({\n      id: selectedUser.id,\n      planId: selectedPlan === \"free\" ? null : selectedPlan,\n      status: selectedPlan === \"free\" ? \"free\" : planStatus,\n    });\n  };\n\n  const handleToggleEmailVerification = (user: User) => {\n    toggleEmailVerificationMutation.mutate({\n      id: user.id,\n      emailVerified: !user.emailVerified,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"text-gray-400\">Loading users...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white\">User Management</h2>\n          <p className=\"text-gray-400\">Manage regular users, edit their information, and handle subscriptions</p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-purple-400 border-purple-500\">\n          {users.length} Total Users\n        </Badge>\n      </div>\n\n      <Card className=\"bg-gray-900/50 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-white\">All Users</CardTitle>\n          <CardDescription className=\"text-gray-400\">\n            View and manage all registered users on the platform\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"border-gray-700\">\n                  <TableHead className=\"text-gray-300\">User</TableHead>\n                  <TableHead className=\"text-gray-300\">Email Status</TableHead>\n                  <TableHead className=\"text-gray-300\">Subscription</TableHead>\n                  <TableHead className=\"text-gray-300\">Generations</TableHead>\n                  <TableHead className=\"text-gray-300\">Joined</TableHead>\n                  <TableHead className=\"text-gray-300\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {users.map((user: User) => (\n                  <TableRow key={user.id} className=\"border-gray-700\">\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium text-white\">\n                          {user.firstName} {user.lastName}\n                        </div>\n                        <div className=\"text-sm text-gray-400\">{user.email}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {user.emailVerified ? (\n                          <Badge variant=\"default\" className=\"bg-green-600 hover:bg-green-700\">\n                            <UserCheck className=\"w-3 h-3 mr-1\" />\n                            Verified\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"outline\" className=\"text-orange-400 border-orange-500\">\n                            <UserX className=\"w-3 h-3 mr-1\" />\n                            Unverified\n                          </Badge>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center gap-2\">\n                          {user.subscriptionPlan ? (\n                            <>\n                              <Crown className=\"w-4 h-4 text-yellow-400\" />\n                              <span className=\"text-white font-medium\">{user.subscriptionPlan.name}</span>\n                            </>\n                          ) : (\n                            <>\n                              <CreditCard className=\"w-4 h-4 text-gray-400\" />\n                              <span className=\"text-gray-400\">Free Plan</span>\n                            </>\n                          )}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {user.planStatus && user.planStatus !== \"free\" && (\n                            <span className={`px-1.5 py-0.5 rounded text-xs ${\n                              user.planStatus === 'active' ? 'bg-green-600 text-white' :\n                              user.planStatus === 'expired' ? 'bg-red-600 text-white' :\n                              'bg-yellow-600 text-white'\n                            }`}>\n                              {user.planStatus}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1 text-gray-300\">\n                        <Music className=\"w-4 h-4\" />\n                        <span>{user.generationCount || 0}</span>\n                        {user.subscriptionPlan && (\n                          <span className=\"text-xs text-gray-500\">/{user.subscriptionPlan.maxGenerations}</span>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1 text-gray-400\">\n                        <Calendar className=\"w-4 h-4\" />\n                        {format(new Date(user.createdAt), 'MMM d, yyyy')}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEditUser(user)}\n                          className=\"text-blue-400 border-blue-500 hover:bg-blue-500/10\"\n                          data-testid={`button-edit-user-${user.id}`}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleToggleEmailVerification(user)}\n                          className={user.emailVerified \n                            ? \"text-green-400 border-green-500 hover:bg-green-500/10\" \n                            : \"text-gray-400 border-gray-500 hover:bg-gray-500/10\"\n                          }\n                          disabled={toggleEmailVerificationMutation.isPending}\n                          title={user.emailVerified ? \"Mark email as unverified\" : \"Mark email as verified\"}\n                          data-testid={`button-toggle-email-${user.id}`}\n                        >\n                          {user.emailVerified ? <MailCheck className=\"w-4 h-4\" /> : <Mail className=\"w-4 h-4\" />}\n                        </Button>\n\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleManagePlan(user)}\n                          className=\"text-yellow-400 border-yellow-500 hover:bg-yellow-500/10\"\n                          data-testid={`button-manage-plan-${user.id}`}\n                        >\n                          <Crown className=\"w-4 h-4\" />\n                        </Button>\n                        \n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"text-red-400 border-red-500 hover:bg-red-500/10\"\n                              data-testid={`button-delete-user-${user.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent className=\"bg-gray-900 border-gray-700\">\n                            <AlertDialogHeader>\n                              <AlertDialogTitle className=\"text-white\">Delete User</AlertDialogTitle>\n                              <AlertDialogDescription className=\"text-gray-400\">\n                                Are you sure you want to delete <strong>{user.firstName} {user.lastName}</strong>?\n                                This will permanently delete their account and all associated data including their music generations.\n                                This action cannot be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel className=\"bg-gray-700 text-white border-gray-600\">\n                                Cancel\n                              </AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteUser(user.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                                data-testid={`confirm-delete-user-${user.id}`}\n                              >\n                                Delete User\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n            \n            {users.length === 0 && (\n              <div className=\"text-center py-8 text-gray-400\">\n                No users found\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Edit User Dialog */}\n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n        <DialogContent className=\"bg-gray-900 border-gray-700\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Edit User</DialogTitle>\n            <DialogDescription className=\"text-gray-400\">\n              Update user information and account settings\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={editForm.handleSubmit(handleUpdateUser)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\" className=\"text-gray-300\">First Name</Label>\n                <Input\n                  id=\"firstName\"\n                  {...editForm.register(\"firstName\")}\n                  className=\"bg-gray-800 border-gray-600 text-white\"\n                  data-testid=\"input-edit-firstName\"\n                />\n                {editForm.formState.errors.firstName && (\n                  <p className=\"text-red-400 text-sm mt-1\">\n                    {editForm.formState.errors.firstName.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"lastName\" className=\"text-gray-300\">Last Name</Label>\n                <Input\n                  id=\"lastName\"\n                  {...editForm.register(\"lastName\")}\n                  className=\"bg-gray-800 border-gray-600 text-white\"\n                  data-testid=\"input-edit-lastName\"\n                />\n                {editForm.formState.errors.lastName && (\n                  <p className=\"text-red-400 text-sm mt-1\">\n                    {editForm.formState.errors.lastName.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"email\" className=\"text-gray-300\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...editForm.register(\"email\")}\n                className=\"bg-gray-800 border-gray-600 text-white\"\n                data-testid=\"input-edit-email\"\n              />\n              {editForm.formState.errors.email && (\n                <p className=\"text-red-400 text-sm mt-1\">\n                  {editForm.formState.errors.email.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-700\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`p-2 rounded-full ${editForm.watch(\"emailVerified\") ? 'bg-green-500/20' : 'bg-gray-600/20'}`}>\n                  {editForm.watch(\"emailVerified\") ? (\n                    <MailCheck className=\"w-4 h-4 text-green-400\" />\n                  ) : (\n                    <Mail className=\"w-4 h-4 text-gray-400\" />\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"emailVerified\" className=\"text-gray-300 font-medium\">\n                    Email Verification Status\n                  </Label>\n                  <p className=\"text-xs text-gray-400 mt-1\">\n                    {editForm.watch(\"emailVerified\") ? \"Email is verified\" : \"Email is not verified\"}\n                  </p>\n                </div>\n              </div>\n              <Switch\n                id=\"emailVerified\"\n                checked={editForm.watch(\"emailVerified\")}\n                onCheckedChange={(checked) => editForm.setValue(\"emailVerified\", checked)}\n                data-testid=\"switch-email-verified\"\n              />\n            </div>\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setEditDialogOpen(false)}\n                className=\"border-gray-600 text-gray-300\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateUserMutation.isPending}\n                className=\"bg-purple-600 hover:bg-purple-700\"\n                data-testid=\"button-save-user-changes\"\n              >\n                {updateUserMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Plan Management Dialog */}\n      <Dialog open={planDialogOpen} onOpenChange={setPlanDialogOpen}>\n        <DialogContent className=\"bg-gray-900 border-gray-700 max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Manage Subscription Plan</DialogTitle>\n            <DialogDescription className=\"text-gray-400\">\n              Update subscription plan for <strong>{selectedUser?.firstName} {selectedUser?.lastName}</strong>\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {/* Current Plan Info */}\n            {selectedUser && (\n              <div className=\"bg-gray-800 rounded-lg p-3\">\n                <div className=\"text-sm text-gray-400 mb-1\">Current Plan</div>\n                <div className=\"flex items-center gap-2\">\n                  {selectedUser.subscriptionPlan ? (\n                    <>\n                      <Crown className=\"w-4 h-4 text-yellow-400\" />\n                      <span className=\"text-white font-medium\">{selectedUser.subscriptionPlan.name}</span>\n                    </>\n                  ) : (\n                    <>\n                      <CreditCard className=\"w-4 h-4 text-gray-400\" />\n                      <span className=\"text-gray-400\">Free Plan</span>\n                    </>\n                  )}\n                </div>\n                {selectedUser.planStatus !== \"free\" && (\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    Status: <span className={`px-1.5 py-0.5 rounded ${\n                      selectedUser.planStatus === 'active' ? 'bg-green-600 text-white' :\n                      selectedUser.planStatus === 'expired' ? 'bg-red-600 text-white' :\n                      'bg-yellow-600 text-white'\n                    }`}>\n                      {selectedUser.planStatus}\n                    </span>\n                  </div>\n                )}\n                <div className=\"text-xs text-gray-500 mt-1\">\n                  Generations Used: {selectedUser.generationsUsedThisMonth || 0}\n                  {selectedUser.subscriptionPlan && ` / ${selectedUser.subscriptionPlan.maxGenerations}`}\n                </div>\n              </div>\n            )}\n\n            {/* Plan Selection */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-300\">New Plan</label>\n              <Select value={selectedPlan} onValueChange={setSelectedPlan}>\n                <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                  <SelectValue placeholder=\"Select a plan\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-800 border-gray-600\">\n                  <SelectItem value=\"free\" className=\"text-gray-300\">Free Plan</SelectItem>\n                  {subscriptionPlans\n                    .filter((plan: SubscriptionPlan) => plan.isActive)\n                    .map((plan: SubscriptionPlan) => (\n                      <SelectItem key={plan.id} value={plan.id} className=\"text-white\">\n                        {plan.name} - {plan.maxGenerations} generations/month\n                      </SelectItem>\n                    ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Plan Status */}\n            {selectedPlan && selectedPlan !== \"free\" && (\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-300\">Plan Status</label>\n                <Select value={planStatus} onValueChange={setPlanStatus}>\n                  <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-gray-800 border-gray-600\">\n                    <SelectItem value=\"active\" className=\"text-green-400\">Active</SelectItem>\n                    <SelectItem value=\"expired\" className=\"text-red-400\">Expired</SelectItem>\n                    <SelectItem value=\"cancelled\" className=\"text-yellow-400\">Cancelled</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </div>\n\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setPlanDialogOpen(false)}\n              className=\"bg-gray-700 text-white border-gray-600\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleUpdatePlan}\n              disabled={updatePlanMutation.isPending}\n              className=\"bg-purple-600 hover:bg-purple-700\"\n              data-testid=\"button-update-plan\"\n            >\n              {updatePlanMutation.isPending ? \"Updating...\" : \"Update Plan\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":27019},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/audio-player.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"./button\";\nimport { Slider } from \"./slider\";\nimport { Play, Pause } from \"lucide-react\";\n\ninterface AudioPlayerProps {\n  src: string;\n  className?: string;\n}\n\nexport function AudioPlayer({ src, className }: AudioPlayerProps) {\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n\n\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const setAudioData = () => {\n      setDuration(audio.duration);\n      setCurrentTime(audio.currentTime);\n    };\n\n    const setAudioTime = () => setCurrentTime(audio.currentTime);\n\n    audio.addEventListener(\"loadeddata\", setAudioData);\n    audio.addEventListener(\"timeupdate\", setAudioTime);\n\n    return () => {\n      audio.removeEventListener(\"loadeddata\", setAudioData);\n      audio.removeEventListener(\"timeupdate\", setAudioTime);\n    };\n  }, []);\n\n  const togglePlayPause = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audio.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleSeek = (value: number[]) => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const time = value[0];\n    audio.currentTime = time;\n    setCurrentTime(time);\n  };\n\n\n\n  const formatTime = (time: number) => {\n    if (isNaN(time)) return \"0:00\";\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <audio\n        ref={audioRef}\n        src={src}\n        onEnded={() => setIsPlaying(false)}\n        data-testid=\"audio-element\"\n      />\n\n      {/* Play/Pause and Time */}\n      <div className=\"flex items-center space-x-4\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={togglePlayPause}\n          className=\"bg-music-dark border-gray-600 hover:border-music-purple\"\n          data-testid=\"button-play-pause\"\n        >\n          {isPlaying ? <Pause className=\"h-4 w-4 text-music-blue\" /> : <Play className=\"h-4 w-4 text-music-blue\" />}\n        </Button>\n\n        <div className=\"flex-1\">\n          <Slider\n            value={[currentTime]}\n            onValueChange={handleSeek}\n            max={duration || 100}\n            step={1}\n            className=\"w-full\"\n            data-testid=\"slider-seek\"\n          />\n          <div className=\"flex justify-between text-xs text-gray-400 mt-1\">\n            <span>{formatTime(currentTime)}</span>\n            <span>{formatTime(duration)}</span>\n          </div>\n        </div>\n      </div>\n\n\n    </div>\n  );\n}\n","size_bytes":2846},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3855},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }","size_bytes":709},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}","size_bytes":2764},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/LyricsGeneratorModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { LoadingSpinner } from \"@/components/loading-spinner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { WandSparkles, RotateCcw, Copy } from \"lucide-react\";\n\ninterface LyricsGeneratorModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onUseLyrics: (lyrics: string) => void;\n  duration?: number; // Duration in seconds\n}\n\nexport function LyricsGeneratorModal({ isOpen, onClose, onUseLyrics, duration = 60 }: LyricsGeneratorModalProps) {\n  const [prompt, setPrompt] = useState(\"\");\n  const [generatedLyrics, setGeneratedLyrics] = useState(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const { toast } = useToast();\n\n  const handleGenerate = async () => {\n    if (!prompt.trim()) {\n      toast({\n        title: \"Prompt required\",\n        description: \"Please enter what your song is about.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsGenerating(true);\n    try {\n      const response = await apiRequest(\"/api/generate-lyrics\", \"POST\", { \n        prompt: prompt.trim(),\n        duration: duration \n      });\n      const data = await response.json();\n      setGeneratedLyrics(data.lyrics);\n    } catch (error) {\n      console.error('Error generating lyrics:', error);\n      toast({\n        title: \"Generation failed\",\n        description: \"Failed to generate lyrics. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleUseLyrics = () => {\n    if (generatedLyrics.trim()) {\n      onUseLyrics(generatedLyrics);\n      onClose();\n      toast({\n        title: \"Lyrics added\",\n        description: \"The generated lyrics have been added to your song.\",\n      });\n    }\n  };\n\n  const handleCopyLyrics = async () => {\n    if (generatedLyrics.trim()) {\n      try {\n        await navigator.clipboard.writeText(generatedLyrics);\n        toast({\n          title: \"Copied\",\n          description: \"Lyrics copied to clipboard.\",\n        });\n      } catch (error) {\n        toast({\n          title: \"Copy failed\",\n          description: \"Failed to copy lyrics to clipboard.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleClose = () => {\n    setPrompt(\"\");\n    setGeneratedLyrics(\"\");\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl bg-music-secondary border-gray-700 text-white\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center text-music-blue\">\n            <WandSparkles className=\"mr-2 h-5 w-5\" />\n            AI Lyrics Generator\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-400\">\n            Generate custom lyrics for your music using AI. Describe what your song is about and get professionally structured lyrics.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Prompt Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"song-prompt\" className=\"text-sm font-medium text-gray-300\">\n              What is your song about?\n            </Label>\n            <Input\n              id=\"song-prompt\"\n              value={prompt}\n              onChange={(e) => setPrompt(e.target.value)}\n              placeholder=\"e.g., a summer romance, overcoming challenges, city nightlife...\"\n              className=\"bg-music-dark border-gray-600 text-white placeholder-gray-400 focus:border-music-purple\"\n              data-testid=\"input-lyrics-prompt\"\n            />\n          </div>\n\n          {/* Generate Button */}\n          <div className=\"flex gap-3\">\n            <Button\n              onClick={handleGenerate}\n              disabled={isGenerating || !prompt.trim()}\n              className=\"flex-1 bg-gradient-to-r from-music-purple to-music-blue hover:from-purple-600 hover:to-blue-600\"\n              data-testid=\"button-generate-lyrics\"\n            >\n              {isGenerating ? (\n                <LoadingSpinner />\n              ) : (\n                <WandSparkles className=\"mr-2 h-4 w-4\" />\n              )}\n              {isGenerating ? \"Generating...\" : \"Generate Lyrics\"}\n            </Button>\n            \n            {generatedLyrics && (\n              <Button\n                onClick={handleGenerate}\n                disabled={isGenerating}\n                variant=\"outline\"\n                className=\"border-gray-600 hover:border-music-accent\"\n                data-testid=\"button-regenerate-lyrics\"\n              >\n                <RotateCcw className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n\n          {/* Generated Lyrics */}\n          {generatedLyrics && (\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-sm font-medium text-gray-300\">Generated Lyrics</Label>\n                <Button\n                  onClick={handleCopyLyrics}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-gray-400 hover:text-white\"\n                  data-testid=\"button-copy-lyrics\"\n                >\n                  <Copy className=\"h-4 w-4 mr-1\" />\n                  Copy\n                </Button>\n              </div>\n              <Textarea\n                value={generatedLyrics}\n                onChange={(e) => setGeneratedLyrics(e.target.value)}\n                rows={12}\n                className=\"bg-music-dark border-gray-600 text-white resize-none font-mono text-sm\"\n                data-testid=\"textarea-generated-lyrics\"\n              />\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 pt-4 border-t border-gray-700\">\n            <Button\n              onClick={handleClose}\n              variant=\"outline\"\n              className=\"flex-1 border-gray-600 hover:border-gray-500 text-gray-300 hover:text-white\"\n              data-testid=\"button-cancel-lyrics\"\n            >\n              Cancel\n            </Button>\n            {generatedLyrics && (\n              <Button\n                onClick={handleUseLyrics}\n                className=\"flex-1 bg-music-green hover:bg-green-600\"\n                data-testid=\"button-use-lyrics\"\n              >\n                Use These Lyrics\n              </Button>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6797},"server/openaiService.ts":{"content":"import OpenAI from \"openai\";\n\nif (!process.env.OPENAI_API_KEY) {\n  throw new Error('Missing required OpenAI API key: OPENAI_API_KEY');\n}\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport async function generateLyrics(prompt: string, duration: number = 60): Promise<string> {\n  // Determine song structure based on duration\n  let structureGuidance = \"\";\n  if (duration <= 30) {\n    structureGuidance = \"Create a short, concise song with just [Verse 1] and [Chorus]. Keep it simple and impactful for a 30-second track.\";\n  } else if (duration <= 60) {\n    structureGuidance = \"Create a standard pop song structure with [Verse 1], [Chorus], [Verse 2], [Chorus]. Perfect for a 1-minute track.\";\n  } else if (duration <= 120) {\n    structureGuidance = \"Create a full song structure with [Verse 1], [Chorus], [Verse 2], [Chorus], [Bridge], [Chorus]. Suitable for a 2-minute track.\";\n  } else {\n    structureGuidance = \"Create an extended song with [Verse 1], [Chorus], [Verse 2], [Chorus], [Bridge], [Chorus], [Verse 3], [Chorus]. Perfect for a longer track.\";\n  }\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a professional songwriter and lyricist. Create engaging, creative lyrics based on the user's prompt. \n          \n          The song will be ${duration} seconds long, so ${structureGuidance}\n          \n          Guidelines:\n          - Structure the lyrics with clear sections like [Verse 1], [Chorus], [Verse 2], [Bridge], etc.\n          - Make lyrics that flow well and are suitable for music\n          - Keep it appropriate and creative\n          - Match the mood and theme from the user's prompt\n          - Each verse should be 4-8 lines, chorus 4-6 lines\n          - Use rhyme schemes that work well for music\n          - Adjust the number of sections based on the song duration\n          \n          Return only the lyrics with section markers, no additional text or explanations.`\n        },\n        {\n          role: \"user\",\n          content: `Write lyrics for a song about: ${prompt}`\n        }\n      ],\n      max_tokens: 800,\n      temperature: 0.8,\n    });\n\n    const lyrics = response.choices[0]?.message?.content?.trim();\n    \n    if (!lyrics) {\n      throw new Error('No lyrics generated');\n    }\n\n    return lyrics;\n  } catch (error) {\n    console.error('Error generating lyrics:', error);\n    throw new Error('Failed to generate lyrics. Please try again.');\n  }\n}","size_bytes":2669},"server/elevenLabsService.ts":{"content":"import { ElevenLabsClient } from \"@elevenlabs/elevenlabs-js\";\n\nconst elevenlabs = new ElevenLabsClient({\n  apiKey: process.env.ELEVENLABS_API_KEY || \"sk_d5323a3d63a97aadc7fa918bab31b4cf830fe8ef6a648d88\"\n});\n\nexport interface MusicGenerationParams {\n  tags: string;\n  lyrics?: string;\n  durationMs: number;\n}\n\nexport async function generateMusic(params: MusicGenerationParams): Promise<ReadableStream<Uint8Array>> {\n  const { tags, lyrics, durationMs } = params;\n  \n  // Validate duration\n  if (durationMs < 10000 || durationMs > 300000) {\n    throw new Error('Duration must be between 10000ms (10s) and 300000ms (5min)');\n  }\n  \n  // Build prompt\n  let prompt = `Create a song with this style: ${tags}`;\n  if (lyrics && lyrics.trim()) {\n    prompt += ` and these lyrics: ${lyrics}`;\n  }\n  \n  try {\n    const track = await elevenlabs.music.compose({\n      prompt,\n      musicLengthMs: durationMs,\n    });\n    \n    return track;\n  } catch (error) {\n    console.error('ElevenLabs music generation error:', error);\n    throw new Error('Failed to generate music with ElevenLabs');\n  }\n}","size_bytes":1081},"client/src/pages/track.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AudioPlayer } from \"@/components/ui/audio-player\";\nimport { Header } from \"@/components/Header\";\nimport { Music, Share2, Clock, Tags, User, Eye } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation, Link } from \"wouter\";\nimport type { MusicGeneration } from \"@shared/schema\";\nimport backgroundVideo from \"/background-video.mp4\";\n\nexport default function TrackPage() {\n  const [location] = useLocation();\n  const { toast } = useToast();\n  const trackId = location.split('/track/')[1];\n\n  // Fetch track data\n  const { data: track, isLoading, error } = useQuery<MusicGeneration>({\n    queryKey: [`/api/track/${trackId}`],\n    enabled: !!trackId,\n    retry: false,\n  });\n\n  const handleShare = async () => {\n    if (!track) return;\n    \n    try {\n      const shareUrl = `${window.location.origin}/track/${track.id}`;\n      await navigator.clipboard.writeText(shareUrl);\n      toast({\n        title: \"Link Copied!\",\n        description: \"Track link has been copied to your clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Share Failed\",\n        description: \"Failed to copy link to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen relative overflow-hidden flex items-center justify-center\">\n        {/* Background Video */}\n        <video\n          autoPlay\n          muted\n          loop\n          playsInline\n          className=\"absolute inset-0 w-full h-full object-cover z-0\"\n        >\n          <source src={backgroundVideo} type=\"video/mp4\" />\n          Your browser does not support the video tag.\n        </video>\n\n        {/* Content overlay */}\n        <div className=\"relative z-10 bg-black/40 min-h-screen flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-white\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !track) {\n    return (\n      <div className=\"min-h-screen relative overflow-hidden\">\n        {/* Background Video */}\n        <video\n          autoPlay\n          muted\n          loop\n          playsInline\n          className=\"absolute inset-0 w-full h-full object-cover z-0\"\n        >\n          <source src={backgroundVideo} type=\"video/mp4\" />\n          Your browser does not support the video tag.\n        </video>\n\n        {/* Content overlay */}\n        <div className=\"relative z-10 bg-black/40 min-h-screen flex items-center justify-center p-4\">\n          <Card className=\"w-full max-w-md bg-gray-800/90 border-gray-700 backdrop-blur-sm\">\n            <CardContent className=\"p-8 text-center\">\n              <Music className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-white mb-2\">Track Not Found</h3>\n              <p className=\"text-gray-400 mb-6\">The track you're looking for doesn't exist or has been removed.</p>\n              <Link href=\"/\">\n                <Button className=\"bg-gradient-to-r from-music-purple to-music-blue hover:from-purple-600 hover:to-blue-600\">\n                  <Music className=\"w-4 h-4 mr-2\" />\n                  Go Home\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden\">\n      {/* Background Video */}\n      <video\n        autoPlay\n        muted\n        loop\n        playsInline\n        className=\"absolute inset-0 w-full h-full object-cover z-0\"\n      >\n        <source src={backgroundVideo} type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n\n      {/* Content overlay */}\n      <div className=\"relative z-10 bg-black/40 min-h-screen\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <Header currentPage=\"track\" />\n\n          {/* Track Card */}\n          <div className=\"max-w-4xl mx-auto\">\n            <Card className=\"bg-gray-800/90 border-gray-700 backdrop-blur-sm\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n                      <Music className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-2xl font-bold text-white\">\n                        {track.title || \"Untitled Track\"}\n                      </CardTitle>\n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <Badge variant={track.status === \"completed\" ? \"default\" : \"secondary\"} \n                               className={track.status === \"completed\" ? \"bg-green-600\" : \"bg-gray-600\"}>\n                          {track.status}\n                        </Badge>\n                        <Badge variant={track.visibility === \"public\" ? \"default\" : \"secondary\"}>\n                          <Eye className=\"w-3 h-3 mr-1\" />\n                          {track.visibility}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Action Buttons */}\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={handleShare}\n                      className=\"text-blue-400 hover:text-blue-300 border-blue-400 hover:border-blue-300\"\n                      data-testid=\"button-share-track\"\n                    >\n                      <Share2 className=\"w-4 h-4 mr-2\" />\n                      Share\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-6\">\n                {/* Track Details */}\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"text-sm font-medium text-gray-400 mb-2 flex items-center\">\n                        <Tags className=\"w-4 h-4 mr-2\" />\n                        Tags\n                      </h4>\n                      <p className=\"text-white\">{track.tags || \"No tags\"}</p>\n                    </div>\n                    \n                    {track.duration && (\n                      <div>\n                        <h4 className=\"text-sm font-medium text-gray-400 mb-2 flex items-center\">\n                          <Clock className=\"w-4 h-4 mr-2\" />\n                          Duration\n                        </h4>\n                        <p className=\"text-white\">{track.duration} seconds</p>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"text-sm font-medium text-gray-400 mb-2\">\n                        Generation Type\n                      </h4>\n                      <p className=\"text-white capitalize\">{track.type.replace('-', ' to ')}</p>\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"text-sm font-medium text-gray-400 mb-2\">\n                        Created\n                      </h4>\n                      <p className=\"text-white\">\n                        {track.createdAt ? new Date(track.createdAt).toLocaleDateString() : \"N/A\"}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Lyrics */}\n                {track.lyrics && (\n                  <div>\n                    <h4 className=\"text-sm font-medium text-gray-400 mb-3\">Lyrics</h4>\n                    <div className=\"bg-gray-700/50 rounded-lg p-4\">\n                      <p className=\"text-gray-200 whitespace-pre-wrap\">{track.lyrics}</p>\n                    </div>\n                  </div>\n                )}\n\n                {/* Audio Player */}\n                {track.audioUrl && track.status === \"completed\" && (\n                  <div>\n                    <h4 className=\"text-sm font-medium text-gray-400 mb-3\">Audio</h4>\n                    <AudioPlayer src={track.audioUrl} className=\"w-full\" />\n                  </div>\n                )}\n                \n                {track.status === \"generating\" && (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400 mx-auto mb-4\"></div>\n                    <p className=\"text-gray-400\">Track is still generating...</p>\n                  </div>\n                )}\n                \n                {track.status === \"failed\" && (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-red-400\">Track generation failed</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9464},"server/emailService.ts":{"content":"import { Resend } from 'resend';\nimport { randomBytes } from 'crypto';\n\nconst resend = new Resend(process.env.RESEND_API_KEY);\n\nexport class EmailService {\n  static generateVerificationToken(): string {\n    return randomBytes(32).toString('hex');\n  }\n\n  static generatePasswordResetToken(): string {\n    return randomBytes(32).toString('hex');\n  }\n\n  static async sendVerificationEmail(\n    email: string, \n    firstName: string, \n    verificationToken: string\n  ): Promise<void> {\n    const verificationUrl = `https://numusic.app/verify-email/${verificationToken}`;\n    \n    const emailHtml = `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Verify Your NuMusic Account</title>\n      <style>\n        body { margin: 0; padding: 0; font-family: 'Arial', sans-serif; background-color: #0a0a0a; color: #ffffff; }\n        .container { max-width: 600px; margin: 0 auto; background: linear-gradient(135deg, #1a1a1a 0%, #2d1b69 100%); }\n        .header { padding: 40px 30px; text-align: center; background: linear-gradient(135deg, #4c1d95 0%, #7c3aed 100%); }\n        .logo { font-size: 32px; font-weight: bold; color: #ffffff; margin: 0; letter-spacing: -1px; }\n        .content { padding: 40px 30px; }\n        .welcome { font-size: 24px; font-weight: bold; margin: 0 0 16px 0; color: #ffffff; }\n        .message { font-size: 16px; line-height: 1.6; margin: 0 0 32px 0; color: #e2e8f0; }\n        .button-container { text-align: center; margin: 32px 0; }\n        .verify-button { \n          display: inline-block; \n          padding: 16px 32px; \n          background: linear-gradient(135deg, #7c3aed 0%, #a855f7 100%); \n          color: #ffffff; \n          text-decoration: none; \n          border-radius: 8px; \n          font-size: 16px; \n          font-weight: 600; \n          box-shadow: 0 4px 12px rgba(124, 58, 237, 0.3);\n          border: none;\n        }\n        .verify-button:hover { background: linear-gradient(135deg, #6d28d9 0%, #9333ea 100%); }\n        .fallback { margin: 32px 0; padding: 20px; background: #1e293b; border-radius: 8px; border-left: 4px solid #7c3aed; }\n        .fallback-text { font-size: 14px; color: #cbd5e1; margin: 0 0 12px 0; }\n        .fallback-link { word-break: break-all; color: #a855f7; text-decoration: none; font-family: monospace; font-size: 12px; }\n        .footer { padding: 30px; text-align: center; border-top: 1px solid #374151; background: #111827; }\n        .footer-text { font-size: 12px; color: #9ca3af; margin: 0; }\n        .security-note { margin: 24px 0; padding: 16px; background: #1f2937; border-radius: 6px; font-size: 14px; color: #d1d5db; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1 class=\"logo\">🎵 NuMusic</h1>\n        </div>\n        <div class=\"content\">\n          <h2 class=\"welcome\">Welcome to NuMusic, ${firstName}!</h2>\n          <p class=\"message\">\n            Thank you for joining NuMusic, the AI-powered music generation platform. \n            To complete your registration and start creating amazing music, please verify your email address.\n          </p>\n          \n          <div class=\"button-container\">\n            <a href=\"${verificationUrl}\" class=\"verify-button\">Verify Email Address</a>\n          </div>\n          \n          <div class=\"fallback\">\n            <p class=\"fallback-text\">\n              If the button above doesn't work, copy and paste this link into your browser:\n            </p>\n            <a href=\"${verificationUrl}\" class=\"fallback-link\">${verificationUrl}</a>\n          </div>\n          \n          <div class=\"security-note\">\n            <strong>Security Note:</strong> This verification link will expire in 24 hours. \n            If you didn't create a NuMusic account, you can safely ignore this email.\n          </div>\n        </div>\n        <div class=\"footer\">\n          <p class=\"footer-text\">\n            © 2025 NuMusic. All rights reserved.<br>\n            This email was sent to ${email} because you signed up for a NuMusic account.\n          </p>\n        </div>\n      </div>\n    </body>\n    </html>\n    `;\n\n    const emailText = `\nWelcome to NuMusic, ${firstName}!\n\nThank you for joining NuMusic, the AI-powered music generation platform. To complete your registration and start creating amazing music, please verify your email address.\n\nVerify your email: ${verificationUrl}\n\nThis verification link will expire in 24 hours. If you didn't create a NuMusic account, you can safely ignore this email.\n\n© 2025 NuMusic. All rights reserved.\n    `;\n\n    try {\n      await resend.emails.send({\n        from: 'NuMusic <noreply@numusic.app>',\n        to: email,\n        subject: 'Verify Your NuMusic Account',\n        html: emailHtml,\n        text: emailText,\n      });\n    } catch (error) {\n      console.error('Failed to send verification email:', error);\n      throw new Error('Failed to send verification email');\n    }\n  }\n\n  static async sendWelcomeEmail(email: string, firstName: string): Promise<void> {\n    const emailHtml = `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Welcome to NuMusic!</title>\n      <style>\n        body { margin: 0; padding: 0; font-family: 'Arial', sans-serif; background-color: #0a0a0a; color: #ffffff; }\n        .container { max-width: 600px; margin: 0 auto; background: linear-gradient(135deg, #1a1a1a 0%, #2d1b69 100%); }\n        .header { padding: 40px 30px; text-align: center; background: linear-gradient(135deg, #4c1d95 0%, #7c3aed 100%); }\n        .logo { font-size: 32px; font-weight: bold; color: #ffffff; margin: 0; letter-spacing: -1px; }\n        .content { padding: 40px 30px; }\n        .welcome { font-size: 24px; font-weight: bold; margin: 0 0 16px 0; color: #ffffff; }\n        .message { font-size: 16px; line-height: 1.6; margin: 0 0 24px 0; color: #e2e8f0; }\n        .feature-list { list-style: none; padding: 0; margin: 24px 0; }\n        .feature-item { padding: 12px 0; color: #d1d5db; font-size: 16px; }\n        .feature-item:before { content: \"🎵 \"; margin-right: 8px; }\n        .button-container { text-align: center; margin: 32px 0; }\n        .get-started-button { \n          display: inline-block; \n          padding: 16px 32px; \n          background: linear-gradient(135deg, #7c3aed 0%, #a855f7 100%); \n          color: #ffffff; \n          text-decoration: none; \n          border-radius: 8px; \n          font-size: 16px; \n          font-weight: 600; \n          box-shadow: 0 4px 12px rgba(124, 58, 237, 0.3);\n        }\n        .footer { padding: 30px; text-align: center; border-top: 1px solid #374151; background: #111827; }\n        .footer-text { font-size: 12px; color: #9ca3af; margin: 0; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1 class=\"logo\">🎵 NuMusic</h1>\n        </div>\n        <div class=\"content\">\n          <h2 class=\"welcome\">Welcome to NuMusic, ${firstName}!</h2>\n          <p class=\"message\">\n            Your email has been verified and your account is now active! \n            You're ready to start creating amazing AI-powered music.\n          </p>\n          \n          <ul class=\"feature-list\">\n            <li class=\"feature-item\">Generate music from text descriptions</li>\n            <li class=\"feature-item\">Transform existing audio into new compositions</li>\n            <li class=\"feature-item\">Create custom lyrics with AI assistance</li>\n            <li class=\"feature-item\">Share your creations with the community</li>\n            <li class=\"feature-item\">Build your personal music library</li>\n          </ul>\n          \n          <div class=\"button-container\">\n            <a href=\"https://numusic.app/\" class=\"get-started-button\">Start Creating Music</a>\n          </div>\n        </div>\n        <div class=\"footer\">\n          <p class=\"footer-text\">\n            © 2025 NuMusic. All rights reserved.<br>\n            Happy music making!\n          </p>\n        </div>\n      </div>\n    </body>\n    </html>\n    `;\n\n    try {\n      await resend.emails.send({\n        from: 'NuMusic <noreply@numusic.app>',\n        to: email,\n        subject: 'Welcome to NuMusic - Your Account is Ready!',\n        html: emailHtml,\n      });\n    } catch (error) {\n      console.error('Failed to send welcome email:', error);\n      // Don't throw error for welcome email failures\n    }\n  }\n\n  static async sendPasswordResetEmail(\n    email: string, \n    firstName: string, \n    resetToken: string\n  ): Promise<void> {\n    const resetUrl = `https://numusic.app/reset-password/${resetToken}`;\n    \n    const emailHtml = `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Reset Your NuMusic Password</title>\n      <style>\n        body { margin: 0; padding: 0; font-family: 'Arial', sans-serif; background-color: #0a0a0a; color: #ffffff; }\n        .container { max-width: 600px; margin: 0 auto; background: linear-gradient(135deg, #1a1a1a 0%, #2d1b69 100%); }\n        .header { padding: 40px 30px; text-align: center; background: linear-gradient(135deg, #4c1d95 0%, #7c3aed 100%); }\n        .logo { font-size: 32px; font-weight: bold; color: #ffffff; margin: 0; letter-spacing: -1px; }\n        .content { padding: 40px 30px; }\n        .welcome { font-size: 24px; font-weight: bold; margin: 0 0 16px 0; color: #ffffff; }\n        .message { font-size: 16px; line-height: 1.6; margin: 0 0 32px 0; color: #e2e8f0; }\n        .button-container { text-align: center; margin: 32px 0; }\n        .reset-button { \n          display: inline-block; \n          padding: 16px 32px; \n          background: linear-gradient(135deg, #dc2626 0%, #ef4444 100%); \n          color: #ffffff; \n          text-decoration: none; \n          border-radius: 8px; \n          font-size: 16px; \n          font-weight: 600; \n          box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);\n        }\n        .reset-button:hover { background: linear-gradient(135deg, #b91c1c 0%, #dc2626 100%); }\n        .fallback { margin: 32px 0; padding: 20px; background: #1e293b; border-radius: 8px; border-left: 4px solid #dc2626; }\n        .fallback-text { font-size: 14px; color: #cbd5e1; margin: 0 0 12px 0; }\n        .fallback-link { word-break: break-all; color: #ef4444; text-decoration: none; font-family: monospace; font-size: 12px; }\n        .footer { padding: 30px; text-align: center; border-top: 1px solid #374151; background: #111827; }\n        .footer-text { font-size: 12px; color: #9ca3af; margin: 0; }\n        .security-note { margin: 24px 0; padding: 16px; background: #7f1d1d; border-radius: 6px; font-size: 14px; color: #fecaca; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1 class=\"logo\">🎵 NuMusic</h1>\n        </div>\n        <div class=\"content\">\n          <h2 class=\"welcome\">Reset Your Password</h2>\n          <p class=\"message\">\n            Hi ${firstName},<br><br>\n            We received a request to reset your password for your NuMusic account. \n            Click the button below to create a new password.\n          </p>\n          \n          <div class=\"button-container\">\n            <a href=\"${resetUrl}\" class=\"reset-button\">Reset My Password</a>\n          </div>\n          \n          <div class=\"fallback\">\n            <p class=\"fallback-text\">If the button doesn't work, copy and paste this link:</p>\n            <a href=\"${resetUrl}\" class=\"fallback-link\">${resetUrl}</a>\n          </div>\n          \n          <div class=\"security-note\">\n            <strong>Important:</strong> This link will expire in 1 hour. If you didn't request a password reset, \n            you can safely ignore this email. Your password won't be changed until you access the link above.\n          </div>\n        </div>\n        <div class=\"footer\">\n          <p class=\"footer-text\">\n            © 2025 NuMusic. All rights reserved.<br>\n            If you have any questions, please contact our support team.\n          </p>\n        </div>\n      </div>\n    </body>\n    </html>\n    `;\n\n    const emailText = `\nReset Your NuMusic Password\n\nHi ${firstName},\n\nWe received a request to reset your password for your NuMusic account. Visit the following link to create a new password:\n\n${resetUrl}\n\nThis link will expire in 1 hour. If you didn't request a password reset, you can safely ignore this email.\n\n© 2025 NuMusic. All rights reserved.\n    `;\n\n    try {\n      await resend.emails.send({\n        from: 'NuMusic <noreply@numusic.app>',\n        to: email,\n        subject: 'Reset Your NuMusic Password',\n        html: emailHtml,\n        text: emailText,\n      });\n    } catch (error) {\n      console.error('Failed to send password reset email:', error);\n      throw new Error('Failed to send password reset email');\n    }\n  }\n}","size_bytes":13030},"client/src/pages/check-email.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Mail, RefreshCw, Check, ArrowLeft } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface CheckEmailPageState {\n  email?: string;\n  firstName?: string;\n}\n\nexport default function CheckEmailPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [userInfo, setUserInfo] = useState<CheckEmailPageState>({});\n  const [resendingEmail, setResendingEmail] = useState(false);\n  const [resendEmail, setResendEmail] = useState(\"\");\n  const [emailSent, setEmailSent] = useState(false);\n\n  useEffect(() => {\n    // Get email info from navigation state or localStorage\n    const navigationState = (window.history.state as CheckEmailPageState) || {};\n    const savedEmail = localStorage.getItem(\"pendingVerificationEmail\");\n    const savedFirstName = localStorage.getItem(\"pendingVerificationFirstName\");\n    \n    setUserInfo({\n      email: navigationState.email || savedEmail || \"\",\n      firstName: navigationState.firstName || savedFirstName || \"\"\n    });\n\n    // Set resend email input\n    setResendEmail(navigationState.email || savedEmail || \"\");\n\n    // Clear temporary storage after loading\n    if (savedEmail) {\n      localStorage.removeItem(\"pendingVerificationEmail\");\n      localStorage.removeItem(\"pendingVerificationFirstName\");\n    }\n  }, []);\n\n  const handleResendEmail = async () => {\n    if (!resendEmail.trim()) {\n      toast({\n        title: \"Email Required\",\n        description: \"Please enter your email address to resend verification.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setResendingEmail(true);\n    try {\n      await apiRequest(\"POST\", \"/api/auth/resend-verification\", { \n        email: resendEmail.trim() \n      });\n      \n      setEmailSent(true);\n      toast({\n        title: \"Email Sent\",\n        description: \"A new verification email has been sent. Check your inbox.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to Send Email\",\n        description: error.message || \"Could not send verification email. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setResendingEmail(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-black via-purple-950/20 to-black p-4\">\n      <Card className=\"w-full max-w-md bg-black/50 border-purple-500/20 backdrop-blur-sm\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center\">\n            {emailSent ? (\n              <Check className=\"w-8 h-8 text-white\" />\n            ) : (\n              <Mail className=\"w-8 h-8 text-white\" />\n            )}\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-white\">\n            Check Your Email\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {userInfo.email && (\n            <div className=\"text-center\">\n              <p className=\"text-gray-300 mb-2\">\n                Hi {userInfo.firstName && userInfo.firstName.trim() !== \"\" ? userInfo.firstName : \"there\"}! 👋\n              </p>\n              <p className=\"text-gray-300 mb-4\">\n                We've sent a verification link to:\n              </p>\n              <p className=\"font-semibold text-purple-400 bg-purple-500/10 px-4 py-2 rounded-lg border border-purple-500/20\">\n                {userInfo.email}\n              </p>\n            </div>\n          )}\n\n          <div className=\"space-y-4\">\n            <div className=\"text-sm text-gray-400 space-y-2\">\n              <p className=\"flex items-center\">\n                <span className=\"w-2 h-2 bg-purple-500 rounded-full mr-3\"></span>\n                Click the verification link in your email\n              </p>\n              <p className=\"flex items-center\">\n                <span className=\"w-2 h-2 bg-purple-500 rounded-full mr-3\"></span>\n                Check your spam folder if you don't see it\n              </p>\n              <p className=\"flex items-center\">\n                <span className=\"w-2 h-2 bg-purple-500 rounded-full mr-3\"></span>\n                The link expires in 24 hours\n              </p>\n            </div>\n\n            <div className=\"border-t border-purple-500/20 pt-4\">\n              <p className=\"text-sm text-gray-400 mb-3\">\n                Didn't receive the email? Enter your email address:\n              </p>\n              <div className=\"space-y-3\">\n                <Input\n                  type=\"email\"\n                  placeholder=\"Enter your email address\"\n                  value={resendEmail}\n                  onChange={(e) => setResendEmail(e.target.value)}\n                  className=\"bg-black/50 border-purple-500/30 text-white placeholder:text-gray-500 focus:border-purple-500\"\n                  data-testid=\"input-resend-email\"\n                />\n                <Button\n                  onClick={handleResendEmail}\n                  disabled={resendingEmail}\n                  className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\n                  data-testid=\"button-resend-verification\"\n                >\n                  {resendingEmail ? (\n                    <>\n                      <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Sending...\n                    </>\n                  ) : (\n                    <>\n                      <Mail className=\"w-4 h-4 mr-2\" />\n                      Resend Verification Email\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"text-center pt-4 border-t border-purple-500/20\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" className=\"text-purple-400 hover:text-purple-300 hover:bg-purple-500/10\" data-testid=\"link-back-home\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Home\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6490},"client/src/pages/verify-email.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CheckCircle, XCircle, Loader2, ArrowRight, RefreshCw } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ntype VerificationState = \"loading\" | \"success\" | \"error\" | \"expired\";\n\ninterface VerificationResult {\n  message: string;\n  user?: {\n    firstName: string;\n    email: string;\n  };\n  expired?: boolean;\n}\n\nexport default function VerifyEmailPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [verificationState, setVerificationState] = useState<VerificationState>(\"loading\");\n  const [result, setResult] = useState<VerificationResult | null>(null);\n\n  // Get token from URL parameters\n  const getTokenFromPath = () => {\n    const pathParts = window.location.pathname.split('/');\n    const verifyIndex = pathParts.indexOf('verify-email');\n    return verifyIndex !== -1 && pathParts[verifyIndex + 1] ? pathParts[verifyIndex + 1] : null;\n  };\n\n  useEffect(() => {\n    const verifyEmail = async () => {\n      const token = getTokenFromPath();\n      \n      if (!token) {\n        setVerificationState(\"error\");\n        setResult({ message: \"Invalid verification link. Please check your email for the correct link.\" });\n        return;\n      }\n\n      try {\n        const response = await fetch(`/api/auth/verify-email/${token}`);\n        const data = await response.json();\n\n        if (response.ok) {\n          setVerificationState(\"success\");\n          setResult(data);\n          toast({\n            title: \"Email Verified!\",\n            description: \"Your account is now active. You can log in.\",\n          });\n        } else {\n          if (data.expired) {\n            setVerificationState(\"expired\");\n          } else {\n            setVerificationState(\"error\");\n          }\n          setResult(data);\n        }\n      } catch (error) {\n        console.error(\"Verification error:\", error);\n        setVerificationState(\"error\");\n        setResult({ message: \"An error occurred during verification. Please try again.\" });\n      }\n    };\n\n    verifyEmail();\n  }, [toast]);\n\n  const handleResendVerification = () => {\n    // Redirect to a page where user can request new verification\n    setLocation(\"/check-email\");\n  };\n\n  const handleGoToLogin = () => {\n    setLocation(\"/auth\");\n  };\n\n  const renderContent = () => {\n    switch (verificationState) {\n      case \"loading\":\n        return (\n          <>\n            <div className=\"mx-auto mb-4 w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center\">\n              <Loader2 className=\"w-8 h-8 text-white animate-spin\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-white text-center\">\n              Verifying Your Email\n            </CardTitle>\n            <div className=\"text-center\">\n              <p className=\"text-gray-300\">\n                Please wait while we verify your email address...\n              </p>\n            </div>\n          </>\n        );\n\n      case \"success\":\n        return (\n          <>\n            <div className=\"mx-auto mb-4 w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-500 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-white text-center\">\n              Email Verified Successfully!\n            </CardTitle>\n            <div className=\"space-y-4 text-center\">\n              <p className=\"text-gray-300\">\n                Welcome to NuMusic, {result?.user?.firstName || \"there\"}! 🎉\n              </p>\n              <p className=\"text-green-400\">\n                {result?.message || \"Your account is now active and ready to use.\"}\n              </p>\n              <Button\n                onClick={handleGoToLogin}\n                className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\n                data-testid=\"button-go-to-login\"\n              >\n                <ArrowRight className=\"w-4 h-4 mr-2\" />\n                Continue to Login\n              </Button>\n            </div>\n          </>\n        );\n\n      case \"expired\":\n        return (\n          <>\n            <div className=\"mx-auto mb-4 w-16 h-16 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center\">\n              <XCircle className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-white text-center\">\n              Verification Link Expired\n            </CardTitle>\n            <div className=\"space-y-4 text-center\">\n              <p className=\"text-gray-300\">\n                {result?.message || \"This verification link has expired or is no longer valid.\"}\n              </p>\n              <p className=\"text-orange-400\">\n                Don't worry! You can request a new verification email.\n              </p>\n              <Button\n                onClick={handleResendVerification}\n                className=\"w-full bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700\"\n                data-testid=\"button-request-new-verification\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Request New Verification Email\n              </Button>\n            </div>\n          </>\n        );\n\n      case \"error\":\n      default:\n        return (\n          <>\n            <div className=\"mx-auto mb-4 w-16 h-16 bg-gradient-to-br from-red-500 to-pink-500 rounded-full flex items-center justify-center\">\n              <XCircle className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-white text-center\">\n              Verification Failed\n            </CardTitle>\n            <div className=\"space-y-4 text-center\">\n              <p className=\"text-gray-300\">\n                {result?.message || \"Something went wrong during email verification.\"}\n              </p>\n              <div className=\"space-y-2\">\n                <Button\n                  onClick={handleResendVerification}\n                  className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\n                  data-testid=\"button-try-again\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Request New Verification Email\n                </Button>\n                <Link href=\"/\">\n                  <Button variant=\"ghost\" className=\"w-full text-purple-400 hover:text-purple-300 hover:bg-purple-500/10\" data-testid=\"link-go-home\">\n                    Back to Home\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-black via-purple-950/20 to-black p-4\">\n      <Card className=\"w-full max-w-md bg-black/50 border-purple-500/20 backdrop-blur-sm\">\n        <CardHeader className=\"text-center\">\n          {renderContent()}\n        </CardHeader>\n      </Card>\n    </div>\n  );\n}","size_bytes":7363},"client/src/pages/reset-password.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Music, Eye, EyeOff, Lock, CheckCircle, AlertCircle } from \"lucide-react\";\nimport backgroundVideo from \"/background-video.mp4\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation, Link } from \"wouter\";\nimport { z } from \"zod\";\n\nconst resetPasswordSchema = z.object({\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype ResetPasswordForm = z.infer<typeof resetPasswordSchema>;\n\nexport default function ResetPassword() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [token, setToken] = useState<string>(\"\");\n  const [isSuccess, setIsSuccess] = useState(false);\n  const { toast } = useToast();\n\n  // Extract token from URL\n  useEffect(() => {\n    const path = window.location.pathname;\n    const tokenMatch = path.match(/\\/reset-password\\/(.+)$/);\n    if (tokenMatch) {\n      setToken(tokenMatch[1]);\n    } else {\n      toast({\n        title: \"Invalid Reset Link\",\n        description: \"This password reset link is invalid or malformed.\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/auth\");\n    }\n  }, [setLocation, toast]);\n\n  const resetForm = useForm<ResetPasswordForm>({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const resetMutation = useMutation({\n    mutationFn: async (data: ResetPasswordForm) => {\n      const response = await apiRequest(\"/api/auth/reset-password\", \"POST\", {\n        token,\n        newPassword: data.password,\n      });\n      return response.json();\n    },\n    onSuccess: (result) => {\n      setIsSuccess(true);\n      toast({\n        title: \"Password Reset Successful\",\n        description: result.message || \"Your password has been reset successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Reset Failed\",\n        description: error.message || \"Failed to reset password. The link may be expired.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onResetPassword = (data: ResetPasswordForm) => {\n    resetMutation.mutate(data);\n  };\n\n  if (isSuccess) {\n    return (\n      <div className=\"min-h-screen relative overflow-hidden\">\n        {/* Background Video */}\n        <video\n          autoPlay\n          muted\n          loop\n          playsInline\n          className=\"absolute inset-0 w-full h-full object-cover z-0\"\n        >\n          <source src={backgroundVideo} type=\"video/mp4\" />\n        </video>\n\n        {/* Content overlay */}\n        <div className=\"relative z-10 bg-black/40 min-h-screen flex items-center justify-center\">\n          <Card className=\"w-full max-w-md bg-gray-800/50 border-gray-700 backdrop-blur-sm\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mb-4\">\n                <CheckCircle className=\"w-8 h-8 text-white\" />\n              </div>\n              <CardTitle className=\"text-2xl font-bold text-white\">Password Reset Complete</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Your password has been successfully changed. You can now sign in with your new password.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"text-center\">\n              <Link href=\"/auth\">\n                <Button className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white\">\n                  Go to Sign In\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden\">\n      {/* Background Video */}\n      <video\n        autoPlay\n        muted\n        loop\n        playsInline\n        className=\"absolute inset-0 w-full h-full object-cover z-0\"\n      >\n        <source src={backgroundVideo} type=\"video/mp4\" />\n      </video>\n\n      {/* Content overlay */}\n      <div className=\"relative z-10 bg-black/40 min-h-screen flex items-center justify-center\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex justify-center\">\n            <Card className=\"w-full max-w-md bg-gray-800/50 border-gray-700 backdrop-blur-sm\">\n              <CardHeader className=\"text-center\">\n                <div className=\"flex items-center justify-center space-x-3 mb-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-blue-500 rounded-xl flex items-center justify-center\">\n                    <Music className=\"text-white text-xl\" />\n                  </div>\n                  <h1 className=\"text-2xl font-bold text-white\">NuMusic</h1>\n                </div>\n                <CardTitle className=\"text-2xl font-bold text-white\">Reset Your Password</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Enter your new password below\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={resetForm.handleSubmit(onResetPassword)} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"new-password\" className=\"text-gray-300\">New Password</Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                      <Input\n                        id=\"new-password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter new password\"\n                        className=\"pl-10 pr-10 bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n                        data-testid=\"input-new-password\"\n                        {...resetForm.register(\"password\")}\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </button>\n                    </div>\n                    {resetForm.formState.errors.password && (\n                      <p className=\"text-red-400 text-sm\">{resetForm.formState.errors.password.message}</p>\n                    )}\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirm-password\" className=\"text-gray-300\">Confirm Password</Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                      <Input\n                        id=\"confirm-password\"\n                        type={showConfirmPassword ? \"text\" : \"password\"}\n                        placeholder=\"Confirm new password\"\n                        className=\"pl-10 pr-10 bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n                        data-testid=\"input-confirm-password\"\n                        {...resetForm.register(\"confirmPassword\")}\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                      >\n                        {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </button>\n                    </div>\n                    {resetForm.formState.errors.confirmPassword && (\n                      <p className=\"text-red-400 text-sm\">{resetForm.formState.errors.confirmPassword.message}</p>\n                    )}\n                  </div>\n                  \n                  <div className=\"pt-2\">\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white\"\n                      disabled={resetMutation.isPending}\n                      data-testid=\"button-reset-password\"\n                    >\n                      {resetMutation.isPending ? \"Resetting...\" : \"Reset Password\"}\n                    </Button>\n                  </div>\n\n                  <div className=\"text-center pt-4\">\n                    <Link href=\"/auth\">\n                      <button className=\"text-sm text-purple-400 hover:text-purple-300 underline\">\n                        Back to Sign In\n                      </button>\n                    </Link>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9851},"client/src/components/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Music, User, LogOut } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface HeaderProps {\n  currentPage?: string;\n}\n\nexport function Header({ currentPage }: HeaderProps) {\n  const { user, isLoading } = useAuth();\n\n  return (\n    <header className=\"bg-music-secondary/80 backdrop-blur-lg border-b border-gray-800 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-music-purple to-music-blue rounded-xl flex items-center justify-center\">\n              <Music className=\"text-white text-lg\" />\n            </div>\n            <h1 className=\"text-xl font-bold bg-gradient-to-r from-music-purple to-music-blue bg-clip-text text-transparent\">\n              NuMusic\n            </h1>\n          </div>\n          \n          {/* Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-8\">\n            <a \n              href=\"/\" \n              className={`transition-colors ${\n                currentPage === 'home' || currentPage === 'create' \n                  ? 'text-music-blue font-medium' \n                  : 'text-gray-300 hover:text-white'\n              }`}\n            >\n              {user ? 'Create' : 'Home'}\n            </a>\n            <a \n              href=\"/pricing\" \n              className={`transition-colors ${\n                currentPage === 'pricing' \n                  ? 'text-music-blue font-medium' \n                  : 'text-gray-300 hover:text-white'\n              }`}\n            >\n              Pricing\n            </a>\n            <a \n              href=\"/contact\" \n              className={`transition-colors ${\n                currentPage === 'contact' \n                  ? 'text-music-blue font-medium' \n                  : 'text-gray-300 hover:text-white'\n              }`}\n            >\n              Contact\n            </a>\n            <a \n              href=\"/privacy\" \n              className={`transition-colors ${\n                currentPage === 'privacy' \n                  ? 'text-music-blue font-medium' \n                  : 'text-gray-300 hover:text-white'\n              }`}\n            >\n              Privacy\n            </a>\n            <a \n              href=\"/terms\" \n              className={`transition-colors ${\n                currentPage === 'terms' \n                  ? 'text-music-blue font-medium' \n                  : 'text-gray-300 hover:text-white'\n              }`}\n            >\n              Terms\n            </a>\n          </nav>\n          \n          {/* User Menu */}\n          <div className=\"flex items-center space-x-4\">\n            {!isLoading && user ? (\n              <>\n                <a href=\"/profile\" className=\"flex items-center space-x-3 hover:bg-gray-800/50 rounded-lg px-3 py-2 transition-colors\">\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-music-purple to-music-blue flex items-center justify-center\">\n                    <User className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <span className=\"text-sm text-gray-300 hover:text-white transition-colors\">\n                    {(user as any)?.firstName || (user as any)?.email || \"User\"}\n                  </span>\n                </a>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => window.location.href = \"/api/auth/logout\"}\n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"w-4 h-4 mr-2\" />\n                  Logout\n                </Button>\n              </>\n            ) : currentPage === 'auth' ? (\n              <span className=\"text-gray-400 text-sm\">Sign In / Sign Up</span>\n            ) : (\n              <>\n                <Button\n                  variant=\"ghost\"\n                  className=\"text-gray-300 hover:text-white\"\n                  onClick={() => window.location.href = \"/auth\"}\n                >\n                  Sign In\n                </Button>\n                <Button\n                  className=\"bg-gradient-to-r from-music-purple to-music-blue hover:from-purple-600 hover:to-blue-600 text-white font-medium transition-all transform hover:scale-105\"\n                  onClick={() => window.location.href = \"/auth\"}\n                >\n                  Get Started\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":4658}},"version":1}